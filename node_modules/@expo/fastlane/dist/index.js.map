{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AACA,sEAAwD;AAcxD,KAAK,UAAU,WAAW,CAAC,YAAsB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,KAAsB,EAAE;IAC5F,MAAM,eAAe,GAAG;QACtB,uBAAuB,EAAE,GAAG;QAC5B,0BAA0B,EAAE,GAAG;QAC/B,EAAE,EAAE,GAAG;QACP,MAAM,EAAE,aAAa;QACrB,GAAG,IAAI;KACR,CAAC;IACF,OAAO,MAAM,sBAAK,CAChB,UAAU,EACV,YAAY,EACZ;QACE,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,eAAe,EAAE;QAC3C,MAAM;QACN,GAAG;KACJ,CACF,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,YAAsB,EAAE,MAAe;IACtE,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,WAAW,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QACvE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;KAC3B;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;QAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;KAChC;AACH,CAAC;AAGQ,8CAAiB;AAD1B,kBAAe,WAAW,CAAC","sourcesContent":["import { bunyan } from '@expo/logger';\nimport spawn, { SpawnResult } from '@expo/turtle-spawn';\n\ninterface FastlaneOptions {\n  logger?: bunyan;\n  envs?: { [key: string]: string };\n  cwd?: string;\n}\n\ninterface FastlaneResult {\n  err?: Error;\n  stdout: string;\n  stderr: string;\n}\n\nasync function runFastlane(fastlaneArgs: string[], { logger, envs, cwd }: FastlaneOptions = {}): Promise<SpawnResult> {\n  const fastlaneEnvVars = {\n    FASTLANE_DISABLE_COLORS: '1',\n    FASTLANE_SKIP_UPDATE_CHECK: '1',\n    CI: '1',\n    LC_ALL: 'en_US.UTF-8',\n    ...envs,\n  };\n  return await spawn(\n    'fastlane',\n    fastlaneArgs,\n    {\n      env: { ...process.env, ...fastlaneEnvVars },\n      logger,\n      cwd,\n    },\n  );\n}\n\nasync function runFastlaneSafely(fastlaneArgs: string[], logger?: bunyan): Promise<FastlaneResult> {\n  try {\n    const { stdout, stderr } = await runFastlane(fastlaneArgs, { logger });\n    return { stdout, stderr };\n  } catch (err) {\n    const { stdout, stderr } = err;\n    return { stdout, stderr, err };\n  }\n}\n\nexport default runFastlane;\nexport { runFastlaneSafely };\n"]}