{"version":3,"file":"templateFile.js","sourceRoot":"","sources":["../src/templateFile.ts"],"names":[],"mappings":";;;;;AAAA,+DAAuC;AACvC,wDAA0B;AAE1B,KAAK,UAAU,YAAY,CACzB,gBAAwB,EACxB,IAAqC,EACrC,cAAuB;IAEvB,MAAM,cAAc,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACnE,MAAM,gBAAgB,GAAG,kBAAQ,CAAC,cAAc,EAAE;QAChD,WAAW;QACX,WAAW,EAAE,iBAAiB;KAC/B,CAAC,CAAC;IACH,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAElD,IAAI,cAAc,EAAE;QAClB,MAAM,kBAAE,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;KACxD;SAAM;QACL,OAAO,kBAAkB,CAAC;KAC3B;AACH,CAAC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import template from 'lodash/template';\nimport fs from 'fs-extra';\n\nasync function templateFile(\n  templateFilePath: string,\n  envs: Record<string, string | number>,\n  outputFilePath?: string,\n): Promise<string | void> {\n  const templateString = await fs.readFile(templateFilePath, 'utf8');\n  const compiledTemplate = template(templateString, {\n    // mustache\n    interpolate: /{{([\\s\\S]+?)}}/g,\n  });\n  const outputFileContents = compiledTemplate(envs);\n\n  if (outputFilePath) {\n    await fs.writeFile(outputFilePath, outputFileContents);\n  } else {\n    return outputFileContents;\n  }\n}\n\nexport default templateFile;\n"]}