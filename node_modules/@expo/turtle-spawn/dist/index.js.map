{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,yCAAuD;AACvD,oEAA+F;AAO/F,KAAK,UAAU,KAAK,CAClB,OAAe,EACf,IAAc,EACd,WAAyB;IACvB,KAAK,EAAE,SAAS;IAChB,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;CACnB;IAED,MAAM,OAAO,GAAG,EAAE,GAAG,QAAQ,EAAE,CAAC;IAChC,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;IAC3B,IAAI,MAAM,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;KACxB;IACD,MAAM,OAAO,GAAG,qBAAU,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACnD,IAAI,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;QAC3B,wBAAe,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;KACjD;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,kBAAe,KAAK,CAAC","sourcesContent":["import { pipeSpawnOutput, bunyan } from '@expo/logger';\nimport spawnAsync, { SpawnResult, SpawnOptions as SpawnAsyncOptions } from '@expo/spawn-async';\n\ntype SpawnOptions = SpawnAsyncOptions & {\n  logger?: bunyan;\n  printAsStdoutOnly?: boolean;\n};\n\nasync function spawn(\n  command: string,\n  args: string[],\n  _options: SpawnOptions = {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  },\n): Promise<SpawnResult> {\n  const options = { ..._options };\n  const { logger } = options;\n  if (logger) {\n    options.stdio = 'pipe';\n  }\n  const promise = spawnAsync(command, args, options);\n  if (logger && promise.child) {\n    pipeSpawnOutput(logger, promise.child, options);\n  }\n  return promise;\n}\n\nexport default spawn;\nexport { SpawnOptions, SpawnResult };\n"]}