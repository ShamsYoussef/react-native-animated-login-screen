{"version":3,"file":"PackageManager.js","sourceRoot":"","sources":["../src/PackageManager.ts"],"names":[],"mappings":";;;;;AAAA,2BAAkC;AAClC,8DAA+B;AAc/B,SAAgB,sBAAsB;IACpC,OAAO,iBAAY,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACrC,CAAC;AAFD,wDAEC;AAED,SAAgB,cAAc,CAAC,OAAe;IAC5C,MAAM,WAAW,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,qBAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE;YACrD,IAAI,KAAK,EAAE;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC;aACf;YACD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAVD,wCAUC","sourcesContent":["import { realpathSync } from 'fs';\nimport sudo from 'sudo-prompt';\n\nexport type Logger = (...args: any[]) => void;\n\nexport interface PackageManager {\n  installAsync(): Promise<void>;\n  addAsync(...names: string[]): Promise<void>;\n  addDevAsync(...names: string[]): Promise<void>;\n  versionAsync(): Promise<string>;\n  getConfigAsync(key: string): Promise<string>;\n  removeLockfileAsync(): Promise<void>;\n  cleanAsync(): Promise<void>;\n}\n\nexport function getPossibleProjectRoot(): string {\n  return realpathSync(process.cwd());\n}\n\nexport function spawnSudoAsync(command: string): Promise<void> {\n  const packageJSON = require('../package.json');\n  return new Promise((resolve, reject) => {\n    sudo.exec(command, { name: packageJSON.name }, error => {\n      if (error) {\n        reject(error);\n      }\n      resolve();\n    });\n  });\n}\n"]}