{"version":3,"file":"withTypeScriptAsync.js","sourceRoot":"","sources":["../../src/addons/withTypeScriptAsync.ts"],"names":[],"mappings":";;;;;AAAA,yCAA8D;AAC9D,8CAA4D;AAC5D,oGAAwE;AACxE,4EAAkD;AAElD,gCAAgD;AAGhD;;;;;;;;GAQG;AACY,KAAK,UAAU,mBAAmB,CAC/C,aAA+B,EAC/B,MAAsE,EAAE;;IAExE,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,KAAK,YAAY,CAAC;IAElD,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,8BAAsB,EAAE,CAAC;IAC9D,aAAa;IACb,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,eAAS,CAAC,GAAG,CAAC,CAAC;IAE1C,IAAI,cAAc,GAAkB,IAAI,CAAC;IACzC,IAAI;QACF,cAAc,GAAG,sBAAa,CAAC,YAAY,EAAE,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,MAAO,CAAC,CAAC;KAC5E;IAAC,OAAO,CAAC,EAAE,GAAE;IAEd,MAAM,YAAY,GAAG,iBAAW,CAAC,GAAG,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IAEnE,MAAM,mBAAmB,GAAG,OAAO,CAAC,cAAc,IAAI,CAAC,MAAM,wBAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAE7F,IAAI,CAAC,mBAAmB,WAAI,aAAa,CAAC,OAAO,0CAAE,UAAU,CAAA,EAAE;QAC7D,aAAa,CAAC,OAAO,CAAC,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YACrF,sDAAsD;YACtD,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAO,aAAa,CAAC;KACtB;IAED,IAAI,CAAC,aAAa,CAAC,OAAO;QAAE,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC;IAEvD,aAAa,CAAC,OAAO,CAAC,IAAI,CACxB,IAAI,wCAA0B,CAC5B,4BAAgB,CAAC,oBAAoB,CAAC;QACpC,KAAK,EAAE,KAAK;QACZ,UAAU,EAAE,cAAc;QAC1B,2BAA2B,EAAE,IAAI;QACjC,oBAAoB,EAAE,IAAI;QAE1B,QAAQ,EAAE,YAAY;QACtB,WAAW,EAAE;YACX,IAAI;YACJ,kBAAkB;YAClB,wBAAwB;YACxB,+BAA+B;YAC/B,sBAAsB;YACtB,sBAAsB;SACvB;QAED,eAAe,EAAE;YACf,eAAe,EAAE,IAAI;YACrB,MAAM,EAAE,IAAI;SACb;QACD,+CAA+C;QAC/C,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS;QAC1C,MAAM,EAAE,IAAI;KACb,CAAC,CACH,CACF,CAAC;IAEF,OAAO,aAAa,CAAC;AACvB,CAAC;AA9DD,sCA8DC","sourcesContent":["import { fileExistsAsync, resolveModule } from '@expo/config';\nimport { getPossibleProjectRoot } from '@expo/config/paths';\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\nimport PnpWebpackPlugin from 'pnp-webpack-plugin';\n\nimport { getAbsolute, getConfig } from '../env';\nimport { AnyConfiguration, InputEnvironment } from '../types';\n\n/**\n * Enable or disable TypeScript in the Webpack config that's provided.\n * - Disabling will filter out any TypeScript extensions.\n * - Enabling will add fork TS checker to the plugins.\n *\n * @param webpackConfig input Webpack config to modify and return.\n * @param env Environment used to configure the input config.\n * @category addons\n */\nexport default async function withTypeScriptAsync(\n  webpackConfig: AnyConfiguration,\n  env: Pick<InputEnvironment, 'config' | 'locations' | 'projectRoot'> = {}\n): Promise<AnyConfiguration> {\n  const isDev = webpackConfig.mode !== 'production';\n\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n\n  let typeScriptPath: string | null = null;\n  try {\n    typeScriptPath = resolveModule('typescript', env.projectRoot, env.config!);\n  } catch (_) {}\n\n  const tsConfigPath = getAbsolute(env.projectRoot, 'tsconfig.json');\n\n  const isTypeScriptEnabled = Boolean(typeScriptPath && (await fileExistsAsync(tsConfigPath)));\n\n  if (!isTypeScriptEnabled && webpackConfig.resolve?.extensions) {\n    webpackConfig.resolve.extensions = webpackConfig.resolve.extensions.filter(extension => {\n      // filter out ts and tsx extensions, including .web.ts\n      return !extension.endsWith('.ts') && !extension.endsWith('.tsx');\n    });\n  }\n\n  if (!isTypeScriptEnabled) {\n    return webpackConfig;\n  }\n\n  if (!webpackConfig.plugins) webpackConfig.plugins = [];\n\n  webpackConfig.plugins.push(\n    new ForkTsCheckerWebpackPlugin(\n      PnpWebpackPlugin.forkTsCheckerOptions({\n        async: isDev,\n        typescript: typeScriptPath,\n        useTypescriptIncrementalApi: true,\n        checkSyntacticErrors: true,\n\n        tsconfig: tsConfigPath,\n        reportFiles: [\n          '**',\n          '!**/__tests__/**',\n          '!**/?(*.)(spec|test).*',\n          // Add support for CRA projects\n          '!**/src/setupProxy.*',\n          '!**/src/setupTests.*',\n        ],\n\n        compilerOptions: {\n          isolatedModules: true,\n          noEmit: true,\n        },\n        // Disable the formatter in production like CRA\n        formatter: isDev ? 'codeframe' : undefined,\n        silent: true,\n      })\n    )\n  );\n\n  return webpackConfig;\n}\n"]}