{"version":3,"file":"PwaManifestWebpackPlugin.js","sourceRoot":"","sources":["../../src/plugins/PwaManifestWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,2CAA6B;AAC7B,4EAAoD;AASpD,SAAS,gBAAgB,CAAC,QAAkB,EAAE,IAAY;;IACxD,mBAAO,QAAQ,CAAC,OAAO,0CAAE,OAAO,0CAC5B,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,EACrC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,IAAI,EAAE;AACnE,CAAC;AAQD,MAAqB,wBAAyB,SAAQ,2BAAiB;IAGrE,YAAoB,UAA8B,EAAE,QAAa;QAC/D,KAAK,CAAC;YACJ,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QALe,eAAU,GAAV,UAAU,CAAoB;QAFlD,QAAG,GAAW,UAAU,CAAC;IAQzB,CAAC;IAED,KAAK,CAAC,QAAkB;QACtB,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACtB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,KAAK,EAAE,WAAoC,EAAE,EAAE;YAC7C,gEAAgE;YAChE,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,QAAQ,EAAE,mBAAmB,CAAQ,CAAC;YACjF,IAAI,iBAAiB,EAAE;gBACrB,IAAI,OAAO,iBAAiB,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACrD,WAAW,CAAC,MAAM,CAAC,IAAI,CACrB,IAAI,KAAK,CACP,mIAAmI,CACpI,CACF,CAAC;oBACF,OAAO;iBACR;gBAED,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,QAAQ,CAC7D,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,CACE,IAAoB,EACpB,YAAiE,EACjE,EAAE;oBACF,sDAAsD;oBACtD,kEAAkE;oBAClE,MAAM,kBAAkB,GACtB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,UAAU;wBAC1C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;wBACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC;oBAEhD,IAAI,kBAAkB,KAAK,KAAK,EAAE;wBAChC,OAAO,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBACjC;oBAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;wBACvB,OAAO,EAAE,MAAM;wBACf,OAAO,EAAE,IAAI;wBACb,UAAU,EAAE;4BACV,GAAG,EAAE,IAAI,CAAC,GAAG;4BACb,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;yBAClE;qBACF,CAAC,CAAC;oBAEH,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC3B,CAAC,CACF,CAAC;aACH;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA7DD,2CA6DC","sourcesContent":["import { Compiler, Plugin, compilation } from 'webpack';\nimport * as path from 'path';\nimport JsonWebpackPlugin from './JsonWebpackPlugin';\nimport { HTMLPluginData } from './ModifyHtmlWebpackPlugin';\n\nexport type Icon = {\n  src: string;\n  sizes: string;\n  type: 'image/png';\n};\n\nfunction maybeFetchPlugin(compiler: Compiler, name: string): Plugin | undefined {\n  return compiler.options?.plugins\n    ?.map(({ constructor }) => constructor)\n    .find(constructor => constructor && constructor.name === name);\n}\n\nexport type PwaManifestOptions = {\n  path: string;\n  inject?: boolean | Function;\n  publicPath: string;\n};\n\nexport default class PwaManifestWebpackPlugin extends JsonWebpackPlugin {\n  rel: string = 'manifest';\n\n  constructor(private pwaOptions: PwaManifestOptions, manifest: any) {\n    super({\n      path: pwaOptions.path,\n      json: manifest,\n      pretty: true,\n    });\n  }\n\n  apply(compiler: Compiler) {\n    super.apply(compiler);\n    compiler.hooks.make.tapPromise(\n      this.constructor.name,\n      async (compilation: compilation.Compilation) => {\n        // Hook into the html-webpack-plugin processing and add the html\n        const HtmlWebpackPlugin = maybeFetchPlugin(compiler, 'HtmlWebpackPlugin') as any;\n        if (HtmlWebpackPlugin) {\n          if (typeof HtmlWebpackPlugin.getHooks === 'undefined') {\n            compilation.errors.push(\n              new Error(\n                'PwaManifestWebpackPlugin - This PwaManifestWebpackPlugin version is not compatible with your current HtmlWebpackPlugin version.\\n'\n              )\n            );\n            return;\n          }\n\n          HtmlWebpackPlugin.getHooks(compilation).alterAssetTags.tapAsync(\n            this.constructor.name,\n            (\n              data: HTMLPluginData,\n              htmlCallback: (error: Error | null, data: HTMLPluginData) => void\n            ) => {\n              // Skip if a custom injectFunction returns false or if\n              // the htmlWebpackPlugin optuons includes a `favicons: false` flag\n              const isInjectionAllowed =\n                typeof this.pwaOptions.inject === 'function'\n                  ? this.pwaOptions.inject(data.plugin)\n                  : data.plugin.options.pwaManifest !== false;\n\n              if (isInjectionAllowed === false) {\n                return htmlCallback(null, data);\n              }\n\n              data.assetTags.meta.push({\n                tagName: 'link',\n                voidTag: true,\n                attributes: {\n                  rel: this.rel,\n                  href: path.join(this.pwaOptions.publicPath, this.pwaOptions.path),\n                },\n              });\n\n              htmlCallback(null, data);\n            }\n          );\n        }\n      }\n    );\n  }\n}\n"]}