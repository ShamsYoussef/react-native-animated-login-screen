"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@expo/config");
const cli_server_api_1 = require("@react-native-community/cli-server-api");
const ExpoMetroConfig = __importStar(require("@expo/metro-config"));
const body_parser_1 = __importDefault(require("body-parser"));
const clientLogsMiddleware_1 = __importDefault(require("./middleware/clientLogsMiddleware"));
const LogReporter_1 = __importDefault(require("./LogReporter"));
async function runMetroDevServerAsync(projectRoot, options) {
    const Metro = importMetroFromProject(projectRoot);
    const reporter = new LogReporter_1.default(options.logger);
    const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, Object.assign({ reporter }, options));
    const { middleware, attachToServer } = cli_server_api_1.createDevServerMiddleware({
        port: metroConfig.server.port,
        watchFolders: [...metroConfig.watchFolders],
    });
    middleware.use(body_parser_1.default.json());
    middleware.use('/logs', clientLogsMiddleware_1.default(options.logger));
    const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;
    // @ts-ignore can't mutate readonly config
    metroConfig.server.enhanceMiddleware = (metroMiddleware, server) => {
        if (customEnhanceMiddleware) {
            metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);
        }
        return middleware.use(metroMiddleware);
    };
    const serverInstance = await Metro.runServer(metroConfig, { hmrEnabled: true });
    const { eventsSocket } = attachToServer(serverInstance);
    reporter.reportEvent = eventsSocket.reportEvent;
    return {
        server: serverInstance,
        middleware,
    };
}
exports.runMetroDevServerAsync = runMetroDevServerAsync;
function importMetroFromProject(projectRoot) {
    const { exp } = config_1.getConfig(projectRoot, { skipSDKVersionRequirement: true });
    const resolvedPath = config_1.projectHasModule('metro', projectRoot, exp);
    if (!resolvedPath) {
        throw new Error('Missing package "metro" in the project. ' +
            'This usually means `react-native` is not installed. ' +
            'Please verify that dependencies in package.json include "react-native" ' +
            'and run `yarn` or `npm install`.');
    }
    return require(resolvedPath);
}
//# sourceMappingURL=MetroDevServer.js.map