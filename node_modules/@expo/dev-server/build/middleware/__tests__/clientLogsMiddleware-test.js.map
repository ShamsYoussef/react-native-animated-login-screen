{"version":3,"file":"clientLogsMiddleware-test.js","sourceRoot":"","sources":["../../../src/middleware/__tests__/clientLogsMiddleware-test.ts"],"names":[],"mappings":"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","sourcesContent":["import http from 'http';\n\nimport bodyParser from 'body-parser';\nimport bunyan from '@expo/bunyan';\nimport connect from 'connect';\nimport fetch from 'node-fetch';\n\nimport clientLogsMiddleware from '../clientLogsMiddleware';\n\nconst headers = {\n  'content-type': 'application/json',\n  'device-id': '11111111-CAFE-0000-0000-111111111111',\n  'session-id': '22222222-C0DE-0000-0000-222222222222',\n  'device-name': 'iPhone',\n};\n\nit('logs messages from the device', async () => {\n  const { server, url, logStream } = await createServerAsync();\n  try {\n    const response = await fetch(`${url}/logs`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify([\n        {\n          count: 1,\n          level: 'info',\n          body: ['Hello world!'],\n          includesStack: false,\n          groupDepth: 0,\n        },\n        {\n          count: 2,\n          level: 'error',\n          body: [\n            {\n              message: 'Something went wrong...',\n              stack: 'App.js:3:12 in <global>',\n            },\n          ],\n          includesStack: true,\n          groupDepth: 0,\n        },\n        {\n          // We want this to be filtered out.\n          count: 3,\n          level: 'info',\n          body: [\n            'BugReporting extraData:',\n            'Object {\\n' +\n              '  \"AppRegistry.runApplication1\": \"Running \\\\\"main\\\\\" with yada yada yada\",\\n' +\n              '}',\n          ],\n          includesStack: false,\n          groupDepth: 0,\n        },\n      ]),\n    });\n    expect(response.ok).toBe(true);\n    expect(logStream.output).toMatchSnapshot();\n  } finally {\n    server.close();\n  }\n});\n\nclass TestLogStream {\n  output: string[] = [];\n\n  write(record: any) {\n    const message = record.includesStack ? JSON.parse(record.msg).message : record.msg;\n    const deviceName = record.deviceName ?? '';\n    if (record.level < bunyan.INFO) {\n      this.output.push(`${deviceName}: [debug] ${message}`);\n    } else if (record.level < bunyan.WARN) {\n      this.output.push(`${deviceName}: [info] ${message}`);\n    } else if (record.level < bunyan.ERROR) {\n      this.output.push(`${deviceName}: [warn] ${message}`);\n    } else {\n      this.output.push(`${deviceName}: [error] ${message}`);\n    }\n  }\n}\n\nasync function createServerAsync() {\n  const logStream = new TestLogStream();\n  const logger = bunyan.createLogger({\n    name: 'expo-test',\n    streams: [\n      {\n        type: 'raw',\n        stream: logStream,\n        level: 'info',\n      },\n    ],\n  });\n  const app = connect().use(bodyParser.json()).use(clientLogsMiddleware(logger));\n\n  const server = http.createServer(app);\n  await new Promise((resolve, reject) =>\n    server.listen((error: any) => {\n      if (error) reject(error);\n      else resolve();\n    })\n  );\n\n  const address = server.address();\n  if (!address || typeof address === 'string') throw new Error('server has no port');\n\n  return {\n    server,\n    url: `http://localhost:${address.port}`,\n    logStream,\n  };\n}\n"]}