"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = __importDefault(require("http"));
const body_parser_1 = __importDefault(require("body-parser"));
const bunyan_1 = __importDefault(require("@expo/bunyan"));
const connect_1 = __importDefault(require("connect"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const clientLogsMiddleware_1 = __importDefault(require("../clientLogsMiddleware"));
const headers = {
    'content-type': 'application/json',
    'device-id': '11111111-CAFE-0000-0000-111111111111',
    'session-id': '22222222-C0DE-0000-0000-222222222222',
    'device-name': 'iPhone',
};
it('logs messages from the device', async () => {
    const { server, url, logStream } = await createServerAsync();
    try {
        const response = await node_fetch_1.default(`${url}/logs`, {
            method: 'POST',
            headers,
            body: JSON.stringify([
                {
                    count: 1,
                    level: 'info',
                    body: ['Hello world!'],
                    includesStack: false,
                    groupDepth: 0,
                },
                {
                    count: 2,
                    level: 'error',
                    body: [
                        {
                            message: 'Something went wrong...',
                            stack: 'App.js:3:12 in <global>',
                        },
                    ],
                    includesStack: true,
                    groupDepth: 0,
                },
                {
                    // We want this to be filtered out.
                    count: 3,
                    level: 'info',
                    body: [
                        'BugReporting extraData:',
                        'Object {\n' +
                            '  "AppRegistry.runApplication1": "Running \\"main\\" with yada yada yada",\n' +
                            '}',
                    ],
                    includesStack: false,
                    groupDepth: 0,
                },
            ]),
        });
        expect(response.ok).toBe(true);
        expect(logStream.output).toMatchSnapshot();
    }
    finally {
        server.close();
    }
});
class TestLogStream {
    constructor() {
        this.output = [];
    }
    write(record) {
        var _a;
        const message = record.includesStack ? JSON.parse(record.msg).message : record.msg;
        const deviceName = (_a = record.deviceName) !== null && _a !== void 0 ? _a : '';
        if (record.level < bunyan_1.default.INFO) {
            this.output.push(`${deviceName}: [debug] ${message}`);
        }
        else if (record.level < bunyan_1.default.WARN) {
            this.output.push(`${deviceName}: [info] ${message}`);
        }
        else if (record.level < bunyan_1.default.ERROR) {
            this.output.push(`${deviceName}: [warn] ${message}`);
        }
        else {
            this.output.push(`${deviceName}: [error] ${message}`);
        }
    }
}
async function createServerAsync() {
    const logStream = new TestLogStream();
    const logger = bunyan_1.default.createLogger({
        name: 'expo-test',
        streams: [
            {
                type: 'raw',
                stream: logStream,
                level: 'info',
            },
        ],
    });
    const app = connect_1.default().use(body_parser_1.default.json()).use(clientLogsMiddleware_1.default(logger));
    const server = http_1.default.createServer(app);
    await new Promise((resolve, reject) => server.listen((error) => {
        if (error)
            reject(error);
        else
            resolve();
    }));
    const address = server.address();
    if (!address || typeof address === 'string')
        throw new Error('server has no port');
    return {
        server,
        url: `http://localhost:${address.port}`,
        logStream,
    };
}
//# sourceMappingURL=clientLogsMiddleware-test.js.map