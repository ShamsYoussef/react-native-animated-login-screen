{"version":3,"file":"MetroDevServer.js","sourceRoot":"","sources":["../src/MetroDevServer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAA2D;AAC3D,2EAAmF;AAEnF,oEAAsD;AACtD,8DAAqC;AAErC,6FAAqE;AACrE,gEAAwC;AAIjC,KAAK,UAAU,sBAAsB,CAAC,WAAmB,EAAE,OAA8B;IAC9F,MAAM,KAAK,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;IAElD,MAAM,QAAQ,GAAG,IAAI,qBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAEjD,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,WAAW,kBAAI,QAAQ,IAAK,OAAO,EAAG,CAAC;IAE3F,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,0CAAyB,CAAC;QAC/D,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI;QAC7B,YAAY,EAAE,CAAC,GAAG,WAAW,CAAC,YAAY,CAAC;KAC5C,CAAC,CAAC;IACH,UAAU,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,8BAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAE9D,MAAM,uBAAuB,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC;IACrE,0CAA0C;IAC1C,WAAW,CAAC,MAAM,CAAC,iBAAiB,GAAG,CAAC,eAAoB,EAAE,MAAoB,EAAE,EAAE;QACpF,IAAI,uBAAuB,EAAE;YAC3B,eAAe,GAAG,uBAAuB,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;SACpE;QACD,OAAO,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAEhF,MAAM,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;IACxD,QAAQ,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;IAEhD,OAAO;QACL,MAAM,EAAE,cAAc;QACtB,UAAU;KACX,CAAC;AACJ,CAAC;AAhCD,wDAgCC;AAED,SAAS,sBAAsB,CAAC,WAAmB;IACjD,MAAM,EAAE,GAAG,EAAE,GAAG,kBAAS,CAAC,WAAW,EAAE,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,CAAC;IAE5E,MAAM,YAAY,GAAG,yBAAgB,CAAC,OAAO,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;IACjE,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,IAAI,KAAK,CACb,0CAA0C;YACxC,sDAAsD;YACtD,yEAAyE;YACzE,kCAAkC,CACrC,CAAC;KACH;IACD,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { getConfig, projectHasModule } from '@expo/config';\nimport { createDevServerMiddleware } from '@react-native-community/cli-server-api';\nimport Log from '@expo/bunyan';\nimport * as ExpoMetroConfig from '@expo/metro-config';\nimport bodyParser from 'body-parser';\n\nimport clientLogsMiddleware from './middleware/clientLogsMiddleware';\nimport LogReporter from './LogReporter';\n\nexport type MetroDevServerOptions = ExpoMetroConfig.LoadOptions & { logger: Log };\n\nexport async function runMetroDevServerAsync(projectRoot: string, options: MetroDevServerOptions) {\n  const Metro = importMetroFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n\n  const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n\n  const { middleware, attachToServer } = createDevServerMiddleware({\n    port: metroConfig.server.port,\n    watchFolders: [...metroConfig.watchFolders],\n  });\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(options.logger));\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  // @ts-ignore can't mutate readonly config\n  metroConfig.server.enhanceMiddleware = (metroMiddleware: any, server: Metro.Server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, { hmrEnabled: true });\n\n  const { eventsSocket } = attachToServer(serverInstance);\n  reporter.reportEvent = eventsSocket.reportEvent;\n\n  return {\n    server: serverInstance,\n    middleware,\n  };\n}\n\nfunction importMetroFromProject(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const resolvedPath = projectHasModule('metro', projectRoot, exp);\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing package \"metro\" in the project. ' +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n"]}