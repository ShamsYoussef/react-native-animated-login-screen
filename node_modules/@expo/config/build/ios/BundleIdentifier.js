"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = require("glob");
// @ts-ignore
const xcode_1 = require("xcode");
const plist_1 = __importDefault(require("@expo/plist"));
function getBundleIdentifier(config) {
    return config.ios && config.ios.bundleIdentifier ? config.ios.bundleIdentifier : null;
}
exports.getBundleIdentifier = getBundleIdentifier;
/**
 * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather
 * than in pbxproj
 */
function setBundleIdentifier(config, infoPlist) {
    let bundleIdentifier = getBundleIdentifier(config);
    if (!bundleIdentifier) {
        return infoPlist;
    }
    return Object.assign(Object.assign({}, infoPlist), { CFBundleIdentifier: bundleIdentifier });
}
exports.setBundleIdentifier = setBundleIdentifier;
/**
 * Updates the bundle identifier for a given pbxproj
 * * @param pbxprojPath Path to pbxproj file
 * @param bundleIdentifier Bundle identifier to set in the pbxproj
 */
function updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier) {
    const project = xcode_1.project(pbxprojPath);
    project.parseSync();
    Object.entries(project.pbxXCBuildConfigurationSection())
        .filter(filterComments)
        .filter(filterConfig)
        .filter(filterHosts)
        .forEach(({ 1: { buildSettings } }) => {
        if (buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {
            return;
        }
        buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `"${bundleIdentifier}"`;
        const productName = bundleIdentifier.split('.').pop();
        if (!(productName === null || productName === void 0 ? void 0 : productName.includes('$'))) {
            buildSettings.PRODUCT_NAME = productName;
        }
    });
    fs_extra_1.default.writeFileSync(pbxprojPath, project.writeSync());
}
exports.updateBundleIdentifierForPbxproj = updateBundleIdentifierForPbxproj;
/**
 * Updates the bundle identifier for pbx projects inside the ios directory of the given project root
 *
 * @param projectRoot Path to project root containing the ios directory
 * @param bundleIdentifier Desired bundle identifier
 */
function setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier) {
    // Get all pbx projects in the ${projectRoot}/ios directory
    const pbxprojPaths = glob_1.sync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });
    for (const pbxprojPath of pbxprojPaths) {
        updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier);
    }
}
exports.setBundleIdentifierForPbxproj = setBundleIdentifierForPbxproj;
/**
 * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.
 */
const defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';
function resetAllPlistBundleIdentifiers(projectRoot) {
    const infoPlistPaths = glob_1.sync('ios/*/Info.plist', { absolute: true, cwd: projectRoot });
    for (const plistPath of infoPlistPaths) {
        resetPlistBundleIdentifier(plistPath);
    }
}
exports.resetAllPlistBundleIdentifiers = resetAllPlistBundleIdentifiers;
function resetPlistBundleIdentifier(plistPath) {
    const rawPlist = fs_extra_1.default.readFileSync(plistPath, 'utf8');
    const plistObject = plist_1.default.parse(rawPlist);
    if (plistObject.CFBundleIdentifier) {
        if (plistObject.CFBundleIdentifier === defaultBundleId)
            return;
        // attempt to match default Info.plist format
        const format = { pretty: true, indent: `\t` };
        const xml = plist_1.default.build(Object.assign(Object.assign({}, plistObject), { CFBundleIdentifier: defaultBundleId }), format);
        if (xml !== rawPlist) {
            fs_extra_1.default.writeFileSync(plistPath, xml);
        }
    }
}
exports.resetPlistBundleIdentifier = resetPlistBundleIdentifier;
function filterComments([item]) {
    return !item.endsWith(`_comment`);
}
function filterConfig(input) {
    const { 1: { isa }, } = input;
    return isa === 'XCBuildConfiguration';
}
function filterHosts(input) {
    const { 1: { buildSettings }, } = input;
    return !buildSettings.TEST_HOST;
}
//# sourceMappingURL=BundleIdentifier.js.map