{"version":3,"file":"AsyncIterableRingBuffer.js","sourceRoot":"","sources":["../../../server/graphql/AsyncIterableRingBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import { $$asyncIterator } from 'iterall';\n\nexport default class AsyncIterableRingBuffer {\n  buffer: any[] = [];\n  _startItem: number = 0;\n  _endItem: number = 0;\n  _pushResolves: Function[] = [];\n\n  constructor(public size: number) {}\n\n  all(): number[] {\n    return [...this.buffer];\n  }\n\n  allWithCursor(): { item: any; cursor: number }[] {\n    return this.buffer.map((item, i) => ({\n      item,\n      cursor: this._startItem + i,\n    }));\n  }\n\n  getNextCursor(cursor?: number): number {\n    if (cursor != null && cursor >= this._startItem) {\n      return cursor + 1;\n    }\n    return this._startItem;\n  }\n\n  getLastCursor(): number {\n    return this._endItem;\n  }\n\n  async get(cursor: number) {\n    if (this._endItem > cursor) {\n      const adjustedCursor = cursor - this._startItem;\n      return this.buffer[adjustedCursor];\n    } else {\n      return new Promise(resolve => {\n        this._pushResolves.push(resolve);\n      });\n    }\n  }\n\n  length(): number {\n    return this.buffer.length;\n  }\n\n  push(item: any): void {\n    this.buffer.push(item);\n    this._endItem++;\n    this._pushResolves.forEach(resolve => resolve(item));\n    this._pushResolves = [];\n\n    if (this.buffer.length > this.size) {\n      this.buffer.shift();\n      this._startItem++;\n    }\n  }\n\n  filterWithCursor(\n    filter: (item: any, cursor: number) => number\n  ): { cursor?: number; items: any[] } {\n    let cursor: number | undefined;\n    const items = this.buffer.filter((item, i) => {\n      cursor = this._startItem + i;\n      return filter(item, cursor);\n    });\n    return {\n      cursor,\n      items,\n    };\n  }\n\n  getIterator(cursor?: number): Record<string, any> {\n    let buffer = this;\n    let iterableCursor = cursor;\n    return {\n      async next() {\n        iterableCursor = buffer.getNextCursor(iterableCursor);\n        const value = await buffer.get(iterableCursor);\n        return {\n          value: {\n            ...value,\n            cursor: iterableCursor,\n          },\n          done: false,\n        };\n      },\n\n      [$$asyncIterator]() {\n        return this;\n      },\n    };\n  }\n}\n"]}