{"version":3,"file":"GraphQLSchema.js","sourceRoot":"","sources":["../../../server/graphql/GraphQLSchema.ts"],"names":[],"mappings":";;;;;AAAA,yCAA+D;AAC/D,oEAA2C;AAC3C,mCAamB;AACnB,iDAAqD;AACrD,qCAA0C;AAE1C,gGAAwE;AAExE,eAAe;AACf,MAAM,OAAO,GAAG,CAAI,IAAO,EAAK,EAAE,CAAC,IAAI,CAAC;AAExC,MAAM,QAAQ,GAAG,OAAO,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+RvB,CAAC;AAEF,MAAM,gBAAgB,GAAG;IACvB,KAAK,CAAC,OAA0B;QAC9B,IAAI,OAAO,CAAC,KAAK,IAAI,YAAM,CAAC,KAAK;YAAE,OAAO,OAAO,CAAC;QAClD,IAAI,OAAO,CAAC,KAAK,IAAI,YAAM,CAAC,IAAI;YAAE,OAAO,MAAM,CAAC;QAChD,IAAI,OAAO,CAAC,KAAK,IAAI,YAAM,CAAC,IAAI;YAAE,OAAO,MAAM,CAAC;QAChD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CAAC;AAEF,MAAM,gBAAgB,GAAG,cAAc,CAAC;AACxC,MAAM,yBAAyB,GAAG,sBAAsB,CAAC;AAEzD,MAAM,SAAS,GAAG;IAChB,mBAAmB,EAAE;QACnB,aAAa,CAAC,MAAM;YAClB,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,OAAO,sBAAsB,CAAC;aAC/B;iBAAM;gBACL,OAAO,oBAAoB,CAAC;aAC7B;QACH,CAAC;KACF;IACD,OAAO,EAAE;QACP,aAAa,CAAC,OAAO;YACnB,IAAI,OAAO,CAAC,GAAG,KAAK,QAAQ,EAAE;gBAC5B,OAAO,eAAe,CAAC;aACxB;iBAAM,IAAI,OAAO,CAAC,OAAO,EAAE;gBAC1B,OAAO,OAAO,CAAC;aAChB;iBAAM,IAAI,OAAO,CAAC,eAAe,EAAE;gBAClC,QAAQ,OAAO,CAAC,eAAe,EAAE;oBAC/B,KAAK,0BAA0B,CAAC,CAAC;wBAC/B,OAAO,wBAAwB,CAAC;qBACjC;oBACD,KAAK,eAAe,CAAC;oBACrB,KAAK,gBAAgB,CAAC,CAAC;wBACrB,OAAO,eAAe,CAAC;qBACxB;oBACD,KAAK,UAAU,CAAC,CAAC;wBACf,OAAO,eAAe,CAAC;qBACxB;oBACD,KAAK,QAAQ,CAAC,CAAC;wBACb,OAAO,YAAY,CAAC;qBACrB;iBACF;aACF;iBAAM,IAAI,OAAO,CAAC,cAAc,KAAK,cAAc,EAAE;gBACpD,OAAO,aAAa,CAAC;aACtB;YACD,OAAO,YAAY,CAAC;QACtB,CAAC;KACF;IACD,KAAK,kCACA,gBAAgB,KACnB,EAAE,CAAC,KAAK;YACN,OAAO,SAAS,KAAK,CAAC,EAAE,EAAE,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO;YACzB,OAAO,OAAO,CAAC,eAAe,EAAE,CAAC;QACnC,CAAC,GACF;IACD,UAAU,kCACL,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,sBAAsB,kCACjB,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,aAAa,kCACR,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,aAAa,kCACR,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,UAAU,kCACL,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,WAAW,kCACN,gBAAgB,KACnB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,gBAAgB,EAAE,CAAC;QACpC,CAAC,GACF;IACD,aAAa,kCACR,gBAAgB,KACnB,MAAM,CAAC,OAAO;YACZ,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC;QAC5D,CAAC,GACF;IACD,0BAA0B,EAAE;QAC1B,aAAa,CAAC,OAAO;YACnB,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,OAAO,sBAAsB,CAAC;aAC/B;iBAAM;gBACL,OAAO,gBAAgB,CAAC;aACzB;QACH,CAAC;KACF;IACD,oBAAoB,EAAE;QACpB,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC3B,OAAO,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC;KACF;IACD,OAAO,EAAE;QACP,EAAE,CAAC,OAAO;YACR,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC5D,CAAC;QACD,KAAK,CAAC,WAAW,CAAC,OAAO;YACvB,IAAI,CAAC,MAAM,aAAO,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,SAAS,EAAE;gBACnE,OAAO,cAAQ,CAAC,yBAAyB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aAC/D;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;QACH,CAAC;QACD,QAAQ,CAAC,OAAO;YACd,OAAO,qBAAe,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,CAAC;QACD,KAAK,CAAC,MAAM,CAAC,OAAO;YAClB,IAAI;gBACF,MAAM,EAAE,GAAG,EAAE,GAAG,kBAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAC9C,OAAO,GAAG,CAAC;aACZ;YAAC,OAAO,KAAK,EAAE;gBACd,kBAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBACjE,OAAO,IAAI,CAAC;aACb;QACH,CAAC;QACD,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC5B,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC;QAC9B,CAAC;QACD,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO;YAC7B,OAAO,OAAO,CAAC,oBAAoB,EAAE,CAAC;QACxC,CAAC;KACF;IACD,eAAe,EAAE;QACf,QAAQ,CAAC,eAAe;YACtB,IAAI,YAAM,CAAC,OAAO,IAAI,eAAe,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBAC3D,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,OAAO,eAAe,CAAC,QAAQ,CAAC;aACjC;QACH,CAAC;KACF;IACD,MAAM,EAAE;QACN,aAAa,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,UAAU,CAAC;QAC3B,CAAC;KACF;IACD,MAAM,EAAE;QACN,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAC5B,OAAO,OAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KACF;IACD,OAAO,EAAE;QACP,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAC5B,OAAO,OAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KACF;IACD,MAAM,EAAE;QACN,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAC5B,OAAO,OAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KACF;IACD,oBAAoB,EAAE;QACpB,EAAE;YACA,OAAO,yBAAyB,CAAC;QACnC,CAAC;QACD,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAC5B,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/D,CAAC;QACD,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAC3B,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBACnB,OAAO,EAAE,CAAC;aACX;iBAAM;gBACL,OAAO,MAAM,CAAC,OAAO;qBAClB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;qBAC/D,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;aAC7B;QACH,CAAC;KACF;IACD,YAAY,EAAE;QACZ,EAAE;YACA,OAAO,gBAAgB,CAAC;QAC1B,CAAC;KACF;IACD,KAAK,EAAE;QACL,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YAClC,OAAO,OAAO,CAAC,iBAAiB,EAAE,CAAC;QACrC,CAAC;QACD,YAAY;YACV,OAAO,kBAAY,CAAC,SAAS,EAAE,CAAC;QAClC,CAAC;QACD,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YACxC,OAAO,OAAO,CAAC,uBAAuB,EAAE,CAAC;QAC3C,CAAC;QACD,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO;YACrC,OAAO;gBACL,2BAA2B,EAAE,aAAO,CAAC,mBAAmB,EAAE;gBAC1D,uBAAuB,EAAE,eAAS,CAAC,mBAAmB,EAAE;aACzD,CAAC;QACJ,CAAC;QACD,KAAK,CAAC,IAAI;YACR,MAAM,QAAQ,GAAG,MAAM,iBAAW,CAAC,uBAAuB,EAAE,CAAC;YAC7D,OAAO,EAAE,QAAQ,EAAE,CAAC;QACtB,CAAC;KACF;IACD,QAAQ,EAAE;QACR,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO;YAClC,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,IAAI;gBACF,MAAM,aAAO,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;gBAEnD,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;iBACxB,CAAC;aACH;QACH,CAAC;QACD,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO;YAC/C,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,IAAI,MAAM,CAAC;YACX,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,MAAM,GAAG,MAAM,aAAO,CAAC,gBAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;aACpE;iBAAM;gBACL,MAAM,GAAG,MAAM,eAAS,CAAC,gBAAgB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;aACtE;YACD,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,OAAO,MAAM,CAAC;aACf;iBAAM;gBACL,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE;iBAC/B,CAAC;aACH;QACH,CAAC;QACD,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,cAAc,EAAE,EAAE,OAAO;YACtD,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,aAAO,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;gBAC1E,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,KAAK,EAAE;gBACd,kBAAY,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBACzD,MAAM,KAAK,CAAC;aACb;QACH,CAAC;QACD,KAAK,CAAC,kBAAkB,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO;YACpD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,IAAI,gBAAgB,GAAG,MAAM,qBAAe,CAAC,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAClF,IAAI,eAAe,GAAG,MAAM,qBAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE1F,sGAAsG;YACtG,IAAI,gBAAgB,CAAC,QAAQ,KAAK,QAAQ,IAAI,eAAe,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBACnF,IAAI;oBACF,MAAM,aAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;iBAC5D;gBAAC,OAAO,CAAC,EAAE;oBACV,kBAAY,CAAC,UAAU,CACrB,cAAc,CAAC,UAAU,EACzB,MAAM,EACN,yBAAyB,CAAC,CAAC,OAAO,EAAE,CACrC,CAAC;iBACH;aACF;YAED,uCACK,cAAc,KACjB,QAAQ,EAAE,eAAe,IACzB;QACJ,CAAC;QACD,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO;YAChD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAEnD,MAAM,qBAAU,CAAC,KAAK,EAAE,CAAC,eAAe,CAAC,EAAE;gBACzC,GAAG,EAAE,cAAc,CAAC,UAAU;aAC/B,CAAC,CAAC;YACH,yBACK,cAAc,EACjB;QACJ,CAAC;QACD,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO;YAC/C,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,MAAM,aAAa,mCACd,KAAK,KACR,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,GAC1F,CAAC;YACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,6BAAoB,CAAC,cAAc,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;YACrF,uCACK,cAAc,KACjB,MAAM,EAAE,GAAG,IACX;QACJ,CAAC;QACD,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,OAAO;YACjD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YACnD,IAAI,GAAG,GAAG,MAAM,cAAQ,CAAC,yBAAyB,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC9E,IAAI,MAAM,GAAG,MAAM,SAAG,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,kBAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACjD,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,wCAAwC;QACjF,CAAC;QACD,uBAAuB,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO;YAChD,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;YACvC,OAAO,OAAO,CAAC,uBAAuB,EAAE,CAAC;QAC3C,CAAC;QACD,cAAc,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,cAAc,EAAE,EAAE,OAAO;YAC1D,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;gBAC9C,OAAO,MAAM,CAAC;aACf;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;QACH,CAAC;QACD,aAAa,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO;YACzC,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/C,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjC,OAAO,MAAM,CAAC;QAChB,CAAC;KACF;IACD,YAAY,EAAE;QACZ,QAAQ,EAAE;YACR,SAAS,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO;gBAClC,IAAI,YAAY,GAAkB,IAAI,CAAC;gBACvC,IAAI,KAAK,EAAE;oBACT,YAAY,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;iBACpC;gBACD,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;gBACjD,MAAM,eAAe,GAAG,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;gBACjE,MAAM,QAAQ,GAAG,6BAAmB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;gBAErE,OAAO;oBACL,KAAK,CAAC,IAAI;wBACR,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;wBACrC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;wBAC/B,OAAO;4BACL,KAAK,EAAE;gCACL,QAAQ,oBACH,KAAK,CACT;6BACF;4BACD,IAAI;yBACL,CAAC;oBACJ,CAAC;oBAED,MAAM;wBACJ,OAAO,QAAQ,CAAC,MAAM,EAAE,CAAC;oBAC3B,CAAC;oBAED,KAAK,CAAC,KAAK;wBACT,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC/B,CAAC;oBAED,CAAC,yBAAe,CAAC;wBACf,OAAO,IAAI,CAAC;oBACd,CAAC;iBACF,CAAC;YACJ,CAAC;SACF;KACF;CACF,CAAC;AAEF,kBAAe,oCAAoB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC","sourcesContent":["import { getConfig, writeConfigJsonAsync } from '@expo/config';\nimport spawnAsync from '@expo/spawn-async';\nimport {\n  Android,\n  Config,\n  Exp,\n  Logger,\n  Project,\n  ProjectSettings,\n  ProjectUtils,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { $$asyncIterator } from 'iterall';\n\nimport mergeAsyncIterators from '../asynciterators/mergeAsyncIterators';\n\n// for prettier\nconst graphql = <T>(text: T): T => text;\n\nconst typeDefs = graphql`\n  enum Platform {\n    ANDROID\n    IOS\n  }\n\n  enum HostType {\n    lan\n    localhost\n    tunnel\n  }\n\n  type User {\n    username: String\n  }\n\n  type Project {\n    id: ID!\n    # Absolute path of the project directory.\n    projectDir: String!\n    # The URL where the Expo manifest is being served.\n    manifestUrl: String\n    # Settings specific to this project, e.g. URL settings.\n    settings: ProjectSettings!\n    # Project configuration from app.json.\n    config: ProjectConfig\n    # Things that can send messages\n    sources: [Source]\n    # All messages from all sources\n    messages: MessageConnection!\n  }\n\n  type ProjectSettings {\n    hostType: HostType!\n    dev: Boolean!\n    minify: Boolean!\n  }\n\n  input ProjectSettingsInput {\n    hostType: HostType\n    dev: Boolean\n    minify: Boolean\n  }\n\n  type ProjectConfig {\n    name: String\n    description: String\n    slug: String\n    githubUrl: String\n  }\n\n  input ProjectConfigInput {\n    name: String\n    description: String\n    slug: String\n    githubUrl: String\n  }\n\n  type UserSettings {\n    id: ID!\n    sendTo: String\n  }\n\n  enum SendMedium {\n    email\n    sms\n  }\n\n  type SendProjectResult {\n    medium: SendMedium!\n    url: String!\n  }\n\n  union OpenSimulatorResult = OpenSimulatorSuccess | OpenSimulatorError\n\n  type OpenSimulatorSuccess {\n    url: String!\n  }\n\n  type OpenSimulatorError {\n    error: String!\n  }\n\n  type OpenWebResult {\n    error: String\n  }\n\n  type PublishProjectResult {\n    url: String!\n  }\n\n  interface Source {\n    id: ID!\n    name: String!\n    messages: MessageConnection!\n  }\n\n  type Issues implements Source {\n    id: ID!\n    name: String!\n    messages: MessageConnection!\n  }\n\n  type Process implements Source {\n    id: ID!\n    name: String!\n    messages: MessageConnection!\n  }\n\n  type Device implements Source {\n    id: ID!\n    name: String!\n    messages: MessageConnection!\n  }\n\n  enum LogLevel {\n    DEBUG\n    INFO\n    WARN\n    ERROR\n  }\n\n  interface Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Source!\n    level: LogLevel!\n  }\n\n  type Issue implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Issues!\n    level: LogLevel!\n  }\n\n  type LogMessage implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n  }\n\n  type DeviceMessage implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Device!\n    level: LogLevel!\n    includesStack: Boolean\n  }\n\n  type MetroInitializeStarted implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n  }\n\n  type BuildProgress implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n    progress: Int!\n    duration: Int!\n  }\n\n  type BuildFinished implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n    duration: Int!\n  }\n\n  type BuildError implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n    error: String!\n    duration: Int!\n  }\n\n  type TunnelReady implements Message {\n    id: ID!\n    msg: String!\n    time: String!\n    source: Process!\n    level: LogLevel!\n  }\n\n  type PageInfo {\n    lastReadCursor: String\n    lastCursor: String\n  }\n\n  type MessageConnection {\n    count: Int!\n    unreadCount: Int!\n    nodes: [Message!]\n    pageInfo: PageInfo\n  }\n\n  enum MessagePayloadType {\n    ADDED\n    UPDATED\n    DELETED\n  }\n\n  union MessageSubscriptionPayload = MessagePayload | SourceClearedPayload\n\n  type MessagePayload {\n    type: MessagePayloadType!\n    cursor: String\n    node: Message!\n  }\n\n  type SourceClearedPayload {\n    source: Source\n  }\n\n  type ProjectManagerLayout {\n    id: ID!\n    selected: Source\n    sources: [Source]\n  }\n\n  input ProjectManagerLayoutInput {\n    selected: ID\n    sources: [ID!]\n  }\n\n  type ProcessInfo {\n    isAndroidSimulatorSupported: Boolean\n    isIosSimulatorSupported: Boolean\n    webAppUrl: String\n  }\n\n  type Query {\n    # The project this instance of the XDL server is serving.\n    currentProject: Project!\n    # Globally persisted user preferences.\n    userSettings: UserSettings!\n    # Layout of the sections in project manager\n    projectManagerLayout: ProjectManagerLayout\n    # Information about the current process\n    processInfo: ProcessInfo\n    # Current logged-in user\n    user: User\n  }\n\n  type Mutation {\n    # Opens the app in an iOS simulator or and Android device/emulator.\n    openSimulator(platform: Platform!): OpenSimulatorResult\n    # Starts WebPack server\n    openWeb: OpenWebResult\n    # Publishes the current project to expo.io\n    publishProject(releaseChannel: String): PublishProjectResult\n    # Sends the project URL by email.\n    sendProjectUrl(recipient: String!): SendProjectResult\n    # Compresses the images in a project\n    optimizeAssets: Project\n    # Updates specified project settings.\n    setProjectSettings(settings: ProjectSettingsInput!): Project\n    # Update projectConfig\n    setProjectConfig(input: ProjectConfigInput!): Project\n    # Update the layout\n    setProjectManagerLayout(input: ProjectManagerLayoutInput): ProjectManagerLayout\n    # Update a last read status for a source\n    updateLastRead(sourceId: ID!, lastReadCursor: String!): Source\n    # Clear a log from a source\n    clearMessages(sourceId: ID!): Source\n  }\n\n  type Subscription {\n    # TODO(freiksenet): per-project log\n    messages(after: String): MessageSubscriptionPayload\n  }\n`;\n\nconst messageResolvers = {\n  level(message: { level: number }): string {\n    if (message.level <= Logger.DEBUG) return 'DEBUG';\n    if (message.level <= Logger.INFO) return 'INFO';\n    if (message.level <= Logger.WARN) return 'WARN';\n    return 'ERROR';\n  },\n};\n\nconst USER_SETTINGS_ID = 'UserSettings';\nconst PROJECT_MANAGER_LAYOUT_ID = 'ProjectManagerLayout';\n\nconst resolvers = {\n  OpenSimulatorResult: {\n    __resolveType(result) {\n      if (result.success) {\n        return 'OpenSimulatorSuccess';\n      } else {\n        return 'OpenSimulatorError';\n      }\n    },\n  },\n  Message: {\n    __resolveType(message) {\n      if (message.tag === 'device') {\n        return 'DeviceMessage';\n      } else if (message.issueId) {\n        return 'Issue';\n      } else if (message._metroEventType) {\n        switch (message._metroEventType) {\n          case 'METRO_INITIALIZE_STARTED': {\n            return 'MetroInitializeStarted';\n          }\n          case 'BUILD_STARTED':\n          case 'BUILD_PROGRESS': {\n            return 'BuildProgress';\n          }\n          case 'FINISHED': {\n            return 'BuildFinished';\n          }\n          case 'FAILED': {\n            return 'BuildError';\n          }\n        }\n      } else if (message._expoEventType === 'TUNNEL_READY') {\n        return 'TunnelReady';\n      }\n      return 'LogMessage';\n    },\n  },\n  Issue: {\n    ...messageResolvers,\n    id(issue) {\n      return `Issue:${issue.id}`;\n    },\n    source(issue, args, context) {\n      return context.getIssuesSource();\n    },\n  },\n  LogMessage: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  MetroInitializeStarted: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  BuildProgress: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  BuildFinished: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  BuildError: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  TunnelReady: {\n    ...messageResolvers,\n    source(message, args, context) {\n      return context.getProcessSource();\n    },\n  },\n  DeviceMessage: {\n    ...messageResolvers,\n    source(message) {\n      return { id: message.deviceId, name: message.deviceName };\n    },\n  },\n  MessageSubscriptionPayload: {\n    __resolveType(payload) {\n      if (payload.type === 'CLEARED') {\n        return 'SourceClearedPayload';\n      } else {\n        return 'MessagePayload';\n      }\n    },\n  },\n  SourceClearedPayload: {\n    source(payload, args, context) {\n      return context.getSourceById(payload.sourceId);\n    },\n  },\n  Project: {\n    id(project) {\n      return Buffer.from(project.projectDir).toString('base64');\n    },\n    async manifestUrl(project) {\n      if ((await Project.currentStatus(project.projectDir)) === 'running') {\n        return UrlUtils.constructManifestUrlAsync(project.projectDir);\n      } else {\n        return null;\n      }\n    },\n    settings(project) {\n      return ProjectSettings.readAsync(project.projectDir);\n    },\n    async config(project) {\n      try {\n        const { exp } = getConfig(project.projectDir);\n        return exp;\n      } catch (error) {\n        ProjectUtils.logError(project.projectDir, 'expo', error.message);\n        return null;\n      }\n    },\n    sources(project, args, context) {\n      return context.getSources();\n    },\n    messages(project, args, context) {\n      return context.getMessageConnection();\n    },\n  },\n  ProjectSettings: {\n    hostType(projectSettings) {\n      if (Config.offline && projectSettings.hostType === 'tunnel') {\n        return 'lan';\n      } else {\n        return projectSettings.hostType;\n      }\n    },\n  },\n  Source: {\n    __resolveType(source) {\n      return source.__typename;\n    },\n  },\n  Issues: {\n    messages(source, args, context) {\n      return context.getMessageConnection(source);\n    },\n  },\n  Process: {\n    messages(source, args, context) {\n      return context.getMessageConnection(source);\n    },\n  },\n  Device: {\n    messages(source, args, context) {\n      return context.getMessageConnection(source);\n    },\n  },\n  ProjectManagerLayout: {\n    id() {\n      return PROJECT_MANAGER_LAYOUT_ID;\n    },\n    selected(layout, args, context) {\n      const sources = context.getSources();\n      return sources.find(source => source.id === layout.selected);\n    },\n    sources(layout, args, context) {\n      const sources = context.getSources();\n      if (!layout.sources) {\n        return [];\n      } else {\n        return layout.sources\n          .map(sourceId => sources.find(source => source.id === sourceId))\n          .filter(source => source);\n      }\n    },\n  },\n  UserSettings: {\n    id() {\n      return USER_SETTINGS_ID;\n    },\n  },\n  Query: {\n    currentProject(parent, args, context) {\n      return context.getCurrentProject();\n    },\n    userSettings() {\n      return UserSettings.readAsync();\n    },\n    projectManagerLayout(parent, args, context) {\n      return context.getProjectManagerLayout();\n    },\n    async processInfo(parent, args, context) {\n      return {\n        isAndroidSimulatorSupported: Android.isPlatformSupported(),\n        isIosSimulatorSupported: Simulator.isPlatformSupported(),\n      };\n    },\n    async user() {\n      const username = await UserManager.getCurrentUsernameAsync();\n      return { username };\n    },\n  },\n  Mutation: {\n    async openWeb(parent, props, context) {\n      const currentProject = context.getCurrentProject();\n      try {\n        await Webpack.openAsync(currentProject.projectDir);\n\n        return {\n          success: true,\n          error: null,\n        };\n      } catch (error) {\n        return {\n          success: false,\n          error: error.toString(),\n        };\n      }\n    },\n    async openSimulator(parent, { platform }, context) {\n      const currentProject = context.getCurrentProject();\n      let result;\n      if (platform === 'ANDROID') {\n        result = await Android.openProjectAsync(currentProject.projectDir);\n      } else {\n        result = await Simulator.openProjectAsync(currentProject.projectDir);\n      }\n      if (result.success) {\n        return result;\n      } else {\n        return {\n          success: false,\n          error: result.error.toString(),\n        };\n      }\n    },\n    async publishProject(parent, { releaseChannel }, context) {\n      const { projectDir } = context.getCurrentProject();\n      try {\n        const result = await Project.publishAsync(projectDir, { releaseChannel });\n        return result;\n      } catch (error) {\n        ProjectUtils.logError(projectDir, 'expo', error.message);\n        throw error;\n      }\n    },\n    async setProjectSettings(parent, { settings }, context) {\n      const currentProject = context.getCurrentProject();\n      let previousSettings = await ProjectSettings.readAsync(currentProject.projectDir);\n      let updatedSettings = await ProjectSettings.setAsync(currentProject.projectDir, settings);\n\n      // If 'tunnel' wasn't previously configured and it will be as a result of this request, start tunnels.\n      if (previousSettings.hostType !== 'tunnel' && updatedSettings.hostType === 'tunnel') {\n        try {\n          await Project.startTunnelsAsync(currentProject.projectDir);\n        } catch (e) {\n          ProjectUtils.logWarning(\n            currentProject.projectDir,\n            'expo',\n            `Error starting tunnel ${e.message}`\n          );\n        }\n      }\n\n      return {\n        ...currentProject,\n        settings: updatedSettings,\n      };\n    },\n    async optimizeAssets(parent, { settings }, context) {\n      const currentProject = context.getCurrentProject();\n\n      await spawnAsync('npx', ['expo-optimize'], {\n        cwd: currentProject.projectDir,\n      });\n      return {\n        ...currentProject,\n      };\n    },\n    async setProjectConfig(parent, { input }, context) {\n      const currentProject = context.getCurrentProject();\n      const filteredInput = {\n        ...input,\n        githubUrl: input.githubUrl.match(/^https:\\/\\/github.com\\//) ? input.githubUrl : undefined,\n      };\n      const { exp } = await writeConfigJsonAsync(currentProject.projectDir, filteredInput);\n      return {\n        ...currentProject,\n        config: exp,\n      };\n    },\n    async sendProjectUrl(parent, { recipient }, context) {\n      const currentProject = context.getCurrentProject();\n      let url = await UrlUtils.constructManifestUrlAsync(currentProject.projectDir);\n      let result = await Exp.sendAsync(recipient, url);\n      await UserSettings.setAsync('sendTo', recipient);\n      return { medium: result.medium, url }; // medium can be a phone number or email\n    },\n    setProjectManagerLayout(parent, { input }, context) {\n      context.setProjectManagerLayout(input);\n      return context.getProjectManagerLayout();\n    },\n    updateLastRead(parent, { sourceId, lastReadCursor }, context) {\n      const source = context.getSourceById(sourceId);\n      if (source) {\n        context.setLastRead(sourceId, lastReadCursor);\n        return source;\n      } else {\n        return null;\n      }\n    },\n    clearMessages(parent, { sourceId }, context) {\n      const source = context.getSourceById(sourceId);\n      context.clearMessages(source.id);\n      return source;\n    },\n  },\n  Subscription: {\n    messages: {\n      subscribe(parent, { after }, context) {\n        let parsedCursor: number | null = null;\n        if (after) {\n          parsedCursor = parseInt(after, 10);\n        }\n        const issueIterator = context.getIssueIterator();\n        const messageIterator = context.getMessageIterator(parsedCursor);\n        const iterator = mergeAsyncIterators(issueIterator, messageIterator);\n\n        return {\n          async next() {\n            const result = await iterator.next();\n            const { done, value } = result;\n            return {\n              value: {\n                messages: {\n                  ...value,\n                },\n              },\n              done,\n            };\n          },\n\n          return() {\n            return iterator.return();\n          },\n\n          throw(error) {\n            return iterator.throw(error);\n          },\n\n          [$$asyncIterator]() {\n            return this;\n          },\n        };\n      },\n    },\n  },\n};\n\nexport default makeExecutableSchema({ typeDefs, resolvers });\n"]}