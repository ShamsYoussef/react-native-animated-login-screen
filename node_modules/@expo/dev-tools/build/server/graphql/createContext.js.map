{"version":3,"file":"createContext.js","sourceRoot":"","sources":["../../../server/graphql/createContext.ts"],"names":[],"mappings":"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","sourcesContent":["import uniqBy from 'lodash/uniqBy';\nimport { $$asyncIterator } from 'iterall';\nimport eventEmitterToAsyncIterator from '../asynciterators/eventEmitterToAsyncIterator';\n\nexport const ISSUES_SOURCE = {\n  __typename: 'Issues',\n  id: 'Source:issues',\n  name: 'Issues',\n};\nexport const PROCESS_SOURCE = {\n  __typename: 'Process',\n  id: 'Source:metro',\n  name: 'Metro Bundler',\n};\nconst DEFAULT_SOURCES = [ISSUES_SOURCE, PROCESS_SOURCE];\n\nexport default function createContext({ projectDir, messageBuffer, layout, issues }: any): any {\n  return {\n    getCurrentProject(): { projectDir: string } {\n      return {\n        projectDir,\n      };\n    },\n    getMessageIterator(cursor: number) {\n      return messageBuffer.getIterator(cursor);\n    },\n    getMessageEdges(source?: any) {\n      if (source) {\n        if (source.id === ISSUES_SOURCE.id) {\n          return issues.getIssueList();\n        }\n        return flattenMessagesFromBuffer(messageBuffer, source.id);\n      }\n      return flattenMessagesFromBuffer(messageBuffer);\n    },\n    getMessageConnection(source: any) {\n      const edges = this.getMessageEdges(source);\n\n      let unreadCount = 0;\n      let lastReadCursor = null;\n      if (source) {\n        ({ unreadCount, lastReadCursor } = extractReadInfo(layout.get(), source.id, edges));\n      }\n\n      return {\n        count: edges.length,\n        unreadCount,\n        edges,\n        // on-demand mapping\n        nodes: () => edges.map(({ node }: any) => node),\n        pageInfo: {\n          hasNextPage: false,\n          lastReadCursor,\n          lastCursor: edges.length > 0 ? edges[edges.length - 1].cursor : null,\n        },\n      };\n    },\n    getIssuesSource() {\n      return ISSUES_SOURCE;\n    },\n    getProcessSource() {\n      return PROCESS_SOURCE;\n    },\n    getSourceById(id: string): any {\n      const allSources = this.getSources();\n      return allSources.find((source: any) => source.id === id);\n    },\n    getSources(): any[] {\n      const chunks = messageBuffer.all().filter(({ node }: any) => node && node.tag === 'device');\n      const devices = uniqBy(chunks, ({ node }) => node.deviceId).map(({ node }: any) => ({\n        __typename: 'Device',\n        id: node.deviceId,\n        name: node.deviceName,\n      }));\n      return DEFAULT_SOURCES.concat(devices);\n    },\n    getProjectManagerLayout() {\n      return layout.get();\n    },\n    setProjectManagerLayout(newLayout: any) {\n      newLayout.sources.forEach((sourceId: string) => {\n        this.setLastRead(sourceId);\n      });\n      layout.set(newLayout);\n    },\n    setLastRead(sourceId: string, lastReadCursor: any) {\n      if (!lastReadCursor) {\n        const source = this.getSourceById(sourceId);\n        const edges = this.getMessageEdges(source);\n        if (edges.length === 0) {\n          return;\n        } else {\n          lastReadCursor = edges[edges.length - 1].cursor;\n        }\n      }\n      layout.setLastRead(sourceId, lastReadCursor.toString());\n    },\n    clearMessages(sourceId: string): void {\n      messageBuffer.push({\n        type: 'CLEARED',\n        sourceId,\n      });\n    },\n    getIssueIterator() {\n      // @ts-ignore\n      const iterator = eventEmitterToAsyncIterator(issues, ['ADDED', 'UPDATED', 'DELETED']);\n\n      return {\n        async next() {\n          const { value, done } = await iterator.next();\n          return {\n            value: {\n              type: value.eventName,\n              node: value.event,\n            },\n            done,\n          };\n        },\n        return(): any {\n          // @ts-ignore\n          return iterator.return();\n        },\n        throw(error: Error): any {\n          // @ts-ignore\n          return iterator.throw(error);\n        },\n        [$$asyncIterator]() {\n          return this;\n        },\n      };\n    },\n  };\n}\n\nfunction flattenMessagesFromBuffer(buffer: any, sourceId?: string) {\n  const items = buffer.allWithCursor();\n  const itemsById = new Map();\n  const flattenedItems: any[] = [];\n  for (let i = items.length - 1; i >= 0; i--) {\n    const { cursor, item } = items[i];\n    if (sourceId && item.sourceId !== sourceId) {\n      continue;\n    }\n    if (item.type === 'CLEARED') {\n      break;\n    }\n    const { node } = item;\n    if (!itemsById.has(node.id)) {\n      const element = { cursor, node };\n      itemsById.set(node.id, element);\n      flattenedItems.unshift(element);\n    } else {\n      itemsById.get(node.id).cursor = cursor;\n    }\n  }\n  return flattenedItems;\n}\n\nfunction extractReadInfo(layout: any, sourceId: any, items: any[]) {\n  let lastReadCursor = layout.sourceLastReads[sourceId];\n  let unreadCount;\n  if (!lastReadCursor) {\n    lastReadCursor = items[0] && items[0].cursor;\n    unreadCount = items.length;\n  } else {\n    const index = items.findIndex(({ cursor }) => cursor.toString() === lastReadCursor);\n    unreadCount = items.length - index - 1;\n  }\n  return {\n    lastReadCursor,\n    unreadCount,\n  };\n}\n"]}