{"version":3,"file":"eventEmitterToAsyncIterator.js","sourceRoot":"","sources":["../../../server/asynciterators/eventEmitterToAsyncIterator.ts"],"names":[],"mappings":"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","sourcesContent":["// @flow\n// adapted from 'graphql-subscriptions' package\n\nimport { $$asyncIterator } from 'iterall';\nimport { EventEmitter } from 'events';\n\nexport default function eventEmitterToAsyncIterator<T>(\n  eventEmitter: EventEmitter,\n  eventsNames: string | string[]\n): AsyncIterator<T> {\n  const pullQueue: any[] = [];\n  const pushQueue: any[] = [];\n  const eventsArray = typeof eventsNames === 'string' ? [eventsNames] : eventsNames;\n  let listening = true;\n\n  const pushValue = event => {\n    if (pullQueue.length !== 0) {\n      // @ts-ignore\n      pullQueue.shift()({ value: event, done: false });\n    } else {\n      pushQueue.push(event);\n    }\n  };\n\n  const pullValue = () => {\n    return new Promise(resolve => {\n      if (pushQueue.length !== 0) {\n        resolve({ value: pushQueue.shift(), done: false });\n      } else {\n        pullQueue.push(resolve);\n      }\n    });\n  };\n\n  const emptyQueue = () => {\n    if (listening) {\n      listening = false;\n      removeEventListeners();\n      pullQueue.forEach(resolve => resolve({ value: undefined, done: true }));\n      pullQueue.length = 0;\n      pushQueue.length = 0;\n    }\n  };\n\n  const listeners: any[] = [];\n\n  const addEventListeners = () => {\n    for (const eventName of eventsArray) {\n      const listener = [\n        eventName,\n        event =>\n          pushValue({\n            eventName,\n            event,\n          }),\n      ];\n      listeners.push(listener);\n      // @ts-ignore\n      eventEmitter.addListener(eventName, listener[1]);\n    }\n  };\n\n  const removeEventListeners = () => {\n    for (const [eventName, listener] of listeners) {\n      eventEmitter.removeListener(eventName, listener);\n    }\n  };\n\n  addEventListeners();\n\n  return {\n    next(): Promise<IteratorResult<T, any>> {\n      // @ts-ignore\n      return listening ? pullValue() : this.return();\n    },\n    return() {\n      emptyQueue();\n\n      return Promise.resolve({ value: undefined, done: true });\n    },\n    throw(error) {\n      emptyQueue();\n\n      return Promise.reject(error);\n    },\n    [$$asyncIterator]() {\n      return this;\n    },\n  };\n}\n"]}