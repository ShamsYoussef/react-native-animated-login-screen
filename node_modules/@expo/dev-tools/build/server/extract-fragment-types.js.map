{"version":3,"file":"extract-fragment-types.js","sourceRoot":"","sources":["../../server/extract-fragment-types.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,aAAa;AACb,qCAAkC;AAElC,4EAAoD;AAEpD,iBAAO,CACL,uBAAa,EACb;;;;;;;;;;;;GAYC,CACF,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;IACrB,kFAAkF;IAClF,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CACpD,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,CAC3C,CAAC;IACF,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,YAAY,CAAC;IAC1C,YAAE,CAAC,SAAS,CAAC,sBAAsB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE;QACtE,IAAI,GAAG,EAAE;YACP,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;SACxD;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import fs from 'fs';\n// @ts-ignore\nimport { graphql } from 'graphql';\n\nimport GraphQLSchema from './graphql/GraphQLSchema';\n\ngraphql(\n  GraphQLSchema,\n  `\n    {\n      __schema {\n        types {\n          kind\n          name\n          possibleTypes {\n            name\n          }\n        }\n      }\n    }\n  `\n).then((result: any) => {\n  // here we're filtering out any type information unrelated to unions or interfaces\n  const filteredData = result.data.__schema.types.filter(\n    (type: any) => type.possibleTypes !== null\n  );\n  result.data.__schema.types = filteredData;\n  fs.writeFile('./fragmentTypes.json', JSON.stringify(result.data), err => {\n    if (err) {\n      console.error('Error writing fragmentTypes file', err);\n    } else {\n      console.log('Fragment types successfully extracted!');\n    }\n  });\n});\n"]}