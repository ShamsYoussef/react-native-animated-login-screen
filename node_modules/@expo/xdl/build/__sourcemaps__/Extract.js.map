{"version":3,"sources":["Extract.ts"],"names":["_extractWindowsAsync","archive","dir","dotExpoHomeDirectory","UserSettings","tmpDir","path","join","uuid","v4","fs","mkdirpSync","binary","Binaries","getBinariesPath","files","readdirSync","outputFile","resolve","e","console","error","message","stderr","removeSync","extractAsync","process","platform","stdio","cwd","__dirname","tar","extract","file"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,eAAeA,oBAAf,CAAoCC,OAApC,EAAqDC,GAArD,EAAkE;AAChE,MAAIC,oBAAoB,GAAGC,wBAAaD,oBAAb,EAA3B;;AACA,MAAIE,MAAM,GAAGC,gBAAKC,IAAL,CAAUJ,oBAAV,EAAgC,KAAhC,EAAuCK,gBAAKC,EAAL,EAAvC,CAAb;;AACAC,qBAAGC,UAAH,CAAcN,MAAd;;AACA,MAAIO,MAAM,GAAGN,gBAAKC,IAAL,CAAUM,QAAQ,GAACC,eAAT,EAAV,EAAsC,cAAtC,EAAsD,KAAtD,CAAb;;AACA,MAAI;AACF,UAAM,2BAAWF,MAAX,EAAmB,CAAC,GAAD,EAAMX,OAAN,EAAe,MAAf,EAAwB,KAAII,MAAO,EAAnC,CAAnB,CAAN,CADE,CAEF;AACA;AACA;;AACA,QAAIU,KAAK,GAAGL,mBAAGM,WAAH,CAAeX,MAAf,CAAZ;;AACA,QAAIY,UAAU,GAAGX,gBAAKY,OAAL,CAAab,MAAb,EAAqBU,KAAK,CAAC,CAAD,CAA1B,CAAjB;;AACA,UAAM,2BAAWH,MAAX,EAAmB,CAAC,GAAD,EAAMK,UAAN,EAAkB,MAAlB,EAA2B,KAAIf,GAAI,EAAnC,CAAnB,CAAN;AACD,GARD,CAQE,OAAOiB,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,OAAhB;AACAF,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACI,MAAhB;AACA,UAAMJ,CAAN;AACD,GAZD,SAYU;AACRT,uBAAGc,UAAH,CAAcnB,MAAd;AACD;AACF;;AAEM,eAAeoB,YAAf,CAA4BxB,OAA5B,EAA6CC,GAA7C,EAAyE;AAC9E,MAAI;AACF,QAAIwB,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAChC,YAAM3B,oBAAoB,CAACC,OAAD,EAAUC,GAAV,CAA1B;AACD,KAFD,MAEO;AACL,YAAM,2BAAW,KAAX,EAAkB,CAAC,KAAD,EAAQD,OAAR,EAAiB,IAAjB,EAAuBC,GAAvB,CAAlB,EAA+C;AACnD0B,QAAAA,KAAK,EAAE,SAD4C;AAEnDC,QAAAA,GAAG,EAAEC;AAF8C,OAA/C,CAAN;AAID;AACF,GATD,CASE,OAAOX,CAAP,EAAU;AACV;AACA;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAC,CAACG,OAAhB;AACA,UAAMS,eAAIC,OAAJ,CAAY;AAAEC,MAAAA,IAAI,EAAEhC,OAAR;AAAiB4B,MAAAA,GAAG,EAAE3B;AAAtB,KAAZ,CAAN;AACD;AACF","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport tar from 'tar';\nimport uuid from 'uuid';\n\nimport * as Binaries from './Binaries';\nimport UserSettings from './UserSettings';\n\nasync function _extractWindowsAsync(archive: string, dir: string) {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let tmpDir = path.join(dotExpoHomeDirectory, 'tmp', uuid.v4());\n  fs.mkdirpSync(tmpDir);\n  let binary = path.join(Binaries.getBinariesPath(), '7z1602-extra', '7za');\n  try {\n    await spawnAsync(binary, ['x', archive, '-aoa', `-o${tmpDir}`]);\n    // We don't know the resulting filename after this step, so\n    // just assume the only file in the directory is our .tar file.\n    // This should be fine since we created the directory with a random name.\n    let files = fs.readdirSync(tmpDir);\n    let outputFile = path.resolve(tmpDir, files[0]);\n    await spawnAsync(binary, ['x', outputFile, '-aoa', `-o${dir}`]);\n  } catch (e) {\n    console.error(e.message);\n    console.error(e.stderr);\n    throw e;\n  } finally {\n    fs.removeSync(tmpDir);\n  }\n}\n\nexport async function extractAsync(archive: string, dir: string): Promise<void> {\n  try {\n    if (process.platform === 'win32') {\n      await _extractWindowsAsync(archive, dir);\n    } else {\n      await spawnAsync('tar', ['-xf', archive, '-C', dir], {\n        stdio: 'inherit',\n        cwd: __dirname,\n      });\n    }\n  } catch (e) {\n    // tar node module has previously had problems with big files, and seems to\n    // be slower, so only use it as a backup.\n    console.error(e.message);\n    await tar.extract({ file: archive, cwd: dir });\n  }\n}\n"],"file":"../Extract.js","sourceRoot":"/@expo/xdl@57.9.17/src"}