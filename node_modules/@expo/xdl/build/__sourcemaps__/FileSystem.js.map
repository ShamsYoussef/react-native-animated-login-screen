{"version":3,"sources":["FileSystem.ts"],"names":["openFolderName","process","platform","openConsoleName","openFolderAsync","dir","osascript","openFinderToFolderAsync","XDLError","openConsoleAsync","openFolderInTerminalAppAsync","openFileInEditorAsync","path","openInEditorAsync","env","EXPO_EDITOR","openProjectInEditorAsync"],"mappings":";;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,SAASA,cAAT,GAA0B;AAC/B,MAAIC,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,gBAAP;AACD,GAFD,MAEO,IAAID,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,uBAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF;;AAEM,SAASC,eAAT,GAA2B;AAChC,MAAIF,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,kBAAP;AACD,GAFD,MAEO,IAAID,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,aAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF;;AAEM,eAAeE,eAAf,CAA+BC,GAA/B,EAA4C;AACjD,MAAIJ,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,MAAMI,SAAS,GAACC,uBAAV,CAAkCF,GAAlC,CAAb;AACD,GAFD,MAEO,IAAIJ,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,MAAM,2BAAW,UAAX,EAAuB,CAACG,GAAD,CAAvB,CAAb;AACD,GAFM,MAEA;AACL,UAAM,KAAIG,mBAAJ,EAAa,wBAAb,EAAuC,+BAAvC,CAAN;AACD;AACF;;AAEM,eAAeC,gBAAf,CAAgCJ,GAAhC,EAA6C;AAClD,MAAIJ,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,UAAMI,SAAS,GAACI,4BAAV,CAAuCL,GAAvC,CAAN;AACD,GAFD,MAEO,IAAIJ,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,mCAAU,uBAAsBG,GAAI,GAApC;AACD,GAFM,MAEA;AACL,UAAM,KAAIG,mBAAJ,EAAa,wBAAb,EAAuC,gCAAvC,CAAN;AACD;AACF;;AAEM,eAAeG,qBAAf,CAAqCC,IAArC,EAAmD;AACxD,MAAIX,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC;AACA;AACA,WAAO,MAAMI,SAAS,GAACO,iBAAV,CAA4BD,IAA5B,EAAkCX,OAAO,CAACa,GAAR,CAAYC,WAA9C,CAAb;AACD,GAJD,MAIO;AACL,UAAM,KAAIP,mBAAJ,EAAa,wBAAb,EAAuC,qCAAvC,CAAN;AACD;AACF;;AAEM,eAAeQ,wBAAf,CAAwCX,GAAxC,EAAqD;AAC1D,MAAIJ,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;AACjC;AACA;AACA,WAAO,MAAMI,SAAS,GAACO,iBAAV,CAA4BR,GAA5B,EAAiCJ,OAAO,CAACa,GAAR,CAAYC,WAA7C,CAAb;AACD,GAJD,MAIO;AACL,UAAM,KAAIP,mBAAJ,EAAa,wBAAb,EAAuC,wCAAvC,CAAN;AACD;AACF","sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\nimport { execSync } from 'child_process';\n\nimport XDLError from './XDLError';\n\nexport function openFolderName() {\n  if (process.platform === 'darwin') {\n    return 'Show in Finder';\n  } else if (process.platform === 'win32') {\n    return 'Show in File Explorer';\n  } else {\n    return null;\n  }\n}\n\nexport function openConsoleName() {\n  if (process.platform === 'darwin') {\n    return 'Open in Terminal';\n  } else if (process.platform === 'win32') {\n    return 'Open in Cmd';\n  } else {\n    return null;\n  }\n}\n\nexport async function openFolderAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    return await osascript.openFinderToFolderAsync(dir);\n  } else if (process.platform === 'win32') {\n    return await spawnAsync('explorer', [dir]);\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openFolderAsync not supported');\n  }\n}\n\nexport async function openConsoleAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    await osascript.openFolderInTerminalAppAsync(dir);\n  } else if (process.platform === 'win32') {\n    execSync(`start cmd /K \"cd /d ${dir}\"`);\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openConsoleAsync not supported');\n  }\n}\n\nexport async function openFileInEditorAsync(path: string) {\n  if (process.platform === 'darwin') {\n    // This will use the ENV var $EXPO_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    return await osascript.openInEditorAsync(path, process.env.EXPO_EDITOR);\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openFileInEditorAsync not supported');\n  }\n}\n\nexport async function openProjectInEditorAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    // This will use the ENV var $EXPO_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    return await osascript.openInEditorAsync(dir, process.env.EXPO_EDITOR);\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openProjectInEditorAsync not supported');\n  }\n}\n"],"file":"../FileSystem.js","sourceRoot":"/@expo/xdl@57.9.17/src"}