{"version":3,"sources":["ProjectSettings.ts"],"names":["projectSettingsFile","projectSettingsDefaults","hostType","lanType","dev","minify","urlRandomness","https","packagerInfoFile","projectSettingsJsonFile","projectRoot","JsonFile","path","join","dotExpoProjectDirectory","packagerInfoJsonFile","readAsync","projectSettings","e","writeAsync","migrateDeprecatedSettings","urlType","strict","setAsync","json","mergeAsync","cantReadFileDefault","readPackagerInfoAsync","setPackagerInfoAsync","dirPath","oldDirPath","fs","statSync","isDirectory","renameSync","mkdirpSync","dotExpoProjectDirectoryExists","getPackagerOptsAsync"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport { ProjectTarget } from '@expo/config';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport type ProjectSettings = {\n  hostType: 'localhost' | 'lan' | 'tunnel';\n  lanType: 'ip' | 'hostname';\n  dev: boolean;\n  minify: boolean;\n  urlRandomness: string | null;\n  https: boolean;\n};\nexport type Settings = ProjectSettings;\n\nconst projectSettingsFile = 'settings.json';\nconst projectSettingsDefaults: ProjectSettings = {\n  hostType: 'lan',\n  lanType: 'ip',\n  dev: true,\n  minify: false,\n  urlRandomness: null,\n  https: false,\n};\n\ntype PackagerInfo = {\n  expoServerPort?: number | null;\n  packagerPort?: number | null;\n  packagerPid?: number | null;\n  expoServerNgrokUrl?: string | null;\n  packagerNgrokUrl?: string | null;\n  ngrokPid?: number | null;\n  devToolsPort?: number | null;\n  webpackServerPort?: number | null;\n  target?: ProjectTarget;\n};\nconst packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string): JsonFile<ProjectSettings> {\n  return new JsonFile<ProjectSettings>(\n    path.join(dotExpoProjectDirectory(projectRoot), projectSettingsFile)\n  );\n}\n\nfunction packagerInfoJsonFile(projectRoot: string): JsonFile<PackagerInfo> {\n  return new JsonFile<PackagerInfo>(\n    path.join(dotExpoProjectDirectory(projectRoot), packagerInfoFile)\n  );\n}\n\nexport async function readAsync(projectRoot: string): Promise<ProjectSettings> {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot).writeAsync(\n      projectSettingsDefaults\n    );\n  }\n  migrateDeprecatedSettings(projectSettings);\n  // Set defaults for any missing fields\n  return { ...projectSettingsDefaults, ...projectSettings };\n}\n\nfunction migrateDeprecatedSettings(projectSettings: any): void {\n  if (projectSettings.hostType === 'ngrok') {\n    // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  if (projectSettings.urlType) {\n    // urlType is deprecated as a project setting\n    delete projectSettings.urlType;\n  }\n\n  if ('strict' in projectSettings) {\n    // strict mode is not supported at the moment\n    delete projectSettings.strict;\n  }\n}\n\nexport async function setAsync(\n  projectRoot: string,\n  json: Partial<ProjectSettings>\n): Promise<ProjectSettings> {\n  try {\n    return await projectSettingsJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: projectSettingsDefaults,\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot).writeAsync({\n      ...projectSettingsDefaults,\n      ...json,\n    });\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).readAsync({\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync({});\n  }\n}\n\nexport async function setPackagerInfoAsync(\n  projectRoot: string,\n  json: Partial<PackagerInfo>\n): Promise<PackagerInfo> {\n  try {\n    return await packagerInfoJsonFile(projectRoot).mergeAsync(json, {\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await packagerInfoJsonFile(projectRoot).writeAsync(json);\n  }\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string): string {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    let oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  fs.mkdirpSync(dirPath);\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string): boolean {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string): Promise<ProjectSettings> {\n  let projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"],"file":"../ProjectSettings.js","sourceRoot":"/@expo/xdl@57.9.17/src"}