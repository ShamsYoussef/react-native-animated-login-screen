{"version":3,"sources":["tools/UpdateVersions.ts"],"names":["updateSdkVersionsAsync","sdkVersion","reactNativeTag","facebookRNVersion","facebookReactVersion","versions","Versions","versionsAsync","sdkVersions","expoReactNativeTag","facebookReactNativeVersion","setVersionsAsync","updateIOSSimulatorBuild","s3Client","pathToApp","appVersion","tempAppPath","path","join","process","cwd","stdio","file","fs","createReadStream","console","log","putObject","Bucket","Key","Body","ACL","promise","clientUrl","updateClientUrlAndVersionAsync","updateAndroidApk","platform","Object","keys","sort","semver","rcompare","sdkVersionConfig"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Versions from '../Versions';\n\nexport async function updateSdkVersionsAsync(\n  sdkVersion: string,\n  reactNativeTag: string,\n  facebookRNVersion: string,\n  facebookReactVersion: string\n) {\n  let versions = await Versions.versionsAsync();\n  versions.sdkVersions[sdkVersion] = {\n    ...versions.sdkVersions[sdkVersion],\n    expoReactNativeTag: reactNativeTag,\n    facebookReactNativeVersion: facebookRNVersion,\n    facebookReactVersion,\n  };\n  await Versions.setVersionsAsync(versions);\n}\n\nexport async function updateIOSSimulatorBuild(\n  s3Client: any,\n  pathToApp: string,\n  appVersion: string,\n  sdkVersion?: string\n) {\n  let tempAppPath = path.join(process.cwd(), 'temp-app.tar.gz');\n\n  await spawnAsync('tar', ['-zcvf', tempAppPath, '-C', pathToApp, '.'], {\n    cwd: process.cwd(),\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n  });\n\n  let file = fs.createReadStream(tempAppPath);\n\n  console.log('Uploading...');\n\n  await s3Client\n    .putObject({\n      Bucket: 'exp-ios-simulator-apps',\n      Key: `Exponent-${appVersion}.tar.gz`,\n      Body: file,\n      ACL: 'public-read',\n    })\n    .promise();\n\n  await spawnAsync('rm', [tempAppPath]);\n\n  console.log('Adding to server config...');\n\n  const clientUrl = `https://dpq5q02fu5f55.cloudfront.net/Exponent-${appVersion}.tar.gz`;\n\n  await updateClientUrlAndVersionAsync(sdkVersion, 'ios', clientUrl, appVersion);\n}\n\nexport async function updateAndroidApk(\n  s3Client: any,\n  pathToApp: string,\n  appVersion: string,\n  sdkVersion?: string\n) {\n  let file = fs.createReadStream(pathToApp);\n\n  console.log('Uploading...');\n\n  await s3Client\n    .putObject({\n      Bucket: 'exp-android-apks',\n      Key: `Exponent-${appVersion}.apk`,\n      Body: file,\n      ACL: 'public-read',\n    })\n    .promise();\n\n  console.log('Adding to server config...');\n\n  const clientUrl = `https://d1ahtucjixef4r.cloudfront.net/Exponent-${appVersion}.apk`;\n\n  await updateClientUrlAndVersionAsync(sdkVersion, 'android', clientUrl, appVersion);\n}\n\nasync function updateClientUrlAndVersionAsync(\n  sdkVersion: string | undefined,\n  platform: 'ios' | 'android',\n  clientUrl: string,\n  appVersion: string\n) {\n  // Unfortunately it needs to be of `any` type to be able to change dynamic keys in the object.\n  const versions: any = await Versions.versionsAsync();\n\n  // Create new SDK version config if it's not there yet.\n  if (sdkVersion && !versions.sdkVersions[sdkVersion]) {\n    versions.sdkVersions[sdkVersion] = {};\n  }\n\n  // For compatibility reasons we have to maintain that global config, but only when we're updating the most recent SDK.\n  if (!sdkVersion || Object.keys(versions.sdkVersions).sort(semver.rcompare)[0] === sdkVersion) {\n    versions[`${platform}Version`] = appVersion;\n    versions[`${platform}Url`] = clientUrl;\n  }\n\n  // Update SDK version config.\n  if (sdkVersion) {\n    const sdkVersionConfig = versions.sdkVersions[sdkVersion];\n    sdkVersionConfig[`${platform}ClientUrl`] = clientUrl;\n    sdkVersionConfig[`${platform}ClientVersion`] = appVersion;\n  }\n\n  await Versions.setVersionsAsync(versions);\n}\n"],"file":"../../tools/UpdateVersions.js","sourceRoot":"/@expo/xdl@57.9.17/src"}