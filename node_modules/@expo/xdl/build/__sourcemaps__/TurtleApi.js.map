{"version":3,"sources":["TurtleApi.ts"],"names":["apiBaseUrl","Config","turtleApi","scheme","host","port","TurtleApiError","ExtendableError","constructor","message","code","TurtleApiClient","clientForUser","sessionSecret","options","getAsync","methodName","args","extraOptions","_requestAsync","httpMethod","queryParameters","postAsync","data","body","putAsync","deleteAsync","extraRequestOptions","formattedUrl","URL","reqOptions","url","href","method","headers","params","paramsSerializer","QueryString","stringify","handleRequest","uploadFile","tarPath","projectFormData","FormData","append","fs","createReadStream","convertedFormData","convertFormDataToBuffer","getHeaders","maxContentLength","byteLength","response","result","axios","request","e","maybeErrorData","_","errors","length","responseError","error","serverStack","stack","details","formData","Promise","resolve","pipe","encoding"],"mappings":"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","sourcesContent":["import QueryString from 'querystring';\nimport { URL } from 'url';\n\nimport { JSONObject, JSONValue } from '@expo/json-file';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport concat from 'concat-stream';\nimport ExtendableError from 'es6-error';\nimport fs from 'fs-extra';\nimport idx from 'idx';\nimport merge from 'lodash/merge';\n\nimport Config from './Config';\nimport FormData from './tools/FormData';\n\nconst apiBaseUrl = `${Config.turtleApi.scheme}://${Config.turtleApi.host}:${Config.turtleApi.port}`;\n\nexport class TurtleApiError extends ExtendableError {\n  code: string;\n  details?: JSONValue;\n  serverStack?: string;\n  readonly _isApiError = true;\n\n  constructor(message: string, code: string = 'UNKNOWN') {\n    super(message);\n    this.code = code;\n  }\n}\n\ntype RequestOptions = {\n  httpMethod: 'get' | 'post' | 'put' | 'delete';\n  queryParameters?: QueryParameters;\n  body?: JSONObject;\n};\n\ntype QueryParameters = { [key: string]: string | number | boolean | null | undefined };\n\ntype TurtleApiClientOptions = {\n  sessionSecret: string;\n};\n\nexport default class TurtleApiClient {\n  sessionSecret: string;\n\n  static clientForUser(sessionSecret: string): TurtleApiClient {\n    return new TurtleApiClient({ sessionSecret });\n  }\n\n  constructor(options: TurtleApiClientOptions) {\n    this.sessionSecret = options.sessionSecret;\n  }\n\n  async getAsync(\n    methodName: string,\n    args: QueryParameters = {},\n    extraOptions?: Partial<RequestOptions>\n  ) {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'get',\n        queryParameters: args,\n      },\n      extraOptions\n    );\n  }\n\n  async postAsync(methodName: string, data?: any, extraOptions?: Partial<RequestOptions>) {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'post',\n        body: data,\n      },\n      extraOptions\n    );\n  }\n\n  async putAsync(methodName: string, data: JSONObject, extraOptions?: Partial<RequestOptions>) {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'put',\n        body: data,\n      },\n      extraOptions\n    );\n  }\n\n  async deleteAsync(methodName: string, extraOptions?: Partial<RequestOptions>) {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'delete',\n      },\n      extraOptions\n    );\n  }\n\n  async _requestAsync(\n    methodName: string,\n    options: RequestOptions,\n    extraRequestOptions?: Partial<RequestOptions>\n  ) {\n    const formattedUrl = new URL(methodName, apiBaseUrl);\n\n    let reqOptions: AxiosRequestConfig = {\n      url: formattedUrl.href,\n      method: options.httpMethod,\n      headers: {\n        'Expo-Session': this.sessionSecret || null,\n      },\n    };\n\n    if (options.queryParameters) {\n      reqOptions.params = options.queryParameters;\n      reqOptions.paramsSerializer = QueryString.stringify;\n    }\n\n    if (options.body) {\n      reqOptions.data = options.body;\n    }\n\n    reqOptions = merge({}, reqOptions, extraRequestOptions);\n\n    return await this.handleRequest(reqOptions);\n  }\n\n  async uploadFile(tarPath: string) {\n    const formattedUrl = new URL('upload', apiBaseUrl);\n\n    const projectFormData = new FormData();\n    projectFormData.append('file', fs.createReadStream(tarPath));\n    const convertedFormData = await this.convertFormDataToBuffer(projectFormData);\n    const { data } = convertedFormData;\n    const headers = projectFormData.getHeaders();\n\n    let reqOptions: AxiosRequestConfig = {\n      method: 'post',\n      url: formattedUrl.href,\n      data,\n      headers,\n      maxContentLength: data.byteLength,\n    };\n\n    if (this.sessionSecret) {\n      reqOptions.headers['Expo-Session'] = this.sessionSecret;\n    }\n\n    return await this.handleRequest(reqOptions);\n  }\n\n  async handleRequest(reqOptions: AxiosRequestConfig) {\n    let response;\n    let result;\n    try {\n      response = await axios.request(reqOptions);\n      result = response.data;\n    } catch (e) {\n      const maybeErrorData = idx(e, _ => _.response.data.errors.length);\n      if (maybeErrorData) {\n        result = e.response.data;\n      } else {\n        throw e;\n      }\n    }\n\n    if (result.errors && result.errors.length) {\n      let responseError = result.errors[0];\n      let error = new TurtleApiError(responseError.message, responseError.code);\n      error.serverStack = responseError.stack;\n      error.details = responseError.details;\n      throw error;\n    }\n\n    return result;\n  }\n\n  async convertFormDataToBuffer(formData: FormData): Promise<{ data: Buffer }> {\n    return new Promise(resolve => {\n      formData.pipe(concat({ encoding: 'buffer' }, data => resolve({ data })));\n    });\n  }\n}\n"],"file":"../TurtleApi.js","sourceRoot":"/@expo/xdl@57.9.17/src"}