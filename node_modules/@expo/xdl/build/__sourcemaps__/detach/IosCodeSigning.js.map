{"version":3,"sources":["detach/IosCodeSigning.js"],"names":["async","ensureCertificateValid","certPath","certPassword","teamID","certData","await","fs","readFile","fingerprint","getP12CertFingerprint","identities","_findIdentitiesByTeamID","isValid","indexOf","Error","output","spawnAsyncThrowError","stdio","join","validateProvisioningProfile","plistData","distCertFingerprint","bundleIdentifier","_ensureDeveloperCertificateIsValid","_ensureBundleIdentifierIsValid","devCertBase64","DeveloperCertificates","devCertFingerprint","_genDerCertFingerprint","certBase64","certBuffer","Buffer","from","crypto","createHash","update","digest","toUpperCase","expectedBundleIdentifier","actualApplicationIdentifier","Entitlements","actualBundleIdentifier","exec","minimatch","writeExportOptionsPlistFile","plistPath","data","toWrite","createExportOptionsPlist","writeFile","provisioningProfileUUID","exportMethod","disableBitcodeCompiling","buildIPA","ipaPath","workspacePath","archivePath","codeSignIdentity","exportOptionsPlistPath","keychainPath","credentials","client","path","Dir","env","process","CI","runFastlane","basename","dirname","buildPhase","resolveExportMethod","ProvisionedDevices","ProvisionsAllDevices","entitlementTransferRules","blacklistedEntitlementKeysWithoutICloud","blacklistedEntitlementKeys","icloudContainerEnvKey","createEntitlementsFile","generatedEntitlementsPath","manifest","decodedProvisioningProfileEntitlements","entitlementsPaths","globSync","absolute","cwd","length","archiveEntitlementsPath","archiveEntitlementsRaw","let","archiveEntitlementsData","plist","parse","error","message","entitlements","forEach","rule","generatedEntitlements","omit","ios","usesIcloudStorage","ubiquityKvKey","teamId","split","associatedDomains","usesAppleSignIn","envs","filter","i","generatedEntitlementsPlistData","build","mode","plistDataReformatted","resignIPA","entitlementsPath","provisioningProfilePath","sourceIpaPath","destIpaPath","fastlaneArgs","loggerFields","fastlaneEnvVars","FASTLANE_SKIP_UPDATE_CHECK","FASTLANE_DISABLE_COLORS","FASTLANE_TEAM_ID","LC_ALL","pipeToLogger","dontShowStdout"],"mappings":"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","file":"../../detach/IosCodeSigning.js","sourcesContent":["import crypto from 'crypto';\nimport path from 'path';\n\nimport omit from 'lodash/omit';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport minimatch from 'minimatch';\nimport plist from '@expo/plist';\n\nimport { findP12CertSerialNumber, getP12CertFingerprint } from './PKCS12Utils';\nimport { spawnAsyncThrowError } from './ExponentTools';\n\nasync function ensureCertificateValid({ certPath, certPassword, teamID }) {\n  const certData = await fs.readFile(certPath);\n  const fingerprint = getP12CertFingerprint(certData, certPassword);\n  const identities = await _findIdentitiesByTeamID(teamID);\n  const isValid = identities.indexOf(fingerprint) !== -1;\n  if (!isValid) {\n    throw new Error(`codesign ident not present in find-identity: ${fingerprint}\\n${identities}`);\n  }\n  return fingerprint;\n}\n\nasync function _findIdentitiesByTeamID(teamID) {\n  const { output } = await spawnAsyncThrowError(\n    'security',\n    ['find-identity', '-v', '-s', `(${teamID})`],\n    {\n      stdio: 'pipe',\n    }\n  );\n  return output.join('');\n}\n\nfunction validateProvisioningProfile(plistData, { distCertFingerprint, bundleIdentifier }) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto.createHash('sha1').update(certBuffer).digest('hex').toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData, expectedBundleIdentifier) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)[1];\n\n  if (!minimatch(expectedBundleIdentifier, actualBundleIdentifier)) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n\nasync function writeExportOptionsPlistFile(plistPath, data) {\n  const toWrite = createExportOptionsPlist(data);\n  await fs.writeFile(plistPath, toWrite);\n}\n\nconst createExportOptionsPlist = ({\n  bundleIdentifier,\n  provisioningProfileUUID,\n  exportMethod,\n  teamID,\n}) => {\n  const disableBitcodeCompiling = `<key>uploadBitcode</key>\n    <false/>\n    <key>compileBitcode</key>\n    <false/>\n    <key>uploadSymbols</key>\n    <false/>`;\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>method</key>\n    <string>${exportMethod}</string>\n    <key>teamID</key>\n    <string>${teamID}</string>\n    <key>provisioningProfiles</key>\n    <dict>\n      <key>${bundleIdentifier}</key>\n      <string>${provisioningProfileUUID}</string>\n    </dict>\n    ${exportMethod === 'ad-hoc' || exportMethod === 'enterprise' ? disableBitcodeCompiling : ''}\n  </dict>\n</plist>`;\n};\n\nasync function buildIPA(\n  {\n    ipaPath,\n    workspacePath,\n    archivePath,\n    codeSignIdentity,\n    exportOptionsPlistPath,\n    plistData,\n    keychainPath,\n    exportMethod,\n  },\n  credentials,\n  client = false\n) {\n  if (client) {\n    await spawnAsyncThrowError(\n      'xcodebuild',\n      [\n        '-exportArchive',\n        '-archivePath',\n        archivePath,\n        '-exportOptionsPlist',\n        exportOptionsPlistPath,\n        '-exportPath',\n        path.Dir(ipaPath),\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n      ],\n      {\n        env: { ...process.env, CI: 1 },\n      }\n    );\n  } else {\n    await runFastlane(\n      credentials,\n      [\n        'gym',\n        '-n',\n        path.basename(ipaPath),\n        '--workspace',\n        workspacePath,\n        '--archive_path',\n        archivePath,\n        '--skip_build_archive',\n        'true',\n        '-i',\n        codeSignIdentity,\n        '--export_options',\n        exportOptionsPlistPath,\n        '--export_method',\n        exportMethod,\n        '--export_xcargs',\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n        '-o',\n        path.dirname(ipaPath),\n        '--verbose',\n      ],\n      { buildPhase: 'building and signing IPA' }\n    );\n  }\n}\n\nconst resolveExportMethod = plistData => {\n  if (plistData.ProvisionedDevices) {\n    return 'ad-hoc';\n  } else if (plistData.ProvisionsAllDevices === true) {\n    return 'enterprise';\n  } else {\n    return 'app-store';\n  }\n};\n\nconst entitlementTransferRules = [\n  'com.apple.developer.associated-domains',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.homekit',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.networking.vpn.api',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n  'com.apple.external-accessory.wireless-configuration',\n  'com.apple.security.application-groups',\n  'inter-app-audio',\n  'keychain-access-groups',\n];\n\nconst blacklistedEntitlementKeysWithoutICloud = [\n  'com.apple.developer.icloud-container-environment',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n];\n\nconst blacklistedEntitlementKeys = [\n  'com.apple.developer.icloud-container-development-container-identifiers',\n  'com.apple.developer.restricted-resource-mode',\n  'inter-app-audio',\n  'com.apple.developer.homekit',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.maps',\n  'com.apple.external-accessory.wireless-configuration',\n];\n\nconst icloudContainerEnvKey = 'com.apple.developer.icloud-container-environment';\n\nasync function createEntitlementsFile({\n  generatedEntitlementsPath,\n  plistData,\n  archivePath,\n  manifest,\n}) {\n  const decodedProvisioningProfileEntitlements = plistData.Entitlements;\n\n  const entitlementsPaths = globSync('Products/Applications/*.app/*.entitlements', {\n    absolute: true,\n    cwd: archivePath,\n  });\n  if (entitlementsPaths.length === 0) {\n    throw new Error(\"Didn't find any generated entitlements file in archive.\");\n  } else if (entitlementsPaths.length !== 1) {\n    throw new Error('Found more than one entitlements file.');\n  }\n  const archiveEntitlementsPath = entitlementsPaths[0];\n  const archiveEntitlementsRaw = await fs.readFile(archiveEntitlementsPath, 'utf8');\n  let archiveEntitlementsData;\n  try {\n    archiveEntitlementsData = plist.parse(archiveEntitlementsRaw);\n  } catch (error) {\n    throw new Error(`Error when parsing plist: ${error.message}`);\n  }\n\n  const entitlements = { ...decodedProvisioningProfileEntitlements };\n\n  entitlementTransferRules.forEach(rule => {\n    if (rule in archiveEntitlementsData) {\n      entitlements[rule] = archiveEntitlementsData[rule];\n    }\n  });\n\n  let generatedEntitlements = omit(entitlements, blacklistedEntitlementKeys);\n\n  if (!manifest.ios.usesIcloudStorage) {\n    generatedEntitlements = omit(generatedEntitlements, blacklistedEntitlementKeysWithoutICloud);\n  } else {\n    const ubiquityKvKey = 'com.apple.developer.ubiquity-kvstore-identifier';\n    if (generatedEntitlements[ubiquityKvKey]) {\n      const teamId = generatedEntitlements[ubiquityKvKey].split('.')[0];\n      generatedEntitlements[ubiquityKvKey] = `${teamId}.${manifest.ios.bundleIdentifier}`;\n    }\n    generatedEntitlements['com.apple.developer.icloud-services'] = ['CloudDocuments'];\n  }\n  if (!manifest.ios.associatedDomains) {\n    generatedEntitlements = omit(generatedEntitlements, 'com.apple.developer.associated-domains');\n  }\n  if (!manifest.ios.usesAppleSignIn) {\n    generatedEntitlements = omit(generatedEntitlements, 'com.apple.developer.applesignin');\n  }\n  if (generatedEntitlements[icloudContainerEnvKey]) {\n    const envs = generatedEntitlements[icloudContainerEnvKey].filter(i => i === 'Production');\n    generatedEntitlements[icloudContainerEnvKey] = envs;\n  }\n\n  const generatedEntitlementsPlistData = plist.build(generatedEntitlements);\n  await fs.writeFile(generatedEntitlementsPath, generatedEntitlementsPlistData, {\n    mode: 0o755,\n  });\n  const { output } = await spawnAsyncThrowError(\n    '/usr/libexec/PlistBuddy',\n    ['-x', '-c', 'Print', generatedEntitlementsPath],\n    {\n      stdio: 'pipe',\n    }\n  );\n  const plistDataReformatted = output.join('');\n  await fs.writeFile(generatedEntitlementsPath, plistDataReformatted, {\n    mode: 0o755,\n  });\n}\n\nasync function resignIPA(\n  {\n    codeSignIdentity,\n    entitlementsPath,\n    provisioningProfilePath,\n    sourceIpaPath,\n    destIpaPath,\n    keychainPath,\n  },\n  credentials\n) {\n  await spawnAsyncThrowError('cp', ['-rf', sourceIpaPath, destIpaPath]);\n  await runFastlane(\n    credentials,\n    [\n      'sigh',\n      'resign',\n      '--verbose',\n      '--entitlements',\n      entitlementsPath,\n      '--signing_identity',\n      codeSignIdentity,\n      '--keychain_path',\n      keychainPath,\n      '--provisioning_profile',\n      provisioningProfilePath,\n      destIpaPath,\n    ],\n    { buildPhase: 'building and signing IPA' }\n  );\n}\n\nasync function runFastlane({ teamID }, fastlaneArgs, loggerFields) {\n  const fastlaneEnvVars = {\n    FASTLANE_SKIP_UPDATE_CHECK: 1,\n    FASTLANE_DISABLE_COLORS: 1,\n    FASTLANE_TEAM_ID: teamID,\n    CI: 1,\n    LC_ALL: 'en_US.UTF-8',\n  };\n\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: {\n      ...process.env,\n      ...fastlaneEnvVars,\n    },\n    pipeToLogger: true,\n    dontShowStdout: false,\n    loggerFields,\n  });\n}\n\nexport {\n  ensureCertificateValid,\n  findP12CertSerialNumber,\n  validateProvisioningProfile,\n  writeExportOptionsPlistFile,\n  buildIPA,\n  resolveExportMethod,\n  createEntitlementsFile,\n  resignIPA,\n};\n"],"sourceRoot":"/@expo/xdl@57.9.17/src"}