{"version":3,"sources":["detach/IosIcons.ts"],"names":["_getAppleIconQualifier","iconSize","iconResolution","iconQualifier","_saveDefaultIconToPathAsync","context","path","StandaloneContextUser","data","exp","icon","projectPath","Error","manifest","ios","iconUrl","createAndWriteIconsToPathAsync","destinationIconPath","defaultIconFilename","join","e","logger","warn","message","iconSizes","Promise","all","map","iconResolutions","iconKey","rawIconFilename","usesDefault","StandaloneContextService","hasOwnProperty","iconFilename","iconSizePx","stdio","cwd","dims","width","height"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,SAASA,sBAAT,CAAgCC,QAAhC,EAAkDC,cAAlD,EAAkF;AAChF,MAAIC,aAAJ;;AACA,MAAID,cAAc,KAAK,CAAvB,EAA0B;AACxB;AACAC,IAAAA,aAAa,GAAI,GAAEF,QAAS,IAAGA,QAAS,IAAGC,cAAe,GAA1D;AACD,GAHD,MAGO;AACLC,IAAAA,aAAa,GAAI,GAAEF,QAAS,IAAGA,QAAS,EAAxC;AACD;;AACD,MAAIA,QAAQ,KAAK,EAAb,IAAmBA,QAAQ,KAAK,IAApC,EAA0C;AACxC;AACAE,IAAAA,aAAa,GAAI,GAAEA,aAAc,OAAjC;AACD;;AACD,SAAOA,aAAP;AACD;;AAED,eAAeC,2BAAf,CAA2CC,OAA3C,EAA0EC,IAA1E,EAAwF;AACtF,MAAID,OAAO,YAAYE,0CAAvB,EAA8C;AAC5C,UAAM;AAAEC,MAAAA;AAAF,QAAWH,OAAjB;;AACA,QAAIG,IAAI,CAACC,GAAL,CAASC,IAAb,EAAmB;AACjB,YAAM,2CAAqBF,IAAI,CAACG,WAA1B,EAAuCH,IAAI,CAACC,GAAL,CAASC,IAAhD,EAAsDJ,IAAtD,CAAN;AACD,KAFD,MAEO;AACL,YAAM,IAAIM,KAAJ,CAAU,wDAAV,CAAN;AACD;AACF,GAPD,MAOO;AACL,UAAM;AAAEJ,MAAAA;AAAF,QAAWH,OAAjB;;AACA,QAAIG,IAAI,CAACK,QAAL,CAAcC,GAAd,IAAqBN,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAkBC,OAA3C,EAAoD;AAClD,YAAM,yCAAmBP,IAAI,CAACK,QAAL,CAAcC,GAAd,CAAkBC,OAArC,EAA8CT,IAA9C,CAAN;AACD,KAFD,MAEO,IAAIE,IAAI,CAACK,QAAL,CAAcE,OAAlB,EAA2B;AAChC,YAAM,yCAAmBP,IAAI,CAACK,QAAL,CAAcE,OAAjC,EAA0CT,IAA1C,CAAN;AACD,KAFM,MAEA;AACL,YAAM,IAAIM,KAAJ,CAAU,sEAAV,CAAN;AACD;AACF;AACF;AAED;;;;;;;;;AAOA,eAAeI,8BAAf,CACEX,OADF,EAEEY,mBAFF,EAGE;AACA,MAAIC,mBAAkC,GAAG,cAAzC;;AACA,MAAI;AACF,UAAMd,2BAA2B,CAACC,OAAD,EAAUC,gBAAKa,IAAL,CAAUF,mBAAV,EAA+BC,mBAA/B,CAAV,CAAjC;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACVF,IAAAA,mBAAmB,GAAG,IAAtB;;AACAG,sBAAOC,IAAP,CAAYF,CAAC,CAACG,OAAd;AACD;;AAED,QAAMC,SAAS,GAAG,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,IAA3B,CAAlB;AAEA,QAAMC,OAAO,CAACC,GAAR,CACJF,SAAS,CAACG,GAAV,CAAc,MAAM1B,QAAN,IAAkB;AAC9B,QAAI2B,eAAJ;;AACA,QAAI3B,QAAQ,KAAK,EAAjB,EAAqB;AACnB;AACA2B,MAAAA,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAlB;AACD,KAHD,MAGO,IAAI3B,QAAQ,KAAK,IAAjB,EAAuB;AAC5B;AACA2B,MAAAA,eAAe,GAAG,CAAC,CAAD,CAAlB;AACD,KAHM,MAGA,IAAI3B,QAAQ,KAAK,IAAjB,EAAuB;AAC5B2B,MAAAA,eAAe,GAAG,CAAC,CAAD,CAAlB;AACD,KAFM,MAEA;AACLA,MAAAA,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAlB;AACD,KAZ6B,CAc9B;;;AACA,UAAMH,OAAO,CAACC,GAAR,CACJE,eAAe,CAACD,GAAhB,CAAoB,MAAMzB,cAAN,IAAwB;AAC1C,UAAIC,aAAa,GAAGH,sBAAsB,CAACC,QAAD,EAAWC,cAAX,CAA1C;;AACA,UAAI2B,OAAO,GAAI,UAAS1B,aAAc,EAAtC;AACA,UAAI2B,eAAJ;AACA,UAAIC,WAAW,GAAG,KAAlB;;AACA,UAAI1B,OAAO,YAAY2B,6CAAvB,EAAiD;AAC/C;AACA,cAAMnB,QAAQ,GAAGR,OAAO,CAACG,IAAR,CAAaK,QAA9B;;AACA,YAAIA,QAAQ,CAACC,GAAT,IAAgBD,QAAQ,CAACC,GAAT,CAAamB,cAAb,CAA4BJ,OAA5B,CAApB,EAA0D;AACxD;AACAC,UAAAA,eAAe,GAAI,WAAU3B,aAAc,MAA3C;AACA,gBAAM,yCACJU,QAAQ,CAACC,GAAT,CAAae,OAAb,CADI,EAEH,GAAEZ,mBAAoB,IAAGa,eAAgB,EAFtC,CAAN;AAID;AACF;;AACD,UAAI,CAACA,eAAL,EAAsB;AACpB;AACAC,QAAAA,WAAW,GAAG,IAAd;;AACA,YAAIb,mBAAJ,EAAyB;AACvBY,UAAAA,eAAe,GAAGZ,mBAAlB;AACD,SAFD,MAEO;AACLG,4BAAOC,IAAP,CACG,gCAA+BO,OAAQ,wDAD1C;;AAGA;AACD;AACF;;AAED,UAAIK,YAAY,GAAI,UAAS/B,aAAc,MAA3C;AACA,UAAIgC,UAAU,GAAGlC,QAAQ,GAAGC,cAA5B;AACA,YAAM,2CAAqB,SAArB,EAAgC,CAAC4B,eAAD,EAAkBI,YAAlB,CAAhC,EAAiE;AACrEE,QAAAA,KAAK,EAAE,SAD8D;AAErEC,QAAAA,GAAG,EAAEpB;AAFgE,OAAjE,CAAN;;AAIA,UAAI;AACF,cAAM,oCAAiBkB,UAAjB,EAA6BD,YAA7B,EAA2CjB,mBAA3C,CAAN;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,cAAM,IAAIR,KAAJ,CAAW,2BAA0BsB,YAAa,MAAKd,CAAE,GAAzD,CAAN;AACD,OAxCyC,CA0C1C;;;AACA,YAAMkB,IAAI,GAAG,MAAM,2CAAwBrB,mBAAxB,EAA6CiB,YAA7C,CAAnB;;AACA,UAAI,CAACI,IAAL,EAAW;AACT,cAAM,IAAI1B,KAAJ,CAAW,oCAAmCsB,YAAa,EAA3D,CAAN;AACD,OAFD,MAEO,IAAII,IAAI,CAACC,KAAL,KAAeD,IAAI,CAACE,MAAxB,EAAgC;AACrC,cAAM,IAAI5B,KAAJ,CACH,+CAA8CsB,YAAa,QAAOI,IAAK,EADpE,CAAN;AAGD;;AAED,UAAI,CAACP,WAAL,EAAkB;AAChB;AACA,cAAM,2CAAqB,SAArB,EAAgC,CACpCzB,gBAAKa,IAAL,CAAUF,mBAAV,EAA+Ba,eAA/B,CADoC,CAAhC,CAAN;AAGD;AACF,KA1DD,CADI,CAAN;AA6DD,GA5ED,CADI,CAAN,CAXA,CA2FA;;AACA,MAAIZ,mBAAJ,EAAyB;AACvB,UAAM,2CAAqB,SAArB,EAAgC,CAACZ,gBAAKa,IAAL,CAAUF,mBAAV,EAA+BC,mBAA/B,CAAD,CAAhC,CAAN;AACD;AACF","sourcesContent":["import path from 'path';\n\nimport { saveImageToPathAsync, saveUrlToPathAsync, spawnAsyncThrowError } from './ExponentTools';\nimport {\n  AnyStandaloneContext,\n  StandaloneContextDataService,\n  StandaloneContextDataUser,\n  StandaloneContextService,\n  StandaloneContextUser,\n} from './StandaloneContext';\nimport { getImageDimensionsAsync, resizeImageAsync } from '../tools/ImageUtils';\nimport logger from './Logger';\n\nfunction _getAppleIconQualifier(iconSize: number, iconResolution: number): string {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\nasync function _saveDefaultIconToPathAsync(context: AnyStandaloneContext, path: string) {\n  if (context instanceof StandaloneContextUser) {\n    const { data } = context;\n    if (data.exp.icon) {\n      await saveImageToPathAsync(data.projectPath, data.exp.icon, path);\n    } else {\n      throw new Error('Cannot save icon because app.json has no exp.icon key.');\n    }\n  } else {\n    const { data } = context;\n    if (data.manifest.ios && data.manifest.ios.iconUrl) {\n      await saveUrlToPathAsync(data.manifest.ios.iconUrl, path);\n    } else if (data.manifest.iconUrl) {\n      await saveUrlToPathAsync(data.manifest.iconUrl, path);\n    } else {\n      throw new Error('Cannot save icon because manifest has no iconUrl or ios.iconUrl key.');\n    }\n  }\n}\n\n/**\n * Based on keys in the given context.config,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function createAndWriteIconsToPathAsync(\n  context: AnyStandaloneContext,\n  destinationIconPath: string\n) {\n  let defaultIconFilename: string | null = 'exp-icon.png';\n  try {\n    await _saveDefaultIconToPathAsync(context, path.join(destinationIconPath, defaultIconFilename));\n  } catch (e) {\n    defaultIconFilename = null;\n    logger.warn(e.message);\n  }\n\n  const iconSizes = [1024, 20, 29, 40, 60, 76, 83.5];\n\n  await Promise.all(\n    iconSizes.map(async iconSize => {\n      let iconResolutions;\n      if (iconSize === 76) {\n        // iPad has 1x and 2x icons for this size only\n        iconResolutions = [1, 2];\n      } else if (iconSize === 1024) {\n        // marketing icon is weird\n        iconResolutions = [1];\n      } else if (iconSize === 83.5) {\n        iconResolutions = [2];\n      } else {\n        iconResolutions = [2, 3];\n      }\n\n      // We need to wait for all of these to finish!\n      await Promise.all(\n        iconResolutions.map(async iconResolution => {\n          let iconQualifier = _getAppleIconQualifier(iconSize, iconResolution);\n          let iconKey = `iconUrl${iconQualifier}`;\n          let rawIconFilename;\n          let usesDefault = false;\n          if (context instanceof StandaloneContextService) {\n            // TODO(nikki): Support local paths for these icons\n            const manifest = context.data.manifest;\n            if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n              // manifest specifies an image just for this size/resolution, use that\n              rawIconFilename = `exp-icon${iconQualifier}.png`;\n              await saveUrlToPathAsync(\n                manifest.ios[iconKey],\n                `${destinationIconPath}/${rawIconFilename}`\n              );\n            }\n          }\n          if (!rawIconFilename) {\n            // use default iconUrl\n            usesDefault = true;\n            if (defaultIconFilename) {\n              rawIconFilename = defaultIconFilename;\n            } else {\n              logger.warn(\n                `Project does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n              );\n              return;\n            }\n          }\n\n          let iconFilename = `AppIcon${iconQualifier}.png`;\n          let iconSizePx = iconSize * iconResolution;\n          await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n            stdio: 'inherit',\n            cwd: destinationIconPath,\n          });\n          try {\n            await resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n          } catch (e) {\n            throw new Error(`Failed to resize image: ${iconFilename}. (${e})`);\n          }\n\n          // reject non-square icons (because Apple will if we don't)\n          const dims = await getImageDimensionsAsync(destinationIconPath, iconFilename);\n          if (!dims) {\n            throw new Error(`Unable to read the dimensions of ${iconFilename}`);\n          } else if (dims.width !== dims.height) {\n            throw new Error(\n              `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n            );\n          }\n\n          if (!usesDefault) {\n            // non-default icon used, clean up the downloaded version\n            await spawnAsyncThrowError('/bin/rm', [\n              path.join(destinationIconPath, rawIconFilename),\n            ]);\n          }\n        })\n      );\n    })\n  );\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [path.join(destinationIconPath, defaultIconFilename)]);\n  }\n}\n\nexport { createAndWriteIconsToPathAsync };\n"],"file":"../../detach/IosIcons.js","sourceRoot":"/@expo/xdl@57.9.17/src"}