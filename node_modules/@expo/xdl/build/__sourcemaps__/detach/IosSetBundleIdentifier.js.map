{"version":3,"sources":["detach/IosSetBundleIdentifier.ts"],"names":["defaultBundleId","resetAllPlistBundleIdentifiers","projectRoot","infoPlistPaths","absolute","cwd","plistPath","resetPlistBundleIdentifier","rawPlist","fs","readFileSync","plistObject","plist","parse","CFBundleIdentifier","format","pretty","indent","xml","build","writeFileSync","filterComments","item","endsWith","filterConfig","input","isa","filterHosts","buildSettings","TEST_HOST","updateBundleIdentifierForPbxproj","pbxprojPath","bundleIdentifier","project","parseSync","Object","entries","pbxXCBuildConfigurationSection","filter","forEach","PRODUCT_BUNDLE_IDENTIFIER","productName","split","pop","includes","PRODUCT_NAME","writeSync","setBundleIdentifier","pbxprojPaths"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { sync as globSync } from 'glob';\n// @ts-ignore\nimport { project as Project } from 'xcode';\nimport plist, { PlistObject } from '@expo/plist';\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nexport function resetAllPlistBundleIdentifiers(projectRoot: string) {\n  const infoPlistPaths = globSync('ios/*/Info.plist', { absolute: true, cwd: projectRoot });\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nexport function resetPlistBundleIdentifier(plistPath: string) {\n  // Read Plist as source\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    // Maybe bail out\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nfunction filterComments([item]: any[]): boolean {\n  return !item.endsWith(`_comment`);\n}\nfunction filterConfig(input: any[]): boolean {\n  const {\n    1: { isa },\n  } = input;\n  return isa === 'XCBuildConfiguration';\n}\nfunction filterHosts(input: any[]): boolean {\n  const {\n    1: { buildSettings },\n  } = input;\n\n  return !buildSettings.TEST_HOST;\n}\n\nexport function updateBundleIdentifierForPbxproj(pbxprojPath: string, bundleIdentifier: string) {\n  const project = Project(pbxprojPath);\n  project.parseSync();\n\n  Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(filterComments)\n    .filter(filterConfig)\n    .filter(filterHosts)\n    .forEach(({ 1: { buildSettings } }: any) => {\n      if (buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      const productName = bundleIdentifier.split('.').pop();\n      if (!productName?.includes('$')) {\n        buildSettings.PRODUCT_NAME = productName;\n      }\n    });\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\nexport function setBundleIdentifier(projectRoot: string, bundleIdentifier: string) {\n  // Get all pbx projects\n  const pbxprojPaths = globSync('ios/*/project.pbxproj', { absolute: true, cwd: projectRoot });\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier);\n  }\n}\n"],"file":"../../detach/IosSetBundleIdentifier.js","sourceRoot":"/@expo/xdl@57.9.17/src"}