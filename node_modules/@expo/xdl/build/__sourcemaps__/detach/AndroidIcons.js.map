{"version":3,"sources":["detach/AndroidIcons.ts"],"names":["iconScales","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","_regexFileInResSubfoldersAsync","oldText","newText","resDirPath","folderPrefix","folderSuffix","fileName","Promise","all","Object","keys","map","key","path","join","_hasShownResizeErrorWindowsLinux","_resizeIconsAsync","context","resPath","prefix","mdpiSize","filename","url","isDetached","baseImagePath","data","projectPath","e","Error","entries","iconScale","subdirectoryName","destinationPath","stdio","cwd","console","warn","dims","width","height","createAndWriteIconsToPathAsync","manifest","config","iconUrl","android","notificationIconUrl","notification","icon","iconBackgroundUrl","iconBackgroundColor","iconForegroundUrl","adaptiveIcon","backgroundColor","foregroundImage","backgroundImage","foregroundImageUrl","backgroundImageUrl","absolute","forEach","filePath","fs","removeSync","dot","rmdirSync"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { getImageDimensionsAsync, resizeImageAsync } from '../tools/ImageUtils';\nimport {\n  regexFileAsync,\n  saveImageToPathAsync,\n  saveUrlToPathAsync,\n  spawnAsyncThrowError,\n} from './ExponentTools';\nimport { AnyStandaloneContext, StandaloneContextDataUser } from './StandaloneContext';\n\nconst iconScales = {\n  mdpi: 1,\n  hdpi: 1.5,\n  xhdpi: 2,\n  xxhdpi: 3,\n  xxxhdpi: 4,\n};\n\nasync function _regexFileInResSubfoldersAsync(\n  oldText: string,\n  newText: string,\n  resDirPath: string,\n  folderPrefix: string,\n  folderSuffix: string,\n  fileName: string\n) {\n  return Promise.all(\n    Object.keys(iconScales).map(async key => {\n      return regexFileAsync(\n        oldText,\n        newText,\n        path.join(resDirPath, `${folderPrefix}${key}${folderSuffix}`, fileName)\n      );\n    })\n  );\n}\n\nlet _hasShownResizeErrorWindowsLinux = false;\n\nasync function _resizeIconsAsync(\n  context: AnyStandaloneContext,\n  resPath: string,\n  prefix: string,\n  mdpiSize: number,\n  filename: string,\n  url: string,\n  isDetached: boolean\n) {\n  let baseImagePath = path.join(resPath, filename);\n\n  try {\n    if (isDetached) {\n      const data = context.data as StandaloneContextDataUser;\n      await saveImageToPathAsync(data.projectPath, url, baseImagePath);\n    } else {\n      await saveUrlToPathAsync(url, baseImagePath);\n    }\n  } catch (e) {\n    throw new Error(`Failed to save icon file to disk. (${e})`);\n  }\n\n  await Promise.all(\n    Object.entries(iconScales).map(async ([folderSuffix, iconScale]) => {\n      // adaptive icons (mdpiSize 108) must be placed in a -v26 folder\n      let subdirectoryName = `${prefix}${folderSuffix}${mdpiSize === 108 ? '-v26' : ''}`;\n      let destinationPath = path.join(resPath, subdirectoryName);\n      await spawnAsyncThrowError('/bin/cp', [baseImagePath, filename], {\n        stdio: 'inherit',\n        cwd: destinationPath,\n      });\n\n      try {\n        await resizeImageAsync(mdpiSize * iconScale, filename, destinationPath);\n      } catch (e) {\n        // Turtle should be able to resize images, so if it fails we want it to throw.\n        // However, `sips` does not exist on Windows or Linux machines, so we expect\n        // resizing images to error on these OSes and want the detach process to continue anyway.\n        if (isDetached) {\n          if (!_hasShownResizeErrorWindowsLinux) {\n            console.warn(\n              'Failed to resize app icons. Your full size icon will be copied to all android/app/src/main/res directories. For best quality, we recommend providing downscaled versions.'\n            );\n            _hasShownResizeErrorWindowsLinux = true;\n          }\n        } else {\n          throw new Error(`Failed to resize image: ${filename}. ${e}`);\n        }\n      }\n\n      // reject non-square icons\n      const dims = await getImageDimensionsAsync(destinationPath, filename);\n      if (!dims) {\n        // Again, only throw this error on Turtle -- we expect that this will fail\n        // for some detach users but we don't want this to stop the whole process.\n        if (!isDetached) {\n          throw new Error(`Unable to read the dimensions of ${filename}`);\n        }\n      } else if (dims.width !== dims.height) {\n        throw new Error(`Android icons must be square, the dimensions of ${filename} are ${dims}`);\n      }\n    })\n  );\n\n  await spawnAsyncThrowError('/bin/rm', [baseImagePath]);\n}\n\nasync function createAndWriteIconsToPathAsync(\n  context: AnyStandaloneContext,\n  resPath: string,\n  isDetached: boolean\n) {\n  let manifest = context.config; // manifest or app.json\n  let iconUrl =\n    manifest.android && manifest.android.iconUrl ? manifest.android.iconUrl : manifest.iconUrl;\n  let notificationIconUrl = manifest.notification ? manifest.notification.iconUrl : null;\n\n  if (isDetached) {\n    // manifest is actually just app.json in this case, so iconUrl fields don't exist\n    iconUrl = manifest.android && manifest.android.icon ? manifest.android.icon : manifest.icon;\n    notificationIconUrl = manifest.notification ? manifest.notification.icon : null;\n  }\n\n  let iconBackgroundUrl;\n  let iconBackgroundColor;\n  let iconForegroundUrl;\n  if (manifest.android && manifest.android.adaptiveIcon) {\n    iconBackgroundColor = manifest.android.adaptiveIcon.backgroundColor;\n    if (isDetached) {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImage;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImage;\n    } else {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImageUrl;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImageUrl;\n    }\n  }\n\n  if (iconUrl || iconForegroundUrl) {\n    // Android 7 and below icon\n    if (iconUrl) {\n      globSync('**/ic_launcher.png', {\n        cwd: resPath,\n        absolute: true,\n      }).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        48,\n        'ic_launcher.png',\n        iconUrl,\n        isDetached\n      );\n    }\n\n    // Adaptive icon foreground image\n    if (iconForegroundUrl) {\n      globSync('**/ic_foreground.png', {\n        cwd: resPath,\n        absolute: true,\n      }).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        108,\n        'ic_foreground.png',\n        iconForegroundUrl,\n        isDetached\n      );\n    } else {\n      // the OS's default method of coercing normal app icons to adaptive\n      // makes them look quite different from using an actual adaptive icon (with xml)\n      // so we need to support falling back to the old version on Android 8\n      globSync('**/mipmap-*-v26/*', {\n        cwd: resPath,\n        absolute: true,\n        dot: true,\n      }).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      try {\n        globSync('**/mipmap-*-v26', {\n          cwd: resPath,\n          absolute: true,\n        }).forEach(filePath => {\n          fs.rmdirSync(filePath);\n        });\n      } catch (e) {\n        // we don't want the entire detach script to fail if node\n        // can't remove the directories for whatever reason.\n        // people can remove the directories themselves if they need\n        // so just fail silently here\n      }\n    }\n  }\n\n  // Adaptive icon background image or color\n  if (iconBackgroundUrl) {\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'mipmap-',\n      108,\n      'ic_background.png',\n      iconBackgroundUrl,\n      isDetached\n    );\n\n    await _regexFileInResSubfoldersAsync(\n      '@color/iconBackground',\n      '@mipmap/ic_background',\n      resPath,\n      'mipmap-',\n      '-v26',\n      'ic_launcher.xml'\n    );\n  } else if (iconBackgroundColor) {\n    await regexFileAsync(\n      '\"iconBackground\">#FFFFFF',\n      `\"iconBackground\">${iconBackgroundColor}`,\n      path.join(resPath, 'values', 'colors.xml')\n    );\n  }\n\n  // Notification icon\n  if (notificationIconUrl) {\n    globSync('**/shell_notification_icon.png', {\n      cwd: resPath,\n      absolute: true,\n    }).forEach(filePath => {\n      fs.removeSync(filePath);\n    });\n\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'drawable-',\n      24,\n      'shell_notification_icon.png',\n      notificationIconUrl,\n      isDetached\n    );\n  }\n}\n\nexport { createAndWriteIconsToPathAsync };\n"],"file":"../../detach/AndroidIcons.js","sourceRoot":"/@expo/xdl@57.9.17/src"}