{"version":3,"sources":["detach/AssetBundle.ts"],"names":["EXPO_DOMAINS","DEFAULT_CDN_HOST","ASSETS_DIR_DEFAULT_URL","bundleAsync","context","assets","dest","exportUrl","fs","ensureDir","urlResolver","createAssetsUrlResolver","asset","downloadAssetAsync","concurrency","extensionIndex","lastIndexOf","prefixLength","length","hash","substring","console","log","path","join","retries","assetsDirUrl","published","url","assetUrlOverride","config","publishedUrl","hostname","parse","Error","maybeExpoDomain","split","slice","includes","resolve"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport url from 'url';\n\nimport pMap from 'p-map';\nimport pRetry from 'p-retry';\nimport urlJoin from 'url-join';\n\nimport { AnyStandaloneContext } from './StandaloneContext';\nimport { saveUrlToPathAsync } from './ExponentTools';\n\nconst EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];\nexport const DEFAULT_CDN_HOST = 'https://d1wp6m56sqw74a.cloudfront.net';\nexport const ASSETS_DIR_DEFAULT_URL = `${DEFAULT_CDN_HOST}/~assets`;\n\ntype UrlResolver = (hash: string) => string;\n\nexport async function bundleAsync(\n  context: any,\n  assets: string[],\n  dest: string,\n  exportUrl?: string | null\n) {\n  if (!assets) {\n    return;\n  }\n\n  await fs.ensureDir(dest);\n\n  const urlResolver = createAssetsUrlResolver(context, exportUrl);\n  await pMap(assets, asset => downloadAssetAsync(urlResolver, dest, asset), { concurrency: 5 });\n}\n\nasync function downloadAssetAsync(urlResolver: UrlResolver, dest: string, asset: string) {\n  const extensionIndex = asset.lastIndexOf('.');\n  const prefixLength = 'asset_'.length;\n  const hash =\n    extensionIndex >= 0\n      ? asset.substring(prefixLength, extensionIndex)\n      : asset.substring(prefixLength);\n  console.log(urlResolver(hash));\n  await pRetry(() => saveUrlToPathAsync(urlResolver(hash), path.join(dest, asset)), { retries: 3 });\n}\n\nfunction createAssetsUrlResolver(\n  context: AnyStandaloneContext,\n  exportUrl?: string | null\n): UrlResolver {\n  let assetsDirUrl = exportUrl ? `${exportUrl}/assets` : ASSETS_DIR_DEFAULT_URL;\n\n  if (context && context.published && context.published.url) {\n    const { assetUrlOverride = './assets' } = context.config;\n    const publishedUrl = context.published.url;\n    const { hostname } = url.parse(publishedUrl);\n    if (hostname == null) {\n      throw new Error(\n        `Could not resolve asset URLs relative to \"${publishedUrl}\". Published URL must be an absolute URL.`\n      );\n    }\n    const maybeExpoDomain = hostname.split('.').slice(-2).join('.');\n    if (!EXPO_DOMAINS.includes(maybeExpoDomain)) {\n      assetsDirUrl = url.resolve(publishedUrl, assetUrlOverride);\n    }\n  }\n\n  return hash => urlJoin(assetsDirUrl, hash);\n}\n"],"file":"../../detach/AssetBundle.js","sourceRoot":"/@expo/xdl@57.9.17/src"}