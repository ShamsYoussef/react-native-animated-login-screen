{"version":3,"sources":["detach/Detach.js"],"names":["SERVICE_CONTEXT_PROJECT_NAME","async","yesnoAsync","message","ok","await","inquirer","prompt","type","name","detachAsync","projectRoot","options","let","originalLogger","logger","loggerObj","configure","trace","verbose","console","bind","debug","info","warn","error","fatal","_detachAsync","user","UserManager","ensureLoggedInAsync","Error","username","configName","configPath","configNamespace","findConfigFile","exp","getConfig","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","XDLError","process","platform","response","sdkVersion","Versions","gteSdkVersion","versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","isDetached","detach","detachedUUID","uuid","v4","replace","generatedScheme","scheme","expoDirectory","fs","mkdirpSync","context","StandaloneContext","createUserContext","isIosSupported","force","ios","bundleIdentifier","iosBundleIdentifier","validate","value","test","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","android","package","androidPackage","androidDirectory","rimraf","sync","detachAndroidAsync","AndroidShellApp","config","writeFile","JSON","stringify","packagesToInstall","nodeModulesPath","resolve","expoReactNativeTag","push","spawnAsync","cwd","expokitNpmPackage","packagesToInstallWhenEjecting","isPlainObject","Object","keys","forEach","packageName","length","installPackagesAsync","packageManager","createDetachedAsync","IosNSBundle","configureAsync","expoViewUrl","androidProjectDirectory","data","projectPath","tmpExpoDirectory","copyInitialShellAppFilesAsync","Api","downloadAsync","extract","runShellAppModificationsAsync","rimrafDontThrow","ensureBuildConstantsExistsIOSAsync","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","_getIosExpoKitVersionThrowErrorAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","readFile","expoKitVersionRegex","match","exec","e","readNullableConfigJsonAsync","projectDir","_","prepareDetachedBuildIosAsync","args","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","expoRootDir","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","createServiceContext","supportingDirectory","getPaths","prodApiKeys","_readDefaultApiKeysAsync","expoSourcePath","skipSDKVersionRequirement","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","API_SERVER_ENDPOINT","ENVIRONMENT","DEFAULT_API_KEYS","TEMPORARY_SDK_VERSION","jsonFilePath","allKeys","JsonFile","readAsync","validKeys","key","hasOwnProperty","includes","podsDirectory","rnPodDirectory","rnFilesToDelete","globSync","absolute","i","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","prepareDetachedBuildAsync","expoBuildConstantsMatches","expoBuildConstants","regexFileAsync","bundleAssetsAsync","bundledManifestPath","EmbeddedAssets","getEmbeddedManifestPath","manifest","parse","ex","AssetBundle","bundleAsync","bundledAssets","dest","getExportUrl","bundleUrl","DEFAULT_CDN_HOST","bundleUrlParts","split","slice"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\nimport process from 'process';\nimport rimraf from 'rimraf';\nimport { sync as globSync } from 'glob';\nimport uuid from 'uuid';\nimport inquirer from 'inquirer';\nimport spawnAsync from '@expo/spawn-async';\nimport { findConfigFile, getConfig } from '@expo/config';\nimport isPlainObject from 'lodash/isPlainObject';\n\nimport { isDirectory, regexFileAsync, rimrafDontThrow } from './ExponentTools';\n\nimport * as AssetBundle from './AssetBundle';\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport * as AndroidShellApp from './AndroidShellApp';\n\nimport Api from '../Api';\nimport * as EmbeddedAssets from '../EmbeddedAssets';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Versions from '../Versions';\nimport installPackagesAsync from './installPackagesAsync';\nimport logger from './Logger';\n\nconst SERVICE_CONTEXT_PROJECT_NAME = 'exponent-view-template';\n\nasync function yesnoAsync(message) {\n  const { ok } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'ok',\n      message,\n    },\n  ]);\n  return ok;\n}\n\nexport async function detachAsync(projectRoot, options = {}) {\n  let originalLogger = logger.loggerObj;\n  logger.configure({\n    trace: options.verbose ? console.trace.bind(console) : () => {},\n    debug: options.verbose ? console.debug.bind(console) : () => {},\n    info: options.verbose ? console.info.bind(console) : () => {},\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    fatal: console.error.bind(console),\n  });\n  try {\n    return await _detachAsync(projectRoot, options);\n  } finally {\n    logger.configure(originalLogger);\n  }\n}\n\nasync function _detachAsync(projectRoot, options) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  const { configName, configPath, configNamespace } = findConfigFile(projectRoot);\n  let { exp } = getConfig(projectRoot);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      'DIRECTORY_ALREADY_EXISTS',\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      logger.info('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  logger.info('Validating project manifest...');\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  if (!Versions.gteSdkVersion(exp, '25.0.0')) {\n    throw new Error(\n      `The app must be updated to SDK 25.0.0 or newer to be compatible with this tool.`\n    );\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    (!sdkVersionConfig.androidExpoViewUrl && !sdkVersionConfig.iosExpoViewUrl)\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      logger.warn(\n        `Detaching is not supported for SDK ${exp.sdkVersion}; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  let detachedUUID = uuid.v4().replace(/-/g, '');\n  let generatedScheme = `exp${detachedUUID}`;\n\n  if (!exp.detach.scheme && !Versions.gteSdkVersion(exp, '27.0.0')) {\n    // set this for legacy purposes\n    exp.detach.scheme = generatedScheme;\n  }\n\n  if (!exp.scheme) {\n    logger.info(\n      `You have not specified a custom scheme for deep linking. A default value of ${generatedScheme} will be used. You can change this later by following the instructions in this guide: https://docs.expo.io/workflow/linking/`\n    );\n    exp.scheme = generatedScheme;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  fs.mkdirpSync(expoDirectory);\n  const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      logger.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      logger.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n\n  if (!hasIosDirectory && isIosSupported && sdkVersionConfig.iosExpoViewUrl) {\n    if (!exp.ios) {\n      exp.ios = {};\n    }\n    if (!exp.ios.bundleIdentifier) {\n      logger.info(\n        `You'll need to specify an iOS bundle identifier. See: https://docs.expo.io/workflow/configuration/#ios`\n      );\n      const { iosBundleIdentifier } = await inquirer.prompt([\n        {\n          name: 'iosBundleIdentifier',\n          message: 'What would you like your iOS bundle identifier to be?',\n          validate: value => /^[a-zA-Z][a-zA-Z0-9\\-.]+$/.test(value),\n        },\n      ]);\n      exp.ios.bundleIdentifier = iosBundleIdentifier;\n    }\n\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory && sdkVersionConfig.androidExpoViewUrl) {\n    if (!exp.android) {\n      exp.android = {};\n    }\n    if (!exp.android.package) {\n      logger.info(\n        `You'll need to specify an Android package name. See: https://docs.expo.io/workflow/configuration/#android`\n      );\n      const { androidPackage } = await inquirer.prompt([\n        {\n          name: 'androidPackage',\n          message: 'What would you like your Android package name to be?',\n          validate: value =>\n            /^[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(value)\n              ? true\n              : \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\",\n        },\n      ]);\n      exp.android.package = androidPackage;\n    }\n\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    fs.mkdirpSync(androidDirectory);\n    await detachAndroidAsync(context, sdkVersionConfig.androidExpoViewUrl);\n    exp = AndroidShellApp.addDetachedConfigToExp(exp, context);\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  logger.info('Writing ExpoKit configuration...');\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const config = configNamespace ? { [configNamespace]: exp } : exp;\n  await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n\n  const packagesToInstall = [];\n  const nodeModulesPath = exp.nodeModulesPath\n    ? path.resolve(projectRoot, exp.nodeModulesPath)\n    : projectRoot;\n\n  if (sdkVersionConfig && sdkVersionConfig.expoReactNativeTag) {\n    packagesToInstall.push(\n      `react-native@https://github.com/expo/react-native/archive/${sdkVersionConfig.expoReactNativeTag}.tar.gz`\n    );\n  } else if (process.env.EXPO_VIEW_DIR) {\n    // ignore, using test directory\n  } else {\n    throw new Error(`Expo's fork of react-native does not support this SDK version.`);\n  }\n\n  // Add expokitNpmPackage if it is supported. Was added before SDK 29.\n  if (process.env.EXPO_VIEW_DIR) {\n    logger.info(`Linking 'expokit' package...`);\n    await spawnAsync('yarn', ['link'], {\n      cwd: path.join(process.env.EXPO_VIEW_DIR, 'expokit-npm-package'),\n    });\n    await spawnAsync('yarn', ['link', 'expokit'], {\n      cwd: nodeModulesPath,\n    });\n  } else if (sdkVersionConfig.expokitNpmPackage) {\n    packagesToInstall.push(sdkVersionConfig.expokitNpmPackage);\n  }\n\n  if (sdkVersionConfig) {\n    const { packagesToInstallWhenEjecting } = sdkVersionConfig;\n    if (isPlainObject(packagesToInstallWhenEjecting)) {\n      Object.keys(packagesToInstallWhenEjecting).forEach(packageName => {\n        packagesToInstall.push(`${packageName}@${packagesToInstallWhenEjecting[packageName]}`);\n      });\n    }\n  }\n\n  if (packagesToInstall.length) {\n    await installPackagesAsync(projectRoot, packagesToInstall, {\n      packageManager: options.packageManager,\n    });\n  }\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  logger.info('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  logger.info(`iOS detach is complete!`);\n}\n\nasync function detachAndroidAsync(context, expoViewUrl) {\n  if (context.type !== 'user') {\n    throw new Error(`detachAndroidAsync only supports user standalone contexts`);\n  }\n\n  logger.info('Moving Android project files...');\n  let androidProjectDirectory = path.join(context.data.projectPath, 'android');\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      path.join(process.env.EXPO_VIEW_DIR, 'android'),\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  } else {\n    tmpExpoDirectory = path.join(context.data.projectPath, 'temp-android-directory');\n    fs.mkdirpSync(tmpExpoDirectory);\n    logger.info('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      tmpExpoDirectory,\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  }\n\n  logger.info('Updating Android app...');\n  await AndroidShellApp.runShellAppModificationsAsync(context, context.data.exp.sdkVersion);\n\n  // Clean up\n  logger.info('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  logger.info('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9.]+)\\)/gi;\n    let match = expoKitVersionRegex.exec(podfileLock);\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function readNullableConfigJsonAsync(projectDir) {\n  try {\n    return getConfig(projectDir);\n  } catch (_) {\n    return null;\n  }\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir, args) {\n  const config = await readNullableConfigJsonAsync(projectDir);\n  if (config && config.exp.name !== SERVICE_CONTEXT_PROJECT_NAME) {\n    return prepareDetachedUserContextIosAsync(projectDir, config.exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir, args) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const expoRootDir = path.join(projectDir, '..', '..');\n  const workspaceSourcePath = path.join(projectDir, 'ios');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  const context = StandaloneContext.createServiceContext(\n    expoRootDir,\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  const { exp } = getConfig(expoRootDir, { skipSDKVersionRequirement: true });\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    if (exp && exp.sdkVersion) {\n      constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath) {\n  if (fs.existsSync(jsonFilePath)) {\n    let keys = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir, exp, args) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = globSync('**/*.@(js|json)', {\n      absolute: true,\n      cwd: rnPodDirectory,\n    });\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      if (exp.sdkVersion) {\n        constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir, args) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    let expoBuildConstantsMatches = globSync('android/**/DetachBuildConstants.java', {\n      absolute: true,\n      cwd: projectDir,\n    });\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        /DEVELOPMENT_URL = \"[^\"]*\";/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\n// args.dest: string,\n// This is the path where assets will be copied to. It should be\n// `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n// (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n// and `$buildDir/intermediates/assets/$targetPath` on Android (see\n// `android/app/expo.gradle` for an example).\nexport async function bundleAssetsAsync(projectDir, args) {\n  const options = await readNullableConfigJsonAsync(projectDir);\n  if (!options || options.exp.name === SERVICE_CONTEXT_PROJECT_NAME) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  const { exp } = options;\n  let bundledManifestPath = EmbeddedAssets.getEmbeddedManifestPath(args.platform, projectDir, exp);\n  if (!bundledManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${args.platform}.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${ex.message}`\n    );\n  }\n  if (!manifest || !Object.keys(manifest).length) {\n    throw new Error(`The manifest at '${bundledManifestPath}' was empty or invalid.`);\n  }\n\n  await AssetBundle.bundleAsync(null, manifest.bundledAssets, args.dest, getExportUrl(manifest));\n}\n\n/**\n * This function extracts the exported public URL that is set in the manifest\n * when the developer runs `expo export --public-url x`. We use this to ensure\n * that we fetch the resources from the appropriate place when doing builds\n * against self-hosted apps.\n */\nfunction getExportUrl(manifest) {\n  const { bundleUrl } = manifest;\n  if (bundleUrl.includes(AssetBundle.DEFAULT_CDN_HOST)) {\n    return null;\n  }\n\n  try {\n    const bundleUrlParts = bundleUrl.split('/');\n    return bundleUrlParts.slice(0, bundleUrlParts.length - 2).join('/');\n  } catch (e) {\n    throw Error(\n      `Expected bundleUrl to be of the format https://domain/bundles/bundle-hash-id, ${bundleUrl} does not follow this format.`\n    );\n  }\n}\n"],"sourceRoot":"/@expo/xdl@57.9.17/src"}