{"version":3,"sources":["detach/installPackagesAsync.ts"],"names":["installPackagesAsync","projectDir","packages","options","packageManager","packageLockJsonExists","fs","pathExists","path","join","yarnExists","yarnExistsAsync","logger","info","cwd","stdio","version","stdout","trim","semver","valid","e"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,eAAeA,oBAAf,CACbC,UADa,EAEbC,QAFa,EAGbC,OAAY,GAAG,EAHF,EAIE;AACf,MAAIC,cAAc,GAAG,KAArB;;AACA,MAAID,OAAO,CAACC,cAAZ,EAA4B;AAC1BA,IAAAA,cAAc,GAAGD,OAAO,CAACC,cAAzB;AACD,GAFD,MAEO;AACL,UAAMC,qBAA8B,GAAG,MAAMC,mBAAGC,UAAH,CAC3CC,gBAAKC,IAAL,CAAUR,UAAV,EAAsB,mBAAtB,CAD2C,CAA7C;AAGA,UAAMS,UAAU,GAAG,MAAMC,eAAe,EAAxC;AACAP,IAAAA,cAAc,GAAGM,UAAU,IAAI,CAACL,qBAAf,GAAuC,MAAvC,GAAgD,KAAjE;AACD;;AAED,MAAID,cAAc,KAAK,MAAvB,EAA+B;AAC7BQ,sBAAOC,IAAP,CAAa,uCAAb;;AACA,UAAM,2BAAW,SAAX,EAAsB,CAAC,KAAD,EAAQ,UAAR,EAAoB,GAAGX,QAAvB,CAAtB,EAAwD;AAC5DY,MAAAA,GAAG,EAAEb,UADuD;AAE5Dc,MAAAA,KAAK,EAAE;AAFqD,KAAxD,CAAN;AAID,GAND,MAMO;AACLH,sBAAOC,IAAP,CAAa,sCAAb;;AACA,QAAI,EAAE,MAAMP,mBAAGC,UAAH,CAAcC,gBAAKC,IAAL,CAAUR,UAAV,EAAsB,cAAtB,CAAd,CAAR,CAAJ,EAAmE;AACjE,YAAM,2BAAW,KAAX,EAAkB,CAAC,SAAD,EAAY,YAAZ,EAA0B,OAA1B,CAAlB,EAAsD;AAC1Da,QAAAA,GAAG,EAAEb,UADqD;AAE1Dc,QAAAA,KAAK,EAAE;AAFmD,OAAtD,CAAN;AAID;;AACD,UAAM,2BAAW,KAAX,EAAkB,CAAC,SAAD,EAAY,QAAZ,EAAsB,YAAtB,EAAoC,OAApC,EAA6C,GAAGb,QAAhD,CAAlB,EAA6E;AACjFY,MAAAA,GAAG,EAAEb,UAD4E;AAEjFc,MAAAA,KAAK,EAAE;AAF0E,KAA7E,CAAN;AAID;AACF;;AAED,eAAeJ,eAAf,GAAiC;AAC/B,MAAI;AACF,QAAIK,OAAO,GAAG,CAAC,MAAM,2BAAW,SAAX,EAAsB,CAAC,WAAD,CAAtB,CAAP,EAA6CC,MAA7C,CAAoDC,IAApD,EAAd;AACA,WAAO,CAAC,CAACC,kBAAOC,KAAP,CAAaJ,OAAb,CAAT;AACD,GAHD,CAGE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport logger from './Logger';\n\nexport default async function installPackagesAsync(\n  projectDir: string,\n  packages: string[],\n  options: any = {}\n): Promise<void> {\n  let packageManager = 'npm';\n  if (options.packageManager) {\n    packageManager = options.packageManager;\n  } else {\n    const packageLockJsonExists: boolean = await fs.pathExists(\n      path.join(projectDir, 'package-lock.json')\n    );\n    const yarnExists = await yarnExistsAsync();\n    packageManager = yarnExists && !packageLockJsonExists ? 'yarn' : 'npm';\n  }\n\n  if (packageManager === 'yarn') {\n    logger.info(`Installing dependencies using Yarn...`);\n    await spawnAsync('yarnpkg', ['add', '--silent', ...packages], {\n      cwd: projectDir,\n      stdio: 'inherit',\n    });\n  } else {\n    logger.info(`Installing dependencies using npm...`);\n    if (!(await fs.pathExists(path.join(projectDir, 'node_modules')))) {\n      await spawnAsync('npm', ['install', '--loglevel', 'error'], {\n        cwd: projectDir,\n        stdio: 'inherit',\n      });\n    }\n    await spawnAsync('npm', ['install', '--save', '--loglevel', 'error', ...packages], {\n      cwd: projectDir,\n      stdio: 'inherit',\n    });\n  }\n}\n\nasync function yarnExistsAsync() {\n  try {\n    let version = (await spawnAsync('yarnpkg', ['--version'])).stdout.trim();\n    return !!semver.valid(version);\n  } catch (e) {\n    return false;\n  }\n}\n"],"file":"../../detach/installPackagesAsync.js","sourceRoot":"/@expo/xdl@57.9.17/src"}