{"version":3,"sources":["detach/IosKeychain.ts"],"names":["createKeychain","appUUID","saveResultToFile","BUILD_PHASE","logger","_logger","withFields","buildPhase","spawn","name","password","path","getKeychainPath","info","runFastlane","stdoutOnly","keychainInfo","keychainInfoPath","getKeychainInfoPath","fs","writeFile","JSON","stringify","deleteKeychain","remove","importIntoKeychain","keychainPath","certPath","certPassword","args","push","cleanUpKeychains","stdout","keychainsListRaw","stdio","allKeychainsList","match","map","i","slice","length","turtleKeychainsList","shouldCleanSearchList","err","warn","newSearchList","error","Error","fastlaneArgs","fastlaneEnvVars","FASTLANE_DISABLE_COLORS","FASTLANE_SKIP_UPDATE_CHECK","CI","LC_ALL","env","process"],"mappings":"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","sourcesContent":["import uuidv1 from 'uuid/v1';\nimport difference from 'lodash/difference';\nimport fs from 'fs-extra';\n\nimport _logger from './Logger';\nimport { createSpawner, spawnAsyncThrowError } from './ExponentTools';\n\nexport async function createKeychain(appUUID: string, saveResultToFile = true) {\n  const BUILD_PHASE = 'creating keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE, logger);\n\n  const name = uuidv1();\n  const password = uuidv1();\n  const path = getKeychainPath(name);\n\n  logger.info('creating new keychain...');\n  await runFastlane([\n    'run',\n    'create_keychain',\n    `path:${path}`,\n    `password:${password}`,\n    'unlock:true',\n    'timeout:360000',\n  ]);\n  await spawn('security', 'show-keychain-info', path, { stdoutOnly: true });\n\n  logger.info('created new keychain');\n  const keychainInfo = {\n    name,\n    path,\n    password,\n  };\n\n  if (saveResultToFile) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.writeFile(keychainInfoPath, JSON.stringify(keychainInfo));\n    logger.info('saved keychain info to %s', keychainInfoPath);\n  }\n\n  return keychainInfo;\n}\n\nexport async function deleteKeychain({ path, appUUID }: { path: string; appUUID?: string }) {\n  const BUILD_PHASE = 'deleting keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n\n  logger.info('deleting keychain...');\n  await runFastlane(['run', 'delete_keychain', `keychain_path:${path}`]);\n\n  if (appUUID) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.remove(keychainInfoPath);\n  }\n}\n\nexport async function importIntoKeychain({\n  keychainPath,\n  certPath,\n  certPassword,\n}: {\n  keychainPath: string;\n  certPath: string;\n  certPassword?: string;\n}) {\n  const BUILD_PHASE = 'importing certificate into keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE);\n\n  logger.info('importing certificate into keychain...');\n  const args = ['import', certPath, '-A', '-k', keychainPath, '-f', 'pkcs12'];\n  if (certPassword) {\n    logger.info('certificate has password');\n    args.push('-P', certPassword);\n  } else {\n    logger.info(\"certificate doesn't have password\");\n  }\n  await spawn('security', ...args);\n  logger.info('imported certificate into keychain');\n}\n\nexport async function cleanUpKeychains() {\n  try {\n    _logger.info('Cleaning up keychains...');\n    const { stdout: keychainsListRaw } = await spawnAsyncThrowError(\n      'security',\n      ['list-keychains'],\n      { stdio: 'pipe' }\n    );\n    const allKeychainsList = (keychainsListRaw.match(/\"(.*)\"/g) || []).map(i =>\n      i.slice(1, i.length - 1)\n    );\n    const turtleKeychainsList = keychainsListRaw.match(/\\/private\\/tmp\\/xdl\\/(.*).keychain/g);\n    let shouldCleanSearchList = false;\n    if (turtleKeychainsList) {\n      for (const keychainPath of turtleKeychainsList) {\n        try {\n          await deleteKeychain({ path: keychainPath });\n        } catch (err) {\n          _logger.warn(`Failed to delete keychain: ${keychainPath}`, err);\n          shouldCleanSearchList = true;\n        }\n      }\n\n      if (shouldCleanSearchList) {\n        const newSearchList = difference(allKeychainsList, turtleKeychainsList);\n        await spawnAsyncThrowError('security', ['list-keychains', '-s', ...newSearchList], {\n          stdio: 'pipe',\n        });\n      }\n    }\n    _logger.info('Cleaned up keychains');\n  } catch (err) {\n    _logger.error(err);\n    throw new Error('Failed to clean up keychains');\n  }\n}\n\nasync function runFastlane(fastlaneArgs: string[]) {\n  const fastlaneEnvVars = {\n    FASTLANE_DISABLE_COLORS: '1',\n    FASTLANE_SKIP_UPDATE_CHECK: '1',\n    CI: '1',\n    LC_ALL: 'en_US.UTF-8',\n  };\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: { ...process.env, ...fastlaneEnvVars },\n  });\n}\n\nconst getKeychainPath = (name: string) => `/private/tmp/xdl/${name}.keychain`;\nconst getKeychainInfoPath = (appUUID: string) => `/private/tmp/${appUUID}-keychain-info.json`;\n"],"file":"../../detach/IosKeychain.js","sourceRoot":"/@expo/xdl@57.9.17/src"}