{"version":3,"sources":["detach/PKCS12Utils.ts"],"names":["getP12CertFingerprint","p12Buffer","passwordRaw","certData","_getCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","getCertData","_processSerialNumber","maybeSerialNumber","replace","Buffer","isBuffer","toString","Error","password","String","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","getBags","bagType","cert"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,qBAAT,CACLC,SADK,EAELC,WAFK,EAGG;AACR,QAAMC,QAAQ,GAAGC,YAAY,CAACH,SAAD,EAAYC,WAAZ,CAA7B;;AACA,QAAMG,QAAQ,GAAGC,qBAAMC,GAAN,CAAUC,iBAAV,CAA4BL,QAA5B,CAAjB;;AACA,QAAMM,OAAO,GAAGH,qBAAMI,IAAN,CAAWC,KAAX,CAAiBN,QAAjB,EAA2BO,QAA3B,EAAhB;;AACA,SAAON,qBAAMO,EAAN,CAASC,IAAT,CAAcC,MAAd,GAAuBC,MAAvB,CAA8BP,OAA9B,EAAuCQ,MAAvC,GAAgDC,KAAhD,GAAwDC,WAAxD,EAAP;AACD;;AAEM,SAASC,uBAAT,CACLnB,SADK,EAELC,WAFK,EAGU;AACf,QAAM;AAAEmB,IAAAA;AAAF,MAAmBC,WAAW,CAACrB,SAAD,EAAYC,WAAZ,CAApC;AACA,SAAOmB,YAAP;AACD;;AAED,SAASE,oBAAT,CAA8BC,iBAA9B,EAA4E;AAC1E,SAAOA,iBAAiB,GAAGA,iBAAiB,CAACC,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,EAAqCN,WAArC,EAAH,GAAwD,IAAhF;AACD;;AAEM,SAASG,WAAT,CAAqBrB,SAArB,EAAiDC,WAAjD,EAA6E;AAClF,QAAMC,QAAQ,GAAGC,YAAY,CAACH,SAAD,EAAYC,WAAZ,CAA7B;;AACA,SAAO,EACL,GAAGC,QADE;AAELkB,IAAAA,YAAY,EAAEE,oBAAoB,CAACpB,QAAQ,CAACkB,YAAV;AAF7B,GAAP;AAID;;AAED,SAASjB,YAAT,CAAsBH,SAAtB,EAAkDC,WAAlD,EAA8E;AAAA;;AAC5E,MAAIwB,MAAM,CAACC,QAAP,CAAgB1B,SAAhB,CAAJ,EAAgC;AAC9BA,IAAAA,SAAS,GAAGA,SAAS,CAAC2B,QAAV,CAAmB,QAAnB,CAAZ;AACD,GAFD,MAEO,IAAI,OAAO3B,SAAP,KAAqB,QAAzB,EAAmC;AACxC,UAAM,IAAI4B,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,QAAMC,QAAQ,GAAGC,MAAM,CAAC7B,WAAW,IAAI,EAAhB,CAAvB;;AACA,QAAM8B,MAAM,GAAG1B,qBAAM2B,IAAN,CAAWC,QAAX,CAAoBjC,SAApB,CAAf;;AACA,QAAMkC,OAAO,GAAG7B,qBAAMI,IAAN,CAAW0B,OAAX,CAAmBJ,MAAnB,CAAhB;;AACA,QAAMK,GAAG,GAAG/B,qBAAMgC,MAAN,CAAaC,cAAb,CAA4BJ,OAA5B,EAAqCL,QAArC,CAAZ;;AACA,QAAMU,WAAW,GAAGlC,qBAAMC,GAAN,CAAUkC,IAAV,CAAeC,OAAnC;;AACA,QAAMvC,QAAQ,mBAAGkC,GAAG,CAACM,OAAJ,CAAY;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAZ,CAAH,0EAAG,aAAwCA,WAAxC,CAAH,oFAAG,sBAAuD,CAAvD,CAAH,2DAAG,uBAA2DK,IAA5E;;AACA,MAAI,CAAC1C,QAAL,EAAe;AACb,UAAM,IAAI0B,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,SAAO1B,QAAP;AACD","sourcesContent":["import forge from 'node-forge';\n\nexport function getP12CertFingerprint(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1.create().update(certDer).digest().toHex().toUpperCase();\n}\n\nexport function findP12CertSerialNumber(\n  p12Buffer: Buffer | string,\n  passwordRaw: string | null\n): string | null {\n  const { serialNumber } = getCertData(p12Buffer, passwordRaw);\n  return serialNumber;\n}\n\nfunction _processSerialNumber(maybeSerialNumber: string | null | undefined) {\n  return maybeSerialNumber ? maybeSerialNumber.replace(/^0+/, '').toUpperCase() : null;\n}\n\nexport function getCertData(p12Buffer: Buffer | string, passwordRaw: string | null) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  return {\n    ...certData,\n    serialNumber: _processSerialNumber(certData.serialNumber),\n  };\n}\n\nfunction _getCertData(p12Buffer: Buffer | string, passwordRaw: string | null) {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('_getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = p12.getBags({ bagType: certBagType })?.[certBagType]?.[0]?.cert;\n  if (!certData) {\n    throw new Error(\"_getCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n"],"file":"../../detach/PKCS12Utils.js","sourceRoot":"/@expo/xdl@57.9.17/src"}