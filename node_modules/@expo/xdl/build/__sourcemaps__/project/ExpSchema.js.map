{"version":3,"sources":["project/ExpSchema.ts"],"names":["_xdlSchemaJson","_schemaCaches","validatorFromProjectRoot","projectRoot","exp","sdkVersion","Error","schema","getSchemaAsync","validator","Schemer","json","_getSchemaJSONAsync","getAssetSchemasAsync","assetSchemas","visit","node","fieldPath","meta","asset","push","properties","Object","keys","forEach","property","length","process","env","LOCAL_XDL_SCHEMA","EXPONENT_UNIVERSE_DIR","JSON","parse","fs","readFileSync","path","join","toString","getConfigurationSchemaAsync","e","code","hasOwnProperty","Cacher","ApiV2","getAsync","__dirname"],"mappings":"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","sourcesContent":["import path from 'path';\nimport { JSONObject } from '@expo/json-file';\n\nimport { getConfig } from '@expo/config';\nimport Schemer from '@expo/schemer';\nimport fs from 'fs';\n\nimport ApiV2 from '../ApiV2';\nimport { Cacher } from '../tools/FsCache';\n\nexport type Schema = any;\nexport type AssetSchema = { schema: Schema; fieldPath: string };\n\nlet _xdlSchemaJson: { [sdkVersion: string]: Schema } = {};\nlet _schemaCaches: { [version: string]: Cacher<JSONObject> } = {};\n\nexport async function validatorFromProjectRoot(projectRoot: string): Promise<Schemer> {\n  const { exp } = getConfig(projectRoot);\n  if (!exp.sdkVersion) throw new Error(`Couldn't read local manifest`);\n  const schema = await getSchemaAsync(exp.sdkVersion);\n  const validator = new Schemer(schema);\n  return validator;\n}\n\nexport async function getSchemaAsync(sdkVersion: string): Promise<Schema> {\n  let json = await _getSchemaJSONAsync(sdkVersion);\n  return json.schema;\n}\n\n// Array of schema nodes that refer to assets along with their field\n// path (eg. 'notification.icon')\nexport async function getAssetSchemasAsync(sdkVersion: string): Promise<AssetSchema[]> {\n  const schema = await getSchemaAsync(sdkVersion);\n  const assetSchemas: AssetSchema[] = [];\n  const visit = (node: Schema, fieldPath: string) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push({ schema: node, fieldPath });\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach(property =>\n        visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`)\n      );\n    }\n  };\n  visit(schema, '');\n  return assetSchemas;\n}\n\nasync function _getSchemaJSONAsync(sdkVersion: string): Promise<{ schema: Schema }> {\n  if (process.env.LOCAL_XDL_SCHEMA) {\n    if (process.env.EXPONENT_UNIVERSE_DIR) {\n      return JSON.parse(\n        fs\n          .readFileSync(\n            path.join(\n              process.env.EXPONENT_UNIVERSE_DIR,\n              'server',\n              'www',\n              'xdl-schemas',\n              'UNVERSIONED-schema.json'\n            )\n          )\n          .toString()\n      );\n    } else {\n      throw new Error(`LOCAL_XDL_SCHEMA is set but EXPONENT_UNIVERSE_DIR is not.`);\n    }\n  }\n\n  if (!_xdlSchemaJson[sdkVersion]) {\n    try {\n      _xdlSchemaJson[sdkVersion] = await getConfigurationSchemaAsync(sdkVersion);\n    } catch (e) {\n      if (e.code && e.code === 'INVALID_JSON') {\n        throw new Error(`Couldn't read schema from server`);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return _xdlSchemaJson[sdkVersion];\n}\n\nasync function getConfigurationSchemaAsync(sdkVersion: string): Promise<JSONObject> {\n  if (!_schemaCaches.hasOwnProperty(sdkVersion)) {\n    _schemaCaches[sdkVersion] = new Cacher(\n      async () => {\n        return await new ApiV2().getAsync(`project/configuration/schema/${sdkVersion}`);\n      },\n      `schema-${sdkVersion}.json`,\n      0,\n      path.join(__dirname, `../caches/schema-${sdkVersion}.json`)\n    );\n  }\n\n  return await _schemaCaches[sdkVersion].getAsync();\n}\n"],"file":"../../project/ExpSchema.js","sourceRoot":"/@expo/xdl@57.9.17/src"}