{"version":3,"sources":["Project.ts"],"names":["EXPO_CDN","MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","_cachedSignedManifest","manifestString","signedManifest","currentStatus","projectDir","packagerPort","expoServerPort","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","hostnames","_getForPlatformAsync","platform","errorCode","minLength","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_resolveGoogleServicesFile","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","_resolveManifestAssets","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","logMethod","logWarning","_requireFromProject","modulePath","exp","fullPath","require","getSlugAsync","skipSDKVersionRequirement","slug","getLatestReleaseAsync","options","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","owner","releaseChannel","count","queryResult","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","join","stringify","prepareHooks","hooks","hookType","validHooks","hook","file","fn","_fn","undefined","runHook","hookOptions","config","then","info","quiet","exportForAppHosting","publicUrl","assetUrl","_validatePackagerReadyAsync","defaultTarget","target","publishOptions","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","pkg","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","validPostExportHooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","uuid","v4","hashIds","HashIds","v1","revisionId","encode","now","developer","tool","username","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","androidManifest","bundleUrl","dependencies","Object","keys","iosManifest","iosSourceMap","androidSourceMap","dumpSourcemap","postExport","_buildSourceMapsAsync","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","log","msg","warn","stack","EmbeddedAssets","configureAsync","iosManifestUrl","androidManifestUrl","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","_saveAssetAsync","paths","files","fileHashes","keyChunks","key","logDebug","assetPath","p","findReusableBuildAsync","getCurrentUserAsync","buildReuseStatus","publishAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","_fetchAndUploadAssetsAsync","hasHooks","shouldPublishAndroidMaps","publishSourceMapPath","shouldPublishIosMaps","_maybeBuildSourceMapsAsync","force","_uploadArtifactsAsync","serverError","Sentry","captureException","publishManifestPath","shouldEmbedAssetsForExpoUpdates","ExponentTools","getManifestAsync","Accept","fullManifestUrl","replace","isKernel","_handleKernelPublishedAsync","formData","FormData","append","uploadFormDataAsync","packagerInfo","startReactNativeServerAsync","reset","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPoint","publishUrl","constructPublishUrlAsync","sourceMapUrl","constructSourceMapUrlAsync","_collectAssets","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","androidAssetsJson","manifestAssets","absolutePath","iosAssets","androidAssets","concat","_configureExpForAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","add","type","assetCdnPath","uploadAssetsAsync","hostedUrl","kernelBundleUrl","scheme","host","kernel","androidManifestPath","writeFile","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","getConfigAsync","configName","configPrefix","ThirdParty","getManifest","_validateManifest","bundleIdentifier","package","_validateOptions","schema","joi","object","current","boolean","mode","string","any","valid","expIds","array","regex","validate","toString","_getExpAsync","version","name","toLowerCase","getBuildStatusAsync","startBuildAsync","putAsync","_waitForRunningAsync","retries","test","METRO_VERBOSE_WARNING","NODE_12_WINDOWS_METRO_ERROR","NODE_12_WINDOWS_METRO_SUGGESTION","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","includes","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","args","obj","logLevel","getLogger","tag","groupDepth","shouldHide","includesStack","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","__dirname","sourceExtsConfig","isTS","isReact","isModern","sourceExts","nonPersistent","Versions","lteSdkVersion","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","userSourceExts","cliOpts","val","entries","process","env","EXPO_DEBUG","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","nodePathEnv","NODE_PATH","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","directory","parentDirectory","dirname","delimiter","blacklistedEnvironmentVariables","shouldExposeEnvironmentVariableInManifest","has","toUpperCase","stripPort","URL","hostname","getManifestHandler","req","res","bundleUrlPackagerOpts","xde","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","unsignedManifest","signature","publishInfo","getPublishInfoAsync","hostInfo","server","serverVersion","serverDriver","serverOS","os","serverOSVersion","release","setHeader","end","statusCode","startExpoServerAsync","stopExpoServerAsync","app","use","express","json","limit","urlencoded","extended","ConnectionStatus","isOffline","validateWithoutNetworkAsync","manifestHandler","post","send","close","expRc","manifestPort","listen","address","saveRecentExpRootAsync","startDevServerAsync","startOptions","resetCache","EXPO_TARGET","middleware","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","Number","isInteger","getUrlAsync","startAsync","webOnly","Webpack","restartAsync","DevSession","startSession","getenv","boolish","_stopInternalAsync","stopSession","stopAsync","maybeStopAdbDaemonAsync","stopWebOnlyAsync","setTimeout","webpackServerPort"],"mappings":"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","sourcesContent":["import {\n  ExpoConfig,\n  Hook,\n  HookArguments,\n  HookType,\n  PackageJSONConfig,\n  Platform,\n  ProjectTarget,\n  configFilename,\n  getConfig,\n  getDefaultTarget,\n  readExpRcAsync,\n  resolveModule,\n} from '@expo/config';\n\nimport slug from 'slugify';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport { MetroDevServerOptions, runMetroDevServerAsync } from '@expo/dev-server';\nimport JsonFile from '@expo/json-file';\nimport ngrok from '@expo/ngrok';\nimport axios from 'axios';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport decache from 'decache';\nimport delayAsync from 'delay-async';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport HashIds from 'hashids';\nimport joi from '@hapi/joi';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport { AddressInfo } from 'net';\nimport os from 'os';\nimport path from 'path';\nimport http from 'http';\nimport { URL } from 'url';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport urljoin from 'url-join';\nimport { promisify } from 'util';\nimport uuid from 'uuid';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport { writeArtifactSafelyAsync } from './tools/ArtifactUtils';\nimport Config from './Config';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as DevSession from './DevSession';\nimport * as EmbeddedAssets from './EmbeddedAssets';\nimport { maySkipManifestValidation } from './Env';\nimport { ErrorCode } from './ErrorCode';\nimport * as Exp from './Exp';\nimport logger from './Logger';\nimport * as ExpSchema from './project/ExpSchema';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Sentry from './Sentry';\nimport * as ThirdParty from './ThirdParty';\nimport FormData from './tools/FormData';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME, User } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport * as Webpack from './Webpack';\nimport XDLError from './XDLError';\n\nimport * as Doctor from './project/Doctor';\nimport * as IosPlist from './detach/IosPlist';\n// @ts-ignore IosWorkspace not yet converted to TypeScript\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport { ConnectionStatus } from './xdl';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify<number, string>(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\ntype Asset =\n  | { fileHashes: string[]; files: string[]; hash: string }\n  | {\n      __packager_asset: true;\n      fileHashes: string[];\n      files: string[];\n      fileSystemLocation: string;\n      hash: string;\n      httpServerLocation: string;\n      name: string;\n      scales: number[];\n      type: string;\n    };\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype PublicConfig = ExpoConfig & {\n  sdkVersion: string;\n};\n\ntype SelfHostedIndex = PublicConfig & {\n  dependencies: string[];\n};\n\ntype LoadedHook = Hook & {\n  _fn: (input: HookArguments) => any;\n};\n\nexport type StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\ntype PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n};\n\ntype PackagerOptions = {\n  dev: boolean;\n  minify: boolean;\n};\n\ntype Release = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  publishedTime: string;\n  platform: string;\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(\n  projectRoot: string\n): Promise<{ url: string; isUrlFallback: false }> {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot: string) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart: number) {\n  let port = await freeportAsync(rangeStart, { hostnames: [null, 'localhost'] });\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(\n  projectRoot: string,\n  url: string,\n  platform: Platform,\n  { errorCode, minLength }: { errorCode: ErrorCode; minLength?: number }\n): Promise<string> {\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${error.response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios && manifest.ios.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(\n  projectRoot: string,\n  manifest: PublicConfig,\n  resolver: (assetPath: string) => Promise<string>,\n  strict = false\n) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (\n      await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion)\n    ).filter((assetSchema: ExpSchema.AssetSchema) => get(manifest, assetSchema.fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async (assetSchema: ExpSchema.AssetSchema) => {\n        const pathOrURL = get(manifest, assetSchema.fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = assetSchema.fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((assetSchema: ExpSchema.AssetSchema, index: number) =>\n      set(manifest, assetSchema.fieldPath + 'Url', urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath: string, projectRoot: string, exp: ExpoConfig) {\n  try {\n    let fullPath = resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\n// TODO: Move to @expo/config\nexport async function getSlugAsync(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  if (exp.slug) {\n    return exp.slug;\n  }\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `Your project config in ${projectRoot} must contain a \"slug\" field. Please supply this in your app.config.js or app.json`\n  );\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string;\n    platform: string;\n    owner?: string;\n  }\n): Promise<Release | null> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('publish/history', {\n    owner: options.owner,\n    slug: await getSlugAsync(projectRoot),\n    releaseChannel: options.releaseChannel,\n    count: 1,\n    platform: options.platform,\n  });\n  const { queryResult } = result;\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n): Promise<void> {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes: SelfHostedIndex[] = [];\n  const iosIndexes: SelfHostedIndex[] = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath: string, accumulator: SelfHostedIndex[]) => {\n      const index = (await JsonFile.readAsync(indexPath)) as SelfHostedIndex;\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = (indexes: SelfHostedIndex[]) => {\n    return indexes.sort((index1: SelfHostedIndex, index2: SelfHostedIndex) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\nfunction prepareHooks(\n  hooks: ExpoConfig['hooks'],\n  hookType: HookType,\n  projectRoot: string,\n  exp: ExpoConfig\n) {\n  const validHooks: LoadedHook[] = [];\n\n  if (hooks) {\n    hooks[hookType]?.forEach((hook: any) => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load ${hookType} hook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validHooks.push(hook);\n      }\n    });\n\n    if (hooks[hookType] !== undefined && validHooks.length !== hooks[hookType]?.length) {\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        `Please fix your ${hookType} hook configuration`\n      );\n    }\n  }\n\n  return validHooks;\n}\n\nexport async function runHook(hook: LoadedHook, hookOptions: Omit<HookArguments, 'config'>) {\n  let result = hook._fn({\n    config: hook.config,\n    ...hookOptions,\n  });\n\n  // If it's a promise, wait for it to resolve\n  if (result && result.then) {\n    result = await result;\n  }\n\n  if (result) {\n    logger.global.info({ quiet: true }, result);\n  }\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: PublishOptions;\n  } = {}\n): Promise<void> {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  const defaultTarget = getDefaultTarget(projectRoot);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto.createHash('md5').update(iosBundle).digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto.createHash('md5').update(androidBundle).digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n\n    const assetmap: { [hash: string]: Asset } = {};\n\n    assets.forEach((asset: Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostExportHooks: LoadedHook[] = prepareHooks(hooks, 'postExport', projectRoot, exp);\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n  exp.releaseId = uuid.v4();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n\n  let username = await UserManager.getCurrentUsernameAsync();\n\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  const androidManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', androidBundleUrl),\n    platform: 'android',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(androidManifest)\n  );\n\n  // save the ios manifest\n  const iosManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', iosBundleUrl),\n    platform: 'ios',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(iosManifest)\n  );\n\n  let iosSourceMap = null;\n  let androidSourceMap = null;\n\n  // Build sourcemaps when `postExport` hook is set up or when `dumpSourcemap` argument is passed\n  if (options.dumpSourcemap || (hooks?.postExport && hooks.postExport?.length > 0)) {\n    ({ iosSourceMap, androidSourceMap } = await _buildSourceMapsAsync(projectRoot));\n    // Write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n\n  const hookOptions = {\n    url: null,\n    exp,\n    iosBundle,\n    iosSourceMap,\n    iosManifest,\n    androidBundle,\n    androidSourceMap,\n    androidManifest,\n    projectRoot,\n    log: (msg: any) => {\n      logger.global.info({ quiet: true }, msg);\n    },\n  };\n\n  for (let hook of validPostExportHooks) {\n    logger.global.info(`Running postExport hook: ${hook.file}`);\n\n    try {\n      runHook(hook, hookOptions);\n    } catch (e) {\n      logger.global.warn(`Warning: postExport hook '${hook.file}' failed: ${e.stack}`);\n    }\n  }\n\n  // configure embedded assets for expo-updates or ExpoKit\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    iosManifestUrl: urljoin(publicUrl, 'ios-index.json'),\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: urljoin(publicUrl, 'android-index.json'),\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string; canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: PublishOptions = {}\n): Promise<{ url: string; ids: string[]; err?: string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const target = options.target ?? getDefaultTarget(projectRoot);\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks: LoadedHook[] = prepareHooks(hooks, 'postPublish', projectRoot, exp);\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  const hasHooks = validPostPublishHooks.length > 0;\n\n  const shouldPublishAndroidMaps = !!exp.android && !!exp.android.publishSourceMapPath;\n\n  const shouldPublishIosMaps = !!exp.ios && !!exp.ios.publishSourceMapPath;\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: hasHooks || shouldPublishAndroidMaps || shouldPublishIosMaps,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app.json or app.config.js.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  let androidManifest = {};\n  let iosManifest = {};\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath) ||\n    EmbeddedAssets.shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)\n  ) {\n    [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        runHook(hook, hookOptions);\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n  }\n\n  const fullManifestUrl = response.url.replace('exp://', 'https://');\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    releaseChannel: options.releaseChannel ?? 'default',\n    iosManifestUrl: fullManifestUrl,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: fullManifestUrl,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({\n  exp,\n  iosBundle,\n  androidBundle,\n  options,\n  pkg,\n}: {\n  exp: ExpoConfig;\n  iosBundle: string;\n  androidBundle: string;\n  options: PublishOptions;\n  pkg: PackageJSONConfig;\n}) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  return await api.uploadFormDataAsync('publish/new', formData);\n}\n\nasync function _validatePackagerReadyAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(\n  projectRoot: string,\n  options: PublishOptions\n): Promise<{\n  exp: PublicConfig;\n  pkg: PackageJSONConfig;\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  const { exp, pkg } = getConfig(projectRoot);\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  const { sdkVersion } = exp;\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp: { ...exp, sdkVersion: sdkVersion! }, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot: string, opts?: PackagerOptions) {\n  const entryPoint = Exp.determineEntryPoint(projectRoot);\n  const publishUrl = await UrlUtils.constructPublishUrlAsync(\n    projectRoot,\n    entryPoint,\n    undefined,\n    opts\n  );\n\n  logger.global.info('Building iOS bundle');\n  const iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  const androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\nasync function _maybeBuildSourceMapsAsync(\n  projectRoot: string,\n  exp: ExpoConfig,\n  options = { force: false }\n) {\n  if (options.force) {\n    return _buildSourceMapsAsync(projectRoot);\n  } else {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _buildSourceMapsAsync(projectRoot: string) {\n  let entryPoint = Exp.determineEntryPoint(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedAssetPrefix: string\n): Promise<Asset[]> {\n  let entryPoint = Exp.determineEntryPoint(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async (assetPath: string) => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoConfig, assets: Asset[]) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot: string, exp: PublicConfig) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(\n  projectRoot: string,\n  exp: PublicConfig,\n  hostedUrl: string,\n  outputDir: string\n) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _handleKernelPublishedAsync({\n  projectRoot,\n  user,\n  exp,\n  url,\n}: {\n  projectRoot: string;\n  user: User;\n  exp: ExpoConfig;\n  url: string;\n}) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: Object.keys(paths) });\n\n  const metas = result.metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n\n      const user = await UserManager.ensureLoggedInAsync();\n      const api = ApiV2.clientForUser(user);\n      await api.uploadFormDataAsync('assets/upload', formData);\n    })\n  );\n}\n\ntype GetExpConfigOptions = {\n  current?: boolean;\n  mode?: string;\n  platform?: 'android' | 'ios' | 'all';\n  expIds?: string[];\n  type?: string;\n  releaseChannel?: string;\n  bundleIdentifier?: string;\n  publicUrl?: string;\n  sdkVersion?: string;\n};\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'platform'> = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = getConfig(projectRoot);\n    const configName = configFilename(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: configFilename(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\ntype JobState = 'pending' | 'started' | 'in-progress' | 'finished' | 'errored' | 'sent-to-queue';\n\nexport type TurtleMode = 'normal' | 'high' | 'high_only';\n\n// https://github.com/expo/universe/blob/283efaba3acfdefdc7db12f649516b6d6a94bec4/server/www/src/data/entities/builds/BuildJobEntity.ts#L25-L56\nexport interface BuildJobFields {\n  id: string;\n  experienceName: string;\n  status: JobState;\n  platform: 'ios' | 'android';\n  userId: string | null;\n  experienceId: string;\n  artifactId: string | null;\n  nonce: string | null;\n  artifacts: {\n    url?: string;\n    manifestPlistUrl?: string;\n  } | null;\n  config: {\n    buildType?: string;\n    releaseChannel?: string;\n    bundleIdentifier?: string;\n  };\n  logs: object | null;\n  extraData: {\n    request_id?: string;\n    turtleMode?: TurtleMode;\n  } | null;\n  created: Date;\n  updated: Date;\n  expirationDate: Date;\n  sdkVersion: string | null;\n  turtleVersion: string | null;\n  buildDuration: number | null;\n  priority: string;\n  accountId: string | null;\n}\n\nexport type BuildStatusResult = {\n  jobs: BuildJobFields[];\n  err: null;\n  userHasBuiltAppBefore: boolean;\n  userHasBuiltExperienceBefore: boolean;\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nexport type BuildCreatedResult = {\n  id: string;\n  ids: string[];\n  priority: 'normal' | 'high';\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nfunction _validateManifest(options: any, exp: any, configName: string, configPrefix: string) {\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n}\nfunction _validateOptions(options: any) {\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.string().strict(),\n  });\n\n  const { error } = schema.validate(options);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n}\n\nasync function _getExpAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'mode' | 'platform'>\n) {\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && 'version' in pkg && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.name && 'name' in pkg && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n  return { exp, configName, configPrefix };\n}\n\nexport async function getBuildStatusAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildStatusResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp } = await _getExpAsync(projectRoot, options);\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('build/status', { manifest: exp, options });\n}\n\nexport async function startBuildAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildCreatedResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp, configName, configPrefix } = await _getExpAsync(projectRoot, options);\n  _validateManifest(options, exp, configName, configPrefix);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.putAsync('build/start', { manifest: exp, options });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\n// The --verbose flag is intended for react-native-cli/metro, not expo-cli\nconst METRO_VERBOSE_WARNING = 'Run CLI with --verbose flag for more details.';\n\n// Remove these constants and related code when SDK35 isn't supported anymore\n// Context: https://github.com/expo/expo-cli/issues/1074\nconst NODE_12_WINDOWS_METRO_ERROR = `Invalid regular expression: /(.*\\\\__fixtures__\\\\.*|node_modules[\\\\\\]react[\\\\\\]dist[\\\\\\].*|website\\\\node_modules\\\\.*|heapCapture\\\\bundle\\.js|.*\\\\__tests__\\\\.*)$/: Unterminated character class`;\nconst NODE_12_WINDOWS_METRO_SUGGESTION = `\\nUnable to start the project due to a documented incompatibility between Node 12 LTS and Expo SDK 35 on Windows.\nPlease refer to this GitHub comment for a solution:\nhttps://github.com/expo/expo-cli/issues/1074#issuecomment-559220752\\n`;\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (output.includes(NODE_12_WINDOWS_METRO_ERROR)) {\n    ProjectUtils.logError(projectRoot, 'expo', NODE_12_WINDOWS_METRO_SUGGESTION);\n    return;\n  }\n\n  if (output.includes(METRO_VERBOSE_WARNING)) {\n    output = output.replace(METRO_VERBOSE_WARNING, '');\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of react-native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    const log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    ProjectUtils.getLogger(projectRoot)[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = getConfig(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  const customLogReporterPath: string = require.resolve(path.join(__dirname, 'reporter'));\n\n  // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    options.target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    sourceExts,\n  };\n\n  if (options.nonPersistent && Versions.lteSdkVersion(exp, '32.0.0')) {\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    // starting with SDK 37, we bundle this plugin with the expo-asset package instead of expo,\n    // so check there first and fall back to expo if we can't find it in expo-asset\n    try {\n      packagerOpts.assetPlugins = resolveModule(\n        'expo-asset/tools/hashAssetFiles',\n        projectRoot,\n        exp\n      );\n    } catch (e) {\n      packagerOpts.assetPlugins = resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n    }\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    // Provide a fallback if the value isn't given\n    const userSourceExts = userPackagerOpts.sourceExts ?? [];\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      // In order to prevent people from forgetting to include the .expo extension or other things\n      // NOTE(brentvatne): we should probably do away with packagerOpts soon in favor of @expo/metro-config!\n      sourceExts: [...new Set([...packagerOpts.sourceExts, ...userSourceExts])],\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  const cliOpts = ['start'];\n  for (const [key, val] of Object.entries(packagerOpts)) {\n    // If the packager opt value is boolean, don't set\n    // --[opt] [value], just set '--opt'\n    if (val && typeof val === 'boolean') {\n      cliOpts.push(`--${key}`);\n    } else if (val) {\n      cliOpts.push(`--${key}`, val);\n    }\n  }\n\n  if (process.env.EXPO_DEBUG) {\n    cliOpts.push('--verbose');\n  }\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  const nodePathEnv = nodePath ? { NODE_PATH: nodePath } : {};\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n      ...nodePathEnv,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nfunction stripPort(host: string | undefined): string | undefined {\n  if (!host) {\n    return host;\n  }\n  return new URL('/', `http://${host}`).hostname;\n}\n\nfunction getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse\n  ) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.readAsync(projectRoot);\n      let { exp: manifest } = getConfig(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let platform = (req.headers['exponent-platform'] || 'ios').toString();\n      let entryPoint = Exp.determineEntryPoint(projectRoot, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      const hostname = stripPort(req.headers.host);\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest as PublicConfig,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            const user = await UserManager.ensureLoggedInAsync();\n\n            const api = ApiV2.clientForUser(user);\n            const signedManifest = await api.postAsync('manifest/sign', {\n              args: publishInfo.args,\n              manifest,\n            });\n\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('@expo/xdl/package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.setHeader('Exponent-Server', JSON.stringify(hostInfo));\n      res.end(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if (\n    (ConnectionStatus.isOffline()\n      ? await Doctor.validateWithoutNetworkAsync(projectRoot)\n      : await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL\n  ) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  }\n  // Serve the manifest.\n  const manifestHandler = getManifestHandler(projectRoot);\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function startDevServerAsync(projectRoot: string, startOptions: StartOptions) {\n  _assertValidProjectRoot(projectRoot);\n\n  const port = await _getFreePortAsync(19000); // Create packager options\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n  if (startOptions.target) {\n    // EXPO_TARGET is used by @expo/metro-config to determine the target when getDefaultConfig is\n    // called from metro.config.js and the --target option is used to override the default target.\n    process.env.EXPO_TARGET = startOptions.target;\n  }\n\n  const { middleware } = await runMetroDevServerAsync(projectRoot, options);\n  middleware.use(getManifestHandler(projectRoot));\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: ngrok.NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string): Promise<void> {\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number;\n  }\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  if (options.packagerPort != null && Number.isInteger(options.packagerPort)) {\n    throw new XDLError('INVALID_OPTIONS', 'packagerPort must be an integer');\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\n\n// DEPRECATED(2019-08-21): use UrlUtils.constructManifestUrlAsync\nexport async function getUrlAsync(projectRoot: string, options: object = {}): Promise<string> {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: StartOptions = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  let { exp } = getConfig(projectRoot);\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else if (getenv.boolish('EXPO_USE_DEV_SERVER', false)) {\n    await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!Config.offline && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await Webpack.stopAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Closing Expo server');\n  await stopExpoServerAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Stopping Metro bundler');\n  await stopReactNativeServerAsync(projectRoot);\n  await Android.maybeStopAdbDaemonAsync();\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopWebOnlyAsync(projectDir: string): Promise<void> {\n  await Webpack.stopAsync(projectDir);\n  await DevSession.stopSession();\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"file":"../Project.js","sourceRoot":"/@expo/xdl@57.9.17/src"}