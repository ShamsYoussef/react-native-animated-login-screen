{"version":3,"sources":["Config.ts"],"names":["apiConfig","local","scheme","host","port","staging","getenv","string","int","production","turtleApiConfig","api","turtleApi","Env","isLocal","isStaging","config","ngrok","authToken","authTokenPublicId","domain","developerTool","validation","reactNativeVersionWarnings","helpUrl","offline"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAyBA,MAAMA,SAA8C,GAAG;AACrDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,IAAI,EAAE,WAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAD8C;AAMrDC,EAAAA,OAAO,EAAE;AACPH,IAAAA,MAAM,EAAEI,kBAAOC,MAAP,CAAc,YAAd,EAA4B,OAA5B,CADD;AAEPJ,IAAAA,IAAI,EAAE,kBAFC;AAGPC,IAAAA,IAAI,EAAEE,kBAAOE,GAAP,CAAW,UAAX,EAAuB,CAAvB,KAA6B;AAH5B,GAN4C;AAWrDC,EAAAA,UAAU,EAAE;AACVP,IAAAA,MAAM,EAAEI,kBAAOC,MAAP,CAAc,YAAd,EAA4B,OAA5B,CADE;AAEVJ,IAAAA,IAAI,EAAEG,kBAAOC,MAAP,CAAc,UAAd,EAA0B,UAA1B,CAFI;AAGVH,IAAAA,IAAI,EAAEE,kBAAOE,GAAP,CAAW,UAAX,EAAuB,CAAvB,KAA6B;AAHzB;AAXyC,CAAvD;AAkBA,MAAME,eAAoD,GAAG;AAC3DT,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,IAAI,EAAE,WAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GADoD;AAM3DC,EAAAA,OAAO,EAAE;AACPH,IAAAA,MAAM,EAAE,OADD;AAEPC,IAAAA,IAAI,EAAE,wBAFC;AAGPC,IAAAA,IAAI,EAAE;AAHC,GANkD;AAW3DK,EAAAA,UAAU,EAAE;AACVP,IAAAA,MAAM,EAAE,OADE;AAEVC,IAAAA,IAAI,EAAE,gBAFI;AAGVC,IAAAA,IAAI,EAAE;AAHI;AAX+C,CAA7D;AAkBA,IAAIO,GAAc,GAAGX,SAAS,CAACS,UAA/B;AACA,IAAIG,SAAoB,GAAGF,eAAe,CAACD,UAA3C;;AACA,IAAII,GAAG,GAACC,OAAJ,EAAJ,EAAmB;AACjBH,EAAAA,GAAG,GAAGX,SAAS,CAACC,KAAhB;AACAW,EAAAA,SAAS,GAAGF,eAAe,CAACT,KAA5B;AACD,CAHD,MAGO,IAAIY,GAAG,GAACE,SAAJ,EAAJ,EAAqB;AAC1BJ,EAAAA,GAAG,GAAGX,SAAS,CAACK,OAAhB;AACAO,EAAAA,SAAS,GAAGF,eAAe,CAACL,OAA5B;AACD;;AAED,MAAMW,MAAiB,GAAG;AACxBL,EAAAA,GADwB;AAExBC,EAAAA,SAFwB;AAGxBK,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,6CADN;AAELC,IAAAA,iBAAiB,EAAE,uBAFd;AAGLC,IAAAA,MAAM,EAAE;AAHH,GAHiB;AAQxBC,EAAAA,aAAa,EAAE,IARS;AASxBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,0BAA0B,EAAE;AADlB,GATY;AAYxBC,EAAAA,OAAO,EAAE,uBAZe;AAaxBC,EAAAA,OAAO,EAAE;AAbe,CAA1B;eAgBeT,M","sourcesContent":["import getenv from 'getenv';\n\nimport * as Env from './Env';\n\ninterface ApiConfig {\n  scheme: string;\n  host: string;\n  port: number | null;\n}\ninterface XDLConfig {\n  turtleApi: ApiConfig;\n  api: ApiConfig;\n  ngrok: {\n    authToken: string;\n    authTokenPublicId: string;\n    domain: string;\n  };\n  developerTool: string | null;\n  validation: {\n    reactNativeVersionWarnings: boolean;\n  };\n  helpUrl: string;\n  offline: boolean;\n}\n\ntype Environment = 'local' | 'staging' | 'production';\n\nconst apiConfig: { [env in Environment]: ApiConfig } = {\n  local: {\n    scheme: 'http',\n    host: 'localhost',\n    port: 3000,\n  },\n  staging: {\n    scheme: getenv.string('XDL_SCHEME', 'https'),\n    host: 'staging.exp.host',\n    port: getenv.int('XDL_PORT', 0) || null,\n  },\n  production: {\n    scheme: getenv.string('XDL_SCHEME', 'https'),\n    host: getenv.string('XDL_HOST', 'exp.host'),\n    port: getenv.int('XDL_PORT', 0) || null,\n  },\n};\n\nconst turtleApiConfig: { [env in Environment]: ApiConfig } = {\n  local: {\n    scheme: 'http',\n    host: 'localhost',\n    port: 3006,\n  },\n  staging: {\n    scheme: 'https',\n    host: 'staging.turtle.expo.io',\n    port: 443,\n  },\n  production: {\n    scheme: 'https',\n    host: 'turtle.expo.io',\n    port: 443,\n  },\n};\n\nlet api: ApiConfig = apiConfig.production;\nlet turtleApi: ApiConfig = turtleApiConfig.production;\nif (Env.isLocal()) {\n  api = apiConfig.local;\n  turtleApi = turtleApiConfig.local;\n} else if (Env.isStaging()) {\n  api = apiConfig.staging;\n  turtleApi = turtleApiConfig.staging;\n}\n\nconst config: XDLConfig = {\n  api,\n  turtleApi,\n  ngrok: {\n    authToken: '5W1bR67GNbWcXqmxZzBG1_56GezNeaX6sSRvn8npeQ8',\n    authTokenPublicId: '5W1bR67GNbWcXqmxZzBG1',\n    domain: 'exp.direct',\n  },\n  developerTool: null,\n  validation: {\n    reactNativeVersionWarnings: true,\n  },\n  helpUrl: 'https://docs.expo.io/',\n  offline: false,\n};\n\nexport default config;\n"],"file":"../Config.js","sourceRoot":"/@expo/xdl@57.9.17/src"}