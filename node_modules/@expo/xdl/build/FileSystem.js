"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openFolderName = openFolderName;
exports.openConsoleName = openConsoleName;
exports.openFolderAsync = openFolderAsync;
exports.openConsoleAsync = openConsoleAsync;
exports.openFileInEditorAsync = openFileInEditorAsync;
exports.openProjectInEditorAsync = openProjectInEditorAsync;

function osascript() {
  const data = _interopRequireWildcard(require("@expo/osascript"));

  osascript = function () {
    return data;
  };

  return data;
}

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _child_process() {
  const data = require("child_process");

  _child_process = function () {
    return data;
  };

  return data;
}

function _XDLError() {
  const data = _interopRequireDefault(require("./XDLError"));

  _XDLError = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function openFolderName() {
  if (process.platform === 'darwin') {
    return 'Show in Finder';
  } else if (process.platform === 'win32') {
    return 'Show in File Explorer';
  } else {
    return null;
  }
}

function openConsoleName() {
  if (process.platform === 'darwin') {
    return 'Open in Terminal';
  } else if (process.platform === 'win32') {
    return 'Open in Cmd';
  } else {
    return null;
  }
}

async function openFolderAsync(dir) {
  if (process.platform === 'darwin') {
    return await osascript().openFinderToFolderAsync(dir);
  } else if (process.platform === 'win32') {
    return await (0, _spawnAsync().default)('explorer', [dir]);
  } else {
    throw new (_XDLError().default)('PLATFORM_NOT_SUPPORTED', 'openFolderAsync not supported');
  }
}

async function openConsoleAsync(dir) {
  if (process.platform === 'darwin') {
    await osascript().openFolderInTerminalAppAsync(dir);
  } else if (process.platform === 'win32') {
    (0, _child_process().execSync)(`start cmd /K "cd /d ${dir}"`);
  } else {
    throw new (_XDLError().default)('PLATFORM_NOT_SUPPORTED', 'openConsoleAsync not supported');
  }
}

async function openFileInEditorAsync(path) {
  if (process.platform === 'darwin') {
    // This will use the ENV var $EXPO_EDITOR if set, or else will try various
    // popular editors, looking for one that is open, or if none are, one that is installed
    return await osascript().openInEditorAsync(path, process.env.EXPO_EDITOR);
  } else {
    throw new (_XDLError().default)('PLATFORM_NOT_SUPPORTED', 'openFileInEditorAsync not supported');
  }
}

async function openProjectInEditorAsync(dir) {
  if (process.platform === 'darwin') {
    // This will use the ENV var $EXPO_EDITOR if set, or else will try various
    // popular editors, looking for one that is open, or if none are, one that is installed
    return await osascript().openInEditorAsync(dir, process.env.EXPO_EDITOR);
  } else {
    throw new (_XDLError().default)('PLATFORM_NOT_SUPPORTED', 'openProjectInEditorAsync not supported');
  }
}
//# sourceMappingURL=__sourcemaps__/FileSystem.js.map
