import { ExpoConfig, Platform } from '@expo/config';
import { SpawnOptions, SpawnResult } from '@expo/spawn-async';
import { Logger } from './Logger';
declare function parseSdkMajorVersion(expSdkVersion: string): number;
declare function saveUrlToPathAsync(url: string, path: string, timeout?: number): Promise<unknown>;
declare function saveImageToPathAsync(projectRoot: string, pathOrURL: string, outPath: string): Promise<void>;
declare function getManifestAsync(url: string, headers: any, options?: any): Promise<any>;
export declare type AsyncSpawnOptions = SpawnOptions & {
    loggerFields?: any;
    pipeToLogger?: boolean | {
        stdout?: boolean;
        stderr?: boolean;
    };
    stdoutOnly?: boolean;
};
declare function spawnAsyncThrowError(command: string, args: string[], options?: AsyncSpawnOptions): Promise<SpawnResult>;
declare function spawnAsync(command: string, args: string[], options: SpawnOptions): Promise<SpawnResult | void>;
declare function createSpawner(buildPhase: string, logger?: Logger): (command: string, ...args: any[]) => Promise<SpawnResult>;
declare function transformFileContentsAsync(filename: string, transform: (input: string) => string | null): Promise<void>;
declare function manifestUsesSplashApi(manifest: ExpoConfig, platform: Platform): false | {
    backgroundColor?: string | undefined;
    resizeMode?: "cover" | "contain" | undefined;
    image?: string | undefined;
} | {
    backgroundColor?: string | undefined;
    resizeMode?: "cover" | "contain" | "native" | undefined;
    mdpi?: string | undefined;
    hdpi?: string | undefined;
    xhdpi?: string | undefined;
    xxhdpi?: string | undefined;
    xxxhdpi?: string | undefined;
} | undefined;
declare function rimrafDontThrow(directory: string): void;
declare function removeIfExists(file: string): Promise<void>;
declare function isDirectory(dir: string): boolean;
declare type LocaleMap = {
    [lang: string]: any;
};
declare function getResolvedLocalesAsync(exp: ExpoConfig): Promise<LocaleMap>;
declare function regexFileAsync(regex: RegExp | string, replace: string, filename: string): Promise<void>;
declare function deleteLinesInFileAsync(startRegex: RegExp | string, endRegex: RegExp | string, filename: string): Promise<void>;
export { isDirectory, parseSdkMajorVersion, saveUrlToPathAsync, saveImageToPathAsync, getManifestAsync, rimrafDontThrow, removeIfExists, spawnAsyncThrowError, spawnAsync, transformFileContentsAsync, manifestUsesSplashApi, getResolvedLocalesAsync, regexFileAsync, deleteLinesInFileAsync, createSpawner, };
