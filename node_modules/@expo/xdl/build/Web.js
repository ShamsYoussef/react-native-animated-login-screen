"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onlySupportsWebAsync = exports.openProjectAsync = exports.invokeWebpackConfigAsync = exports.shouldWebpackClearLogs = exports.isInfoEnabled = exports.isDebugModeEnabled = void 0;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function Webpack() {
  const data = _interopRequireWildcard(require("./Webpack"));

  Webpack = function () {
    return data;
  };

  return data;
}

function WebpackEnvironment() {
  const data = _interopRequireWildcard(require("./webpack-utils/WebpackEnvironment"));

  WebpackEnvironment = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @deprecated this is not publicly exposed anymore.
 */
const isDebugModeEnabled = WebpackEnvironment().isDebugModeEnabled;
/**
 * @deprecated this is not publicly exposed anymore.
 */

exports.isDebugModeEnabled = isDebugModeEnabled;
const isInfoEnabled = WebpackEnvironment().isInfoEnabled;
/**
 * @deprecated this is not publicly exposed anymore.
 */

exports.isInfoEnabled = isInfoEnabled;
const shouldWebpackClearLogs = WebpackEnvironment().shouldWebpackClearLogs;
/**
 * @deprecated use Webpack.invokeWebpackConfigAsync() instead
 */

exports.shouldWebpackClearLogs = shouldWebpackClearLogs;
const invokeWebpackConfigAsync = Webpack().invokeWebpackConfigAsync;
/**
 * @deprecated use Webpack.openProjectAsync() instead
 */

exports.invokeWebpackConfigAsync = invokeWebpackConfigAsync;
const openProjectAsync = Webpack().openProjectAsync;
/**
 * @deprecated use Webpack.onlySupportsWebAsync() instead
 */

exports.openProjectAsync = openProjectAsync;

const onlySupportsWebAsync = projectRoot => {
  const {
    exp
  } = (0, _config().getConfig)(projectRoot, {
    skipSDKVersionRequirement: true
  });

  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {
    return exp.platforms[0] === 'web';
  }

  return false;
};

exports.onlySupportsWebAsync = onlySupportsWebAsync;
//# sourceMappingURL=__sourcemaps__/Web.js.map
