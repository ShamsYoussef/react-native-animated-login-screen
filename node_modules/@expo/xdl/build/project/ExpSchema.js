"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validatorFromProjectRoot = validatorFromProjectRoot;
exports.getSchemaAsync = getSchemaAsync;
exports.getAssetSchemasAsync = getAssetSchemasAsync;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _schemer() {
  const data = _interopRequireDefault(require("@expo/schemer"));

  _schemer = function () {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

function _ApiV() {
  const data = _interopRequireDefault(require("../ApiV2"));

  _ApiV = function () {
    return data;
  };

  return data;
}

function _FsCache() {
  const data = require("../tools/FsCache");

  _FsCache = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let _xdlSchemaJson = {};
let _schemaCaches = {};

async function validatorFromProjectRoot(projectRoot) {
  const {
    exp
  } = (0, _config().getConfig)(projectRoot);
  if (!exp.sdkVersion) throw new Error(`Couldn't read local manifest`);
  const schema = await getSchemaAsync(exp.sdkVersion);
  const validator = new (_schemer().default)(schema);
  return validator;
}

async function getSchemaAsync(sdkVersion) {
  let json = await _getSchemaJSONAsync(sdkVersion);
  return json.schema;
} // Array of schema nodes that refer to assets along with their field
// path (eg. 'notification.icon')


async function getAssetSchemasAsync(sdkVersion) {
  const schema = await getSchemaAsync(sdkVersion);
  const assetSchemas = [];

  const visit = (node, fieldPath) => {
    if (node.meta && node.meta.asset) {
      assetSchemas.push({
        schema: node,
        fieldPath
      });
    }

    const properties = node.properties;

    if (properties) {
      Object.keys(properties).forEach(property => visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`));
    }
  };

  visit(schema, '');
  return assetSchemas;
}

async function _getSchemaJSONAsync(sdkVersion) {
  if (process.env.LOCAL_XDL_SCHEMA) {
    if (process.env.EXPONENT_UNIVERSE_DIR) {
      return JSON.parse(_fs().default.readFileSync(_path().default.join(process.env.EXPONENT_UNIVERSE_DIR, 'server', 'www', 'xdl-schemas', 'UNVERSIONED-schema.json')).toString());
    } else {
      throw new Error(`LOCAL_XDL_SCHEMA is set but EXPONENT_UNIVERSE_DIR is not.`);
    }
  }

  if (!_xdlSchemaJson[sdkVersion]) {
    try {
      _xdlSchemaJson[sdkVersion] = await getConfigurationSchemaAsync(sdkVersion);
    } catch (e) {
      if (e.code && e.code === 'INVALID_JSON') {
        throw new Error(`Couldn't read schema from server`);
      } else {
        throw e;
      }
    }
  }

  return _xdlSchemaJson[sdkVersion];
}

async function getConfigurationSchemaAsync(sdkVersion) {
  if (!_schemaCaches.hasOwnProperty(sdkVersion)) {
    _schemaCaches[sdkVersion] = new (_FsCache().Cacher)(async () => {
      return await new (_ApiV().default)().getAsync(`project/configuration/schema/${sdkVersion}`);
    }, `schema-${sdkVersion}.json`, 0, _path().default.join(__dirname, `../caches/schema-${sdkVersion}.json`));
  }

  return await _schemaCaches[sdkVersion].getAsync();
}
//# sourceMappingURL=../__sourcemaps__/project/ExpSchema.js.map
