import { BareAppConfig, ExpoConfig } from '@expo/config';
import { PackageSpec } from 'pacote';
declare type AppJsonInput = {
    expo: Partial<ExpoConfig> & {
        name: string;
    };
};
export declare function determineEntryPoint(projectRoot: string, platform?: string): string;
/**
 * Extract a template app to a given file path, initialize a git repo, install
 * npm dependencies, and log information about each of the steps.
 *
 * @deprecated - callers want to have more control over the logging around each
 * step, this is deprecated in favor of calling the methods that it is made up
 * of individually
 */
export declare function extractAndInitializeTemplateApp(templateSpec: PackageSpec, projectRoot: string, packageManager: "yarn" | "npm" | undefined, config: AppJsonInput | BareAppConfig): Promise<string>;
/**
 * Extract a template app to a given file path and clean up any properties left over from npm to
 * prepare it for usage.
 */
export declare function extractAndPrepareTemplateAppAsync(templateSpec: PackageSpec, projectRoot: string, config: AppJsonInput | BareAppConfig): Promise<string>;
/**
 * Extract a template app to a given file path.
 */
export declare function extractTemplateAppAsync(templateSpec: PackageSpec, targetPath: string, config: {
    name?: string;
}): Promise<string>;
export declare function initGitRepoAsync(root: string, flags?: {
    silent: boolean;
    commit: boolean;
}): Promise<boolean>;
export declare function installDependenciesAsync(projectRoot: string, packageManager: 'yarn' | 'npm', flags?: {
    silent: boolean;
}): Promise<void>;
export declare function saveRecentExpRootAsync(root: string): Promise<any>;
declare type PublishInfo = {
    args: {
        username: string;
        remoteUsername: string;
        remotePackageName: string;
        remoteFullPackageName: string;
        sdkVersion: string;
        iosBundleIdentifier?: string | null;
        androidPackage?: string | null;
    };
};
export declare function getPublishInfoAsync(root: string): Promise<PublishInfo>;
export declare function sendAsync(recipient: string, url_: string, allowUnauthed?: boolean): Promise<any>;
export declare function getProjectRandomnessAsync(projectRoot: string): Promise<string>;
export declare function resetProjectRandomnessAsync(projectRoot: string): Promise<string>;
export {};
