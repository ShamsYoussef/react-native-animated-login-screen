"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.determineEntryPoint = determineEntryPoint;
exports.extractAndInitializeTemplateApp = extractAndInitializeTemplateApp;
exports.extractAndPrepareTemplateAppAsync = extractAndPrepareTemplateAppAsync;
exports.extractTemplateAppAsync = extractTemplateAppAsync;
exports.initGitRepoAsync = initGitRepoAsync;
exports.installDependenciesAsync = installDependenciesAsync;
exports.saveRecentExpRootAsync = saveRecentExpRootAsync;
exports.getPublishInfoAsync = getPublishInfoAsync;
exports.sendAsync = sendAsync;
exports.getProjectRandomnessAsync = getProjectRandomnessAsync;
exports.resetProjectRandomnessAsync = resetProjectRandomnessAsync;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _paths() {
  const data = require("@expo/config/paths");

  _paths = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _merge() {
  const data = _interopRequireDefault(require("lodash/merge"));

  _merge = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _jsonFile() {
  const data = _interopRequireDefault(require("@expo/json-file"));

  _jsonFile = function () {
    return data;
  };

  return data;
}

function _minipass() {
  const data = _interopRequireDefault(require("minipass"));

  _minipass = function () {
    return data;
  };

  return data;
}

function _pacote() {
  const data = _interopRequireDefault(require("pacote"));

  _pacote = function () {
    return data;
  };

  return data;
}

function _tar() {
  const data = _interopRequireDefault(require("tar"));

  _tar = function () {
    return data;
  };

  return data;
}

function _jsYaml() {
  const data = _interopRequireDefault(require("js-yaml"));

  _jsYaml = function () {
    return data;
  };

  return data;
}

function _packageManager() {
  const data = require("@expo/package-manager");

  _packageManager = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

function _ApiV() {
  const data = _interopRequireDefault(require("./ApiV2"));

  _ApiV = function () {
    return data;
  };

  return data;
}

function _Logger() {
  const data = _interopRequireDefault(require("./Logger"));

  _Logger = function () {
    return data;
  };

  return data;
}

function _NotificationCode() {
  const data = _interopRequireDefault(require("./NotificationCode"));

  _NotificationCode = function () {
    return data;
  };

  return data;
}

function _User() {
  const data = _interopRequireDefault(require("./User"));

  _User = function () {
    return data;
  };

  return data;
}

function UrlUtils() {
  const data = _interopRequireWildcard(require("./UrlUtils"));

  UrlUtils = function () {
    return data;
  };

  return data;
}

function _UserSettings() {
  const data = _interopRequireDefault(require("./UserSettings"));

  _UserSettings = function () {
    return data;
  };

  return data;
}

function ProjectSettings() {
  const data = _interopRequireWildcard(require("./ProjectSettings"));

  ProjectSettings = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const supportedPlatforms = ['ios', 'android', 'web'];

function determineEntryPoint(projectRoot, platform) {
  if (platform && !supportedPlatforms.includes(platform)) {
    throw new Error(`Failed to resolve the project's entry file: The platform "${platform}" is not supported.`);
  } // TODO: Bacon: support platform extension resolution like .ios, .native
  // const platforms = [platform, 'native'].filter(Boolean) as string[];


  const platforms = [];
  const entry = (0, _paths().getEntryPoint)(projectRoot, ['./index'], platforms);
  if (!entry) throw new Error(`The project entry file could not be resolved. Please either define it in the \`package.json\` (main), \`app.json\` (expo.entryPoint), create an \`index.js\`, or install the \`expo\` package.`);
  return _path().default.relative(projectRoot, entry);
}

function sanitizedName(name) {
  return name.replace(/[\W_]+/g, '').normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

class Transformer extends _minipass().default {
  constructor(config) {
    super();

    _defineProperty(this, "data", void 0);

    _defineProperty(this, "config", void 0);

    this.data = '';
    this.config = config;
  }

  write(data) {
    this.data += data;
    return true;
  }

  end() {
    let replaced = this.data.replace(/Hello App Display Name/g, this.config.name).replace(/HelloWorld/g, sanitizedName(this.config.name)).replace(/helloworld/g, sanitizedName(this.config.name.toLowerCase()));
    super.write(replaced);
    return super.end();
  }

} // Binary files, don't process these (avoid decoding as utf8)


const binaryExtensions = ['.png', '.jar', '.keystore'];

function createFileTransform(config) {
  return function transformFile(entry) {
    if (!binaryExtensions.includes(_path().default.extname(entry.path)) && config.name) {
      return new Transformer(config);
    }

    return undefined;
  };
}
/**
 * Extract a template app to a given file path, initialize a git repo, install
 * npm dependencies, and log information about each of the steps.
 *
 * @deprecated - callers want to have more control over the logging around each
 * step, this is deprecated in favor of calling the methods that it is made up
 * of individually
 */


async function extractAndInitializeTemplateApp(templateSpec, projectRoot, packageManager = 'npm', config) {
  _Logger().default.notifications.warn('extractAndInitializeTemplateApp is deprecated. Use extractAndPrepareTemplateAppAsync instead.');

  _Logger().default.notifications.info({
    code: _NotificationCode().default.PROGRESS
  }, 'Extracting project files...');

  await extractAndPrepareTemplateAppAsync(templateSpec, projectRoot, config);

  _Logger().default.notifications.info({
    code: _NotificationCode().default.PROGRESS
  }, 'Initializing a git repository...');

  await initGitRepoAsync(projectRoot);

  _Logger().default.notifications.info({
    code: _NotificationCode().default.PROGRESS
  }, 'Installing dependencies...');

  await installDependenciesAsync(projectRoot, packageManager);
  return projectRoot;
}
/**
 * Extract a template app to a given file path and clean up any properties left over from npm to
 * prepare it for usage.
 */


async function extractAndPrepareTemplateAppAsync(templateSpec, projectRoot, config) {
  await extractTemplateAppAsync(templateSpec, projectRoot, {
    name: 'name' in config ? config.name : config.expo.name
  });
  let appFile = new (_jsonFile().default)(_path().default.join(projectRoot, 'app.json'));
  let appJson = (0, _merge().default)((await appFile.readAsync()), config);
  await appFile.writeAsync(appJson);
  let packageFile = new (_jsonFile().default)(_path().default.join(projectRoot, 'package.json'));
  let packageJson = await packageFile.readAsync(); // Adding `private` stops npm from complaining about missing `name` and `version` fields.
  // We don't add a `name` field because it also exists in `app.json`.

  packageJson = { ...packageJson,
    private: true
  }; // These are metadata fields related to the template package, let's remove them from the package.json.

  delete packageJson.name;
  delete packageJson.version;
  delete packageJson.description;
  delete packageJson.tags;
  delete packageJson.repository; // pacote adds these, but we don't want them in the package.json of the project.

  delete packageJson._resolved;
  delete packageJson._integrity;
  delete packageJson._from;
  await packageFile.writeAsync(packageJson);
  return projectRoot;
}
/**
 * Extract a template app to a given file path.
 */


async function extractTemplateAppAsync(templateSpec, targetPath, config) {
  await _pacote().default.tarball.stream(templateSpec, tarStream => {
    return extractTemplateAppAsyncImpl(targetPath, config, tarStream);
  }, {
    cache: _path().default.join(_UserSettings().default.dotExpoHomeDirectory(), 'template-cache')
  });
  return targetPath;
}

async function extractTemplateAppAsyncImpl(targetPath, config, tarStream) {
  await _fsExtra().default.mkdirp(targetPath);
  await new Promise((resolve, reject) => {
    const extractStream = _tar().default.x({
      cwd: targetPath,
      strip: 1,
      // TODO(ville): pending https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36598
      // @ts-ignore property missing from the type definition
      transform: createFileTransform(config),

      onentry(entry) {
        if (config.name) {
          // Rewrite paths for bare workflow
          entry.path = entry.path.replace(/HelloWorld/g, entry.path.includes('android') ? sanitizedName(config.name.toLowerCase()) : sanitizedName(config.name)).replace(/helloworld/g, sanitizedName(config.name).toLowerCase());
        }

        if (entry.type && /^file$/i.test(entry.type) && _path().default.basename(entry.path) === 'gitignore') {
          // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.
          // See: https://github.com/npm/npm/issues/1862
          entry.path = entry.path.replace(/gitignore$/, '.gitignore');
        }
      }

    });

    tarStream.on('error', reject);
    extractStream.on('error', reject);
    extractStream.on('close', resolve);
    tarStream.pipe(extractStream);
  });
}

async function initGitRepoAsync(root, flags = {
  silent: false,
  commit: true
}) {
  // let's see if we're in a git tree
  try {
    await (0, _spawnAsync().default)('git', ['rev-parse', '--is-inside-work-tree'], {
      cwd: root
    });
    !flags.silent && _Logger().default.global.debug('New project is already inside of a git repo, skipping git init.');
  } catch (e) {
    if (e.errno === 'ENOENT') {
      !flags.silent && _Logger().default.global.warn('Unable to initialize git repo. `git` not in PATH.');
      return false;
    }
  } // not in git tree, so let's init


  try {
    await (0, _spawnAsync().default)('git', ['init'], {
      cwd: root
    });
    !flags.silent && _Logger().default.global.info('Initialized a git repository.');

    if (flags.commit) {
      await (0, _spawnAsync().default)('git', ['add', '--all'], {
        cwd: root,
        stdio: 'ignore'
      });
      await (0, _spawnAsync().default)('git', ['commit', '-m', 'Created a new Expo app'], {
        cwd: root,
        stdio: 'ignore'
      });
    }

    return true;
  } catch (e) {
    // no-op -- this is just a convenience and we don't care if it fails
    return false;
  }
}

async function installDependenciesAsync(projectRoot, packageManager, flags = {
  silent: false
}) {
  const options = {
    cwd: projectRoot,
    silent: flags.silent
  };

  if (packageManager === 'yarn') {
    const yarn = new (_packageManager().YarnPackageManager)(options);
    const version = await yarn.versionAsync();
    const nodeLinker = await yarn.getConfigAsync('nodeLinker');

    if (_semver().default.satisfies(version, '>=2.0.0-rc.24') && nodeLinker !== 'node-modules') {
      const yarnRc = _path().default.join(projectRoot, '.yarnrc.yml');

      let yamlString = '';

      try {
        yamlString = _fsExtra().default.readFileSync(yarnRc, 'utf8');
      } catch (error) {
        if (error.code !== 'ENOENT') {
          throw error;
        }
      }

      const config = yamlString ? _jsYaml().default.safeLoad(yamlString) : {};
      config.nodeLinker = 'node-modules';
      !flags.silent && _Logger().default.global.warn(`Yarn v${version} detected, enabling experimental Yarn v2 support using the node-modules plugin.`);
      !flags.silent && _Logger().default.global.info(`Writing ${yarnRc}...`);

      _fsExtra().default.writeFileSync(yarnRc, _jsYaml().default.safeDump(config));
    }

    await yarn.installAsync();
  } else {
    await new (_packageManager().NpmPackageManager)(options).installAsync();
  }
}

async function saveRecentExpRootAsync(root) {
  root = _path().default.resolve(root); // Write the recent Exps JSON file

  const recentExpsJsonFile = _UserSettings().default.recentExpsJsonFile();

  let recentExps = await recentExpsJsonFile.readAsync(); // Filter out copies of this so we don't get dupes in this list

  recentExps = recentExps.filter(dir => dir !== root);
  recentExps.unshift(root);
  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));
}

// TODO: remove / change, no longer publishInfo, this is just used for signing
async function getPublishInfoAsync(root) {
  const user = await _User().default.ensureLoggedInAsync();

  if (!user) {
    throw new Error('Attempted to login in offline mode. This is a bug.');
  }

  let {
    username
  } = user; // Evaluate the project config and throw an error if the `sdkVersion` cannot be found.

  const {
    exp
  } = (0, _config().getConfig)(root);
  const name = exp.slug;
  const {
    version,
    sdkVersion
  } = exp;

  if (!name) {
    // slug is made programmatically for app.json
    throw new Error(`Cannot find the project's \`slug\`. Please add a \`name\` or \`slug\` field in the project's \`app.json\` or \`app.config.js\`). ex: \`"slug": "my-project"\``);
  }

  if (!version) {
    throw new Error(`Cannot find the project's \`version\`. Please define it in one of the project's config files: \`package.json\`, \`app.json\`, or \`app.config.js\`. ex: \`"version": "1.0.0"\``);
  }

  const remotePackageName = name;
  const remoteUsername = username;
  const remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;
  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;
  const androidPackage = exp.android ? exp.android.package : null;
  return {
    args: {
      username,
      remoteUsername,
      remotePackageName,
      remoteFullPackageName,
      sdkVersion: sdkVersion,
      iosBundleIdentifier,
      androidPackage
    }
  };
}

async function sendAsync(recipient, url_, allowUnauthed = true) {
  const user = await _User().default.ensureLoggedInAsync();

  const api = _ApiV().default.clientForUser(user);

  return await api.postAsync('send-project', {
    emailOrPhone: recipient,
    url: url_,
    includeExpoLinks: allowUnauthed
  });
} // TODO: figure out where these functions should live


async function getProjectRandomnessAsync(projectRoot) {
  let ps = await ProjectSettings().readAsync(projectRoot);
  let randomness = ps.urlRandomness;

  if (randomness) {
    return randomness;
  } else {
    return resetProjectRandomnessAsync(projectRoot);
  }
}

async function resetProjectRandomnessAsync(projectRoot) {
  let randomness = UrlUtils().someRandomness();
  ProjectSettings().setAsync(projectRoot, {
    urlRandomness: randomness
  });
  return randomness;
}
//# sourceMappingURL=__sourcemaps__/Exp.js.map
