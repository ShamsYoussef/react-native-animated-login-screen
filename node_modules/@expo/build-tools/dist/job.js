"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("@hapi/joi"));
const BuildConfig = __importStar(require("./buildConfig"));
const constants_1 = require("./constants");
const Android = __importStar(require("./platforms/android"));
const iOS = __importStar(require("./platforms/ios"));
const JobSchema = joi_1.default.object({
    platform: joi_1.default.string().valid(...Object.values(constants_1.Platform)).required(),
})
    .when(joi_1.default.object({ platform: constants_1.Platform.Android }).unknown(), { then: Android.JobSchema })
    .when(joi_1.default.object({ platform: constants_1.Platform.iOS }).unknown(), { then: iOS.JobSchema });
exports.JobSchema = JobSchema;
function validateJob(job) {
    const { value, error } = JobSchema.validate(job);
    if (error) {
        throw error;
    }
    else {
        return value;
    }
}
async function prepareJob(platform, projectUrl, projectDir) {
    const turtleJson = await BuildConfig.read(projectDir);
    let job;
    if (platform === constants_1.Platform.Android) {
        if (!turtleJson.android) {
            throw new Error('Android configuration is missing!');
        }
        if (turtleJson.type === constants_1.BuildType.Generic) {
            job = await Android.prepareGenericJob(turtleJson.android, projectUrl, projectDir);
        }
        else if (turtleJson.type === constants_1.BuildType.Managed) {
            job = await Android.prepareManagedJob(turtleJson.android, projectUrl, projectDir);
        }
        else {
            throw new Error('Unsupported build type');
        }
    }
    else if (platform === constants_1.Platform.iOS) {
        if (!turtleJson.ios) {
            throw new Error('iOS configuration is missing!');
        }
        if (turtleJson.type === constants_1.BuildType.Generic) {
            job = await iOS.prepareGenericJob(turtleJson.ios, projectUrl, projectDir);
        }
        else if (turtleJson.type === constants_1.BuildType.Managed) {
            job = await iOS.prepareManagedJob(turtleJson.ios, projectUrl, projectDir);
        }
        else {
            throw new Error('Unsupported build type');
        }
    }
    else {
        throw new Error('Unsupported platform');
    }
    return validateJob(job);
}
exports.prepareJob = prepareJob;
//# sourceMappingURL=job.js.map