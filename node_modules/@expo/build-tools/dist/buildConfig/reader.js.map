{"version":3,"file":"reader.js","sourceRoot":"","sources":["../../src/buildConfig/reader.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AAExB,wDAA0B;AAE1B,sDAAyC;AAGzC,MAAM,iBAAiB,GAAG,aAAa,CAAC;AAExC,KAAK,UAAU,IAAI,CAAC,QAAgB;IAClC,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACnE,IAAI,aAAa,CAAC;IAClB,IAAI;QACF,MAAM,kBAAkB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAC1E,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;KAChD;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,GAAG,iBAAiB,oEAAoE,CAAC,CAAC;KAC3G;IAED,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,gBAAiB,CAAC,QAAQ,CAC9D,aAAa,EACb;QACE,YAAY,EAAE,IAAI;QAClB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,KAAK;KAClB,CACF,CAAC;IACF,IAAI,KAAK,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,GAAG,iBAAiB,kBAAkB,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC5E;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\n\nimport BuildConfigSchema from './schema';\nimport { BuildConfig } from './types';\n\nconst BUILD_CONFIG_FILE = 'turtle.json';\n\nasync function read(buildDir: string): Promise<BuildConfig> {\n  const buildConfigFilePath = path.join(buildDir, BUILD_CONFIG_FILE);\n  let turtleJSONRaw;\n  try {\n    const turtleJSONContents = await fs.readFile(buildConfigFilePath, 'utf8');\n    turtleJSONRaw = JSON.parse(turtleJSONContents);\n  } catch (err) {\n    throw new Error(`${BUILD_CONFIG_FILE} must exist in the project root directory and consist a valid json`);\n  }\n\n  const { value: buildConfig, error } = BuildConfigSchema.validate<BuildConfig>(\n    turtleJSONRaw,\n    {\n      stripUnknown: true,\n      convert: true,\n      abortEarly: false,\n    },\n  );\n  if (error) {\n    throw new Error(`${BUILD_CONFIG_FILE} is not valid [${error.toString()}]`);\n  }\n\n  return buildConfig;\n}\n\nexport default read;\n"]}