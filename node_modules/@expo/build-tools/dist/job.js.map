{"version":3,"file":"job.js","sourceRoot":"","sources":["../src/job.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oDAA4B;AAE5B,2DAA6C;AAC7C,2CAAkD;AAClD,6DAA+C;AAC/C,qDAAuC;AASvC,MAAM,SAAS,GAAG,aAAG,CAAC,MAAM,CAAC;IAC3B,QAAQ,EAAE,aAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE;CACpE,CAAC;KACC,IAAI,CACH,aAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,oBAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,EACpD,EAAE,IAAI,EAAE,OAAO,CAAC,SAAS,EAAE,CAC5B;KACA,IAAI,CACH,aAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,oBAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,EAChD,EAAE,IAAI,EAAE,GAAG,CAAC,SAAS,EAAE,CACxB,CAAC;AA6CU,8BAAS;AA3CvB,SAAS,WAAW,CAAC,GAAQ;IAC3B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjD,IAAI,KAAK,EAAE;QACT,MAAM,KAAK,CAAC;KACb;SAAM;QACL,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAED,KAAK,UAAU,UAAU,CAAC,QAAkB,EAAE,UAAkB,EAAE,UAAkB;IAClF,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAEtD,IAAI,GAAQ,CAAC;IACb,IAAI,QAAQ,KAAK,oBAAQ,CAAC,OAAO,EAAE;QACjC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACtD;QACD,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAS,CAAC,OAAO,EAAE;YACzC,GAAG,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAE,UAAU,CAAC,OAAqC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SAClH;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAS,CAAC,OAAO,EAAE;YAChD,GAAG,GAAG,MAAM,OAAO,CAAC,iBAAiB,CAAE,UAAU,CAAC,OAAqC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SAClH;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;KACF;SAAM,IAAI,QAAQ,KAAK,oBAAQ,CAAC,GAAG,EAAE;QACpC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QACD,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAS,CAAC,OAAO,EAAE;YACzC,GAAG,GAAG,MAAM,GAAG,CAAC,iBAAiB,CAAE,UAAU,CAAC,GAA6B,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SACtG;aAAM,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAS,CAAC,OAAO,EAAE;YAChD,GAAG,GAAG,MAAM,GAAG,CAAC,iBAAiB,CAAE,UAAU,CAAC,GAA6B,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SACtG;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC3C;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;KACzC;IAED,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAGwB,gCAAU","sourcesContent":["import Joi from '@hapi/joi';\n\nimport * as BuildConfig from './buildConfig';\nimport { Platform, BuildType } from './constants';\nimport * as Android from './platforms/android';\nimport * as iOS from './platforms/ios';\n\ntype Job = Android.Job | iOS.Job;\n\ntype GenericAndroidBuildConfig = BuildConfig.types.GenericAndroidBuildConfig;\ntype GenericiOSBuildConfig = BuildConfig.types.GenericiOSBuildConfig;\ntype ManagedAndroidBuildConfig = BuildConfig.types.ManagedAndroidBuildConfig;\ntype ManagediOSBuildConfig = BuildConfig.types.ManagediOSBuildConfig;\n\nconst JobSchema = Joi.object({\n  platform: Joi.string().valid(...Object.values(Platform)).required(),\n})\n  .when(\n    Joi.object({ platform: Platform.Android }).unknown(),\n    { then: Android.JobSchema },\n  )\n  .when(\n    Joi.object({ platform: Platform.iOS }).unknown(),\n    { then: iOS.JobSchema },\n  );\n\nfunction validateJob(job: Job): Job {\n  const { value, error } = JobSchema.validate(job);\n  if (error) {\n    throw error;\n  } else {\n    return value;\n  }\n}\n\nasync function prepareJob(platform: Platform, projectUrl: string, projectDir: string): Promise<Job> {\n  const turtleJson = await BuildConfig.read(projectDir);\n\n  let job: Job;\n  if (platform === Platform.Android) {\n    if (!turtleJson.android) {\n      throw new Error('Android configuration is missing!');\n    }\n    if (turtleJson.type === BuildType.Generic) {\n      job = await Android.prepareGenericJob((turtleJson.android as GenericAndroidBuildConfig), projectUrl, projectDir);\n    } else if (turtleJson.type === BuildType.Managed) {\n      job = await Android.prepareManagedJob((turtleJson.android as ManagedAndroidBuildConfig), projectUrl, projectDir);\n    } else {\n      throw new Error('Unsupported build type');\n    }\n  } else if (platform === Platform.iOS) {\n    if (!turtleJson.ios) {\n      throw new Error('iOS configuration is missing!');\n    }\n    if (turtleJson.type === BuildType.Generic) {\n      job = await iOS.prepareGenericJob((turtleJson.ios as GenericiOSBuildConfig), projectUrl, projectDir);\n    } else if (turtleJson.type === BuildType.Managed) {\n      job = await iOS.prepareManagedJob((turtleJson.ios as ManagediOSBuildConfig), projectUrl, projectDir);\n    } else {\n      throw new Error('Unsupported build type');\n    }\n  } else {\n    throw new Error('Unsupported platform');\n  }\n\n  return validateJob(job);\n}\n\n\nexport { Job, JobSchema, prepareJob };\n"]}