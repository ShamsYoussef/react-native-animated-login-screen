{"version":3,"file":"keychain.js","sourceRoot":"","sources":["../../../../src/platforms/ios/utils/keychain.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport fastlane from '@expo/fastlane';\nimport spawn from '@expo/turtle-spawn';\nimport { bunyan } from '@expo/logger';\nimport uuidv4 from 'uuid/v4';\n\nclass Keychain {\n  private logger: bunyan;\n  private keychainPath: string;\n  private keychainPassword: string;\n  private created = false;\n\n  constructor(logger: bunyan) {\n    this.logger = logger;\n    this.keychainPath = path.join(os.tmpdir(), `turtle-v2-${uuidv4()}.keychain`);\n    this.keychainPassword = uuidv4();\n  }\n\n  get data(): { path: string; password: string } {\n    return {\n      path: this.keychainPath,\n      password: this.keychainPassword,\n    };\n  }\n\n  public async create(): Promise<void> {\n    this.logger.debug(`Creating keychain - ${this.keychainPath}`);\n    await fastlane([\n      'run',\n      'create_keychain',\n      `path:${this.keychainPath}`,\n      `password:${this.keychainPassword}`,\n      'unlock:true',\n      'timeout:360000',\n    ]);\n    this.created = true;\n  }\n\n  public async importCertificate(certPath: string, certPassword: string): Promise<void> {\n    if (!this.created) {\n      throw new Error('You must create a keychain first.');\n    }\n\n    this.logger.debug(`Importing certificate ${certPath} into keychain ${this.keychainPath}`);\n    await fastlane([\n      'run',\n      'import_certificate',\n      `certificate_path:${certPath}`,\n      `certificate_password:${certPassword}`,\n      `keychain_path:${this.keychainPath}`,\n      `keychain_password:${this.keychainPassword}`,\n    ]);\n  }\n\n  public async ensureCertificateImported(teamId: string, fingerprint: string): Promise<void> {\n    const identities = await this.findIdentitiesByTeamId(teamId);\n    if (!identities.includes(fingerprint)) {\n      throw new Error(`Distribution certificate with fingerprint ${fingerprint} hasn't been imported successfully`);\n    }\n  }\n\n  public async destroy(keychainPath?: string): Promise<void> {\n    if (!keychainPath && !this.created) {\n      this.logger.warn('There is nothing to destroy, a keychain hasn\\'t been created yet.');\n      return;\n    }\n    const keychainToDeletePath = keychainPath || this.keychainPath;\n    this.logger.info(`Destroying keychain - ${keychainToDeletePath}`);\n    await fastlane([\n      'run',\n      'delete_keychain',\n      `keychain_path:${keychainToDeletePath}`,\n    ]);\n  }\n\n  public async cleanUpKeychains(): Promise<void> {\n    const { stdout } = await spawn('security', ['list-keychains'], { stdio: 'pipe' });\n    const keychainList = (/\"(.*)\"/g.exec(stdout) || [] as Array<string>).map((i) => i.slice(1, i.length - 1));\n    const turtleKeychainList = keychainList.filter((keychain) => /turtle-v2-[\\w-]+\\.keychain$/.exec(keychain));\n    for (const turtleKeychainPath of turtleKeychainList) {\n      await this.destroy(turtleKeychainPath);\n    }\n  }\n\n  private async findIdentitiesByTeamId(teamId: string): Promise<string> {\n    const { output } = await spawn(\n      'security',\n      ['find-identity', '-v', '-s', `(${teamId})`, this.keychainPath],\n      { stdio: 'pipe' },\n    );\n    return output.join('');\n  }\n}\n\nexport default Keychain;\n"]}