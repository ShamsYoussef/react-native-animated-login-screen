{"version":3,"file":"provisioningProfile.js","sourceRoot":"","sources":["../../../../src/platforms/ios/utils/provisioningProfile.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport os from 'os';\nimport path from 'path';\n\nimport { bunyan } from '@expo/logger';\nimport spawn from '@expo/turtle-spawn';\nimport fs from 'fs-extra';\nimport isError from 'lodash/isError';\nimport plist from 'plist';\nimport uuid from 'uuid/v4';\n\ninterface ProvisioningProfileData {\n  bundleIdentifier: string;\n  teamId: string;\n  uuid: string;\n  developerCertificate: Buffer;\n}\n\nconst PROVISIONING_PROFILES_DIRECTORY = path.join(\n  os.homedir(),\n  'Library/MobileDevice/Provisioning Profiles',\n);\n\nclass ProvisioningProfile {\n  get data(): ProvisioningProfileData {\n    if (!this.profileData) {\n      throw new Error('You must init the profile first!');\n    } else {\n      return this.profileData;\n    }\n  }\n\n  private logger: bunyan;\n  private profile: Buffer;\n  private profilePath: string;\n  private profileData?: ProvisioningProfileData;\n\n  constructor(logger: bunyan, profile: Buffer) {\n    this.logger = logger;\n    this.profile = profile;\n    this.profilePath = path.join(PROVISIONING_PROFILES_DIRECTORY, `${uuid()}.mobileprovision`);\n  }\n\n  public async init(): Promise<void> {\n    this.logger.debug(`Making sure ${PROVISIONING_PROFILES_DIRECTORY} exits`);\n    await fs.ensureDir(PROVISIONING_PROFILES_DIRECTORY);\n\n    this.logger.debug(`Writing provisioning profile to ${this.profilePath}`);\n    await fs.writeFile(this.profilePath, this.profile);\n\n    this.logger.debug('Loading provisioning profile');\n    await this.load();\n  }\n\n  public async destroy(): Promise<void> {\n    if (!this.profilePath) {\n      this.logger.warn('There is nothing to destroy, a provisioning profile hasn\\'t been created yet.');\n      return;\n    }\n    this.logger.info('Removing provisioning profile');\n    await fs.remove(this.profilePath);\n  }\n\n  public verifyCertificate(fingerprint: string): void {\n    const devCertFingerprint = this.genDerCertFingerprint();\n    if (devCertFingerprint !== fingerprint) {\n      throw new Error(\n        `Provisioning profile and distribution certificate don't match.\nProfile's certificate fingerprint = ${devCertFingerprint}, distribution certificate fingerprint = ${fingerprint}`,\n      );\n    }\n  }\n\n  private async load(): Promise<void> {\n    let result;\n    try {\n      result = await spawn(\n        'security',\n        ['cms', '-D', '-i', this.profilePath],\n        { stdio: 'pipe' },\n      );\n    } catch (err) {\n      throw new Error(err.stderr.trim());\n    }\n    const { output } = result;\n\n    const plistRaw = output.join('');\n    const plistData = plist.parse(plistRaw) as plist.PlistObject;\n    if (isError(plistData)) {\n      throw new Error(`Error when parsing plist: ${plistData.message}`);\n    }\n\n    const applicationIdentifier = (plistData.Entitlements as plist.PlistObject)['application-identifier'] as string;\n    const bundleIdentifier = applicationIdentifier.replace(/^.+?\\./, '');\n\n    this.profileData = {\n      bundleIdentifier,\n      teamId: (plistData.TeamIdentifier as string[])[0],\n      uuid: plistData.UUID as string,\n      developerCertificate: Buffer.from((plistData.DeveloperCertificates as string[])[0], 'base64'),\n    };\n  }\n\n  private genDerCertFingerprint(): string {\n    return crypto\n      .createHash('sha1')\n      .update(this.data.developerCertificate)\n      .digest('hex')\n      .toUpperCase();\n  }\n}\n\nexport default ProvisioningProfile;\n"]}