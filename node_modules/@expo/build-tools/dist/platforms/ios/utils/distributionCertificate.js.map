{"version":3,"file":"distributionCertificate.js","sourceRoot":"","sources":["../../../../src/platforms/ios/utils/distributionCertificate.ts"],"names":[],"mappings":";;;;;AAAA,4DAA+B;AAI/B,SAAS,cAAc,CAAC,EAAE,UAAU,EAAE,QAAQ,EAA2B;IACvE,MAAM,QAAQ,GAAG,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACnD,MAAM,QAAQ,GAAG,oBAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACvD,MAAM,OAAO,GAAG,oBAAK,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IACtD,MAAM,WAAW,GAAG,oBAAK,CAAC,EAAE,CAAC,IAAI;SAC9B,MAAM,EAAE;SACR,MAAM,CAAC,OAAO,CAAC;SACf,MAAM,EAAE;SACR,KAAK,EAAE;SACP,WAAW,EAAE,CAAC;IACjB,OAAO,WAAW,CAAC;AACrB,CAAC;AAyBQ,wCAAc;AAvBvB,SAAS,WAAW,CAAC,iBAAyB,EAAE,QAAgB;;IAC9D,MAAM,MAAM,GAAG,oBAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,oBAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3C,IAAI,GAA2B,CAAC;IAChC,IAAI;QACF,GAAG,GAAG,oBAAK,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;KACtD;IAAC,OAAO,MAAM,EAAE;QACf,MAAM,KAAK,GAAU,MAAM,CAAC;QAC5B,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YAC1C,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC3F;aAAM;YACL,MAAM,KAAK,CAAC;SACb;KACF;IAED,MAAM,WAAW,GAAG,oBAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3C,MAAM,QAAQ,qBAAG,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,0CAAG,WAAW,2CAAI,CAAC,2CAAG,IAAI,CAAC;IACjF,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;KACzD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import forge from 'node-forge';\n\nimport { DistributionCertificate } from '../baseJob';\n\nfunction getFingerprint({ dataBase64, password }: DistributionCertificate): string {\n  const certData = getCertData(dataBase64, password);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  const fingerprint = forge.md.sha1\n    .create()\n    .update(certDer)\n    .digest()\n    .toHex()\n    .toUpperCase();\n  return fingerprint;\n}\n\nfunction getCertData(certificateBase64: string, password: string): any {\n  const p12Der = forge.util.decode64(certificateBase64);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  let p12: forge.pkcs12.Pkcs12Pfx;\n  try {\n    p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  } catch (_error) {\n    const error: Error = _error;\n    if (/Invalid password/.exec(error.message)) {\n      throw new Error('Provided password for the distribution certificate is probably invalid');\n    } else {\n      throw error;\n    }\n  }\n\n  const certBagType = forge.pki.oids.certBag;\n  const certData = p12.getBags({ bagType: certBagType })?.[certBagType]?.[0]?.cert;\n  if (!certData) {\n    throw new Error('getCertData: couldn\\'t find cert bag');\n  }\n  return certData;\n}\n\nexport { getFingerprint };\n"]}