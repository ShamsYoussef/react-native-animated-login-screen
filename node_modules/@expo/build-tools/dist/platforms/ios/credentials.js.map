{"version":3,"file":"credentials.js","sourceRoot":"","sources":["../../../src/platforms/ios/credentials.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { bunyan } from '@expo/logger';\nimport fs from 'fs-extra';\nimport uuid from 'uuid/v4';\n\nimport { iOSJob } from './job';\nimport * as distributionCertificateUtils from './utils/distributionCertificate';\nimport Keychain from './utils/keychain';\nimport ProvisioningProfile from './utils/provisioningProfile';\n\ninterface Credentials {\n  bundleIdentifier: string;\n  keychainPath: string;\n  provisioningProfileUUID: string;\n  teamId: string;\n}\n\nclass iOSCredentialsManager {\n  private job: iOSJob;\n  private logger: bunyan;\n  private distributionCertificatePath: string;\n  private provisioningProfile?: ProvisioningProfile;\n  private keychain?: Keychain;\n  private cleanedUp = false;\n\n  constructor(logger: bunyan, job: iOSJob) {\n    this.logger = logger;\n    this.job = job;\n    this.distributionCertificatePath = path.join(os.tmpdir(), `${uuid()}.p12`);\n  }\n\n  public async prepare(): Promise<{\n    bundleIdentifier: string;\n    keychainPath: string;\n    provisioningProfileUUID: string;\n    teamId: string;\n  }> {\n    const { secrets } = this.job;\n\n    this.logger.info('Getting distribution certificate fingerprint');\n    const certificateFingerprint = distributionCertificateUtils.getFingerprint(secrets.distributionCertificate);\n\n    this.logger.info(`Writing distribution certificate to ${this.distributionCertificatePath}`);\n    await fs.writeFile(\n      this.distributionCertificatePath,\n      Buffer.from(secrets.distributionCertificate.dataBase64, 'base64'),\n    );\n\n    try {\n      this.logger.info('Creating keychain');\n      this.keychain = new Keychain(this.logger);\n      await this.keychain.create();\n\n      this.logger.info('Importing distribution certificate into the keychain');\n      await this.keychain.importCertificate(\n        this.distributionCertificatePath,\n        secrets.distributionCertificate.password,\n      );\n\n      this.logger.info('Initializing provisioning profile');\n      this.provisioningProfile = new ProvisioningProfile(\n        this.logger,\n        Buffer.from(secrets.provisioningProfileBase64, 'base64'),\n      );\n      await this.provisioningProfile.init();\n\n      this.logger.info('Validating whether distribution certificate has been imported successfully');\n      await this.keychain.ensureCertificateImported(this.provisioningProfile.data.teamId, certificateFingerprint);\n\n      this.logger.info('Verifying whether the distribution certificate and provisioning profile match');\n      this.provisioningProfile.verifyCertificate(certificateFingerprint);\n\n      return {\n        bundleIdentifier: this.provisioningProfile.data.bundleIdentifier,\n        keychainPath: this.keychain.data.path,\n        provisioningProfileUUID: this.provisioningProfile.data.uuid,\n        teamId: this.provisioningProfile.data.teamId,\n      };\n    } catch (err) {\n      await this.cleanUp();\n      throw err;\n    }\n  }\n\n  public async cleanUp(): Promise<void> {\n    if (this.cleanedUp) {\n      return;\n    }\n    if (this.keychain) {\n      await this.keychain.destroy();\n    }\n    if (this.provisioningProfile) {\n      await this.provisioningProfile.destroy();\n    }\n    this.cleanedUp = true;\n  }\n}\n\nexport { Credentials, iOSCredentialsManager };\n"]}