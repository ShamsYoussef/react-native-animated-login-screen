{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../src/platforms/ios/generic/builder.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AAExB,8DAAsC;AACtC,sEAAuC;AAGvC,oDAA+C;AAC/C,gDAAuD;AACvD,8CAAiF;AAIjF,KAAK,UAAU,YAAY,CAAC,GAA8B;IACxD,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IAE5B,MAAM,cAAc,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,sBAAsB,GAAG,cAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAErF,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC/B,MAAM,sBAAK,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,EAAE,sBAAsB,EAAE,MAAM,EAAE,CAAC,CAAC;IAEzE,MAAM,kBAAkB,GAAG,IAAI,mCAAqB,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACtE,IAAI;QACF,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACrC,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,cAAc,GAAG,MAAM,2BAAwB,CACnD,WAAW,EACX;YACE,sBAAsB;YACtB,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,eAAe,EAAE,SAAS;SAC3B,CACF,CAAC;QAEF,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAChC;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;SACvD;QAED,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC7B,MAAM,kBAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;YACtB,GAAG,EAAE,sBAAsB;YAC3B,MAAM;SACP,CAAC,CAAC;QAEH,OAAO,cAAI,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;KACpD;YAAS;QACR,MAAM,kBAAkB,CAAC,OAAO,EAAE,CAAC;KACpC;AACH,CAAC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import path from 'path';\n\nimport fastlane from '@expo/fastlane';\nimport spawn from '@expo/turtle-spawn';\n\nimport { BuilderCtx } from '../../../context';\nimport { setup } from '../../../utils/project';\nimport { iOSCredentialsManager } from '../credentials';\nimport { createIfNotExists as createGymfileIfNotExists } from '../utils/gymfile';\n\nimport { GenericiOSJob } from './job';\n\nasync function buildGeneric(ctx: BuilderCtx<GenericiOSJob>): Promise<string> {\n  const { job, logger } = ctx;\n\n  const buildDirectory = await setup(ctx);\n  const nativeProjectDirectory = path.join(buildDirectory, job.nativeProjectDirectory);\n\n  logger.info('Installing pods');\n  await spawn('pod', ['install'], { cwd: nativeProjectDirectory, logger });\n\n  const credentialsManager = new iOSCredentialsManager(ctx.logger, job);\n  try {\n    logger.info('Preparing credentials');\n    const credentials = await credentialsManager.prepare();\n\n    logger.info('Creating Gymfile if not exists');\n    const createdGymfile = await createGymfileIfNotExists(\n      credentials,\n      {\n        nativeProjectDirectory,\n        outputName: job.outputName,\n        outputDirectory: './build',\n      },\n    );\n\n    if (createdGymfile) {\n      logger.info('Gymfile created');\n    } else {\n      logger.info('Gymfile for the project already exists');\n    }\n\n    logger.info('Running build');\n    await fastlane(['gym'], {\n      cwd: nativeProjectDirectory,\n      logger,\n    });\n\n    return path.join(buildDirectory, job.artifactPath);\n  } finally {\n    await credentialsManager.cleanUp();\n  }\n}\n\nexport default buildGeneric;\n"]}