"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fastlane_1 = __importDefault(require("@expo/fastlane"));
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const project_1 = require("../../../utils/project");
const credentials_1 = require("../credentials");
const gymfile_1 = require("../utils/gymfile");
async function buildGeneric(ctx) {
    const { job, logger } = ctx;
    const buildDirectory = await project_1.setup(ctx);
    const nativeProjectDirectory = path_1.default.join(buildDirectory, job.nativeProjectDirectory);
    logger.info('Installing pods');
    await turtle_spawn_1.default('pod', ['install'], { cwd: nativeProjectDirectory, logger });
    const credentialsManager = new credentials_1.iOSCredentialsManager(ctx.logger, job);
    try {
        logger.info('Preparing credentials');
        const credentials = await credentialsManager.prepare();
        logger.info('Creating Gymfile if not exists');
        const createdGymfile = await gymfile_1.createIfNotExists(credentials, {
            nativeProjectDirectory,
            outputName: job.outputName,
            outputDirectory: './build',
        });
        if (createdGymfile) {
            logger.info('Gymfile created');
        }
        else {
            logger.info('Gymfile for the project already exists');
        }
        logger.info('Running build');
        await fastlane_1.default(['gym'], {
            cwd: nativeProjectDirectory,
            logger,
        });
        return path_1.default.join(buildDirectory, job.artifactPath);
    }
    finally {
        await credentialsManager.cleanUp();
    }
}
exports.default = buildGeneric;
//# sourceMappingURL=builder.js.map