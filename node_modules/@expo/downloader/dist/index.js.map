{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,oDAA4B;AAC5B,+BAAiC;AAEjC,4DAA+B;AAE/B,MAAM,QAAQ,GAAG,gBAAS,CAAC,gBAAM,CAAC,QAAQ,CAAC,CAAC;AAE5C,KAAK,UAAU,YAAY,CACzB,MAAc,EACd,UAAkB,EAClB,OAAgB;IAEhB,MAAM,GAAG,GAAG,MAAM,oBAAK,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7C,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,6CAA6C,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;KAC5E;IACD,MAAM,QAAQ,CACZ,GAAG,CAAC,IAAI,EACR,YAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC,CACjC,CAAC;AACJ,CAAC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import fs from 'fs';\nimport stream from 'stream';\nimport { promisify } from 'util';\n\nimport fetch from 'node-fetch';\n\nconst pipeline = promisify(stream.pipeline);\n\nasync function downloadFile(\n  srcUrl: string,\n  outputPath: string,\n  timeout?: number,\n): Promise<void> {\n  const res = await fetch(srcUrl, { timeout });\n  if (res.status !== 200) {\n    throw new Error(`Failed to download the file, status code: ${res.status}`);\n  }\n  await pipeline(\n    res.body,\n    fs.createWriteStream(outputPath),\n  );\n}\n\nexport default downloadFile;\n"]}