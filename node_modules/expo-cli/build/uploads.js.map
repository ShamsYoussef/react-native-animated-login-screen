{"version":3,"sources":["../src/uploads.ts"],"names":["UploadType","uploadAsync","uploadType","path","handleProgressEvent","presignedPost","obtainS3PresignedPostAsync","uploadWithPresignedPostAsync","fs","createReadStream","filePath","fileHash","api","getApiClientForUser","presignedUrl","postAsync","type","checksum","stream","form","FormData","fieldKey","fieldValue","Object","entries","fields","append","formHeaders","getHeaders","uploadPromise","got","post","url","body","headers","on","response","String","location","user","UserManager","ensureLoggedInAsync","ApiV2","clientForUser"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;IAEKA,U;;;WAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,0BAAAA,U;;AAOL,eAAeC,WAAf,CACEC,UADF,EAEEC,IAFF,EAGEC,mBAHF,EAImB;AACjB,QAAMC,aAAa,GAAG,MAAMC,0BAA0B,CAACJ,UAAD,EAAaC,IAAb,CAAtD;AACA,SAAO,MAAMI,4BAA4B,CACvCC,cAAGC,gBAAH,CAAoBN,IAApB,CADuC,EAEvCE,aAFuC,EAGvCD,mBAHuC,CAAzC;AAKD;;AAOD,eAAeE,0BAAf,CACEJ,UADF,EAEEQ,QAFF,EAG4B;AAC1B,QAAMC,QAAQ,GAAG,MAAM,wBAAQD,QAAR,CAAvB;AACA,QAAME,GAAG,GAAG,MAAMC,mBAAmB,EAArC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmB,MAAMF,GAAG,CAACG,SAAJ,CAAc,iBAAd,EAAiC;AAC9DC,IAAAA,IAAI,EAAEd,UADwD;AAE9De,IAAAA,QAAQ,EAAEN;AAFoD,GAAjC,CAA/B;AAIA,SAAOG,YAAP;AACD;;AAED,eAAeP,4BAAf,CACEW,MADF,EAEEb,aAFF,EAGED,mBAHF,EAIE;AACA,QAAMe,IAAI,GAAG,KAAIC,eAAJ,GAAb;;AACA,OAAK,MAAM,CAACC,QAAD,EAAWC,UAAX,CAAX,IAAqCC,MAAM,CAACC,OAAP,CAAenB,aAAa,CAACoB,MAA7B,CAArC,EAA2E;AACzEN,IAAAA,IAAI,CAACO,MAAL,CAAYL,QAAZ,EAAsBC,UAAtB;AACD;;AACDH,EAAAA,IAAI,CAACO,MAAL,CAAY,MAAZ,EAAoBR,MAApB;AACA,QAAMS,WAAW,GAAGR,IAAI,CAACS,UAAL,EAApB;;AACA,MAAIC,aAAa,GAAGC,eAAIC,IAAJ,CAAS1B,aAAa,CAAC2B,GAAvB,EAA4B;AAAEC,IAAAA,IAAI,EAAEd,IAAR;AAAce,IAAAA,OAAO,EAAE,EAAE,GAAGP;AAAL;AAAvB,GAA5B,CAApB;;AACA,MAAIvB,mBAAJ,EAAyB;AACvByB,IAAAA,aAAa,GAAGA,aAAa,CAACM,EAAd,CAAiB,gBAAjB,EAAmC/B,mBAAnC,CAAhB;AACD;;AACD,QAAMgC,QAAQ,GAAG,MAAMP,aAAvB;AACA,SAAOQ,MAAM,CAACD,QAAQ,CAACF,OAAT,CAAiBI,QAAlB,CAAb;AACD;;AAED,eAAezB,mBAAf,GAAqD;AACnD,QAAM0B,IAAI,GAAG,MAAMC,mBAAYC,mBAAZ,EAAnB;AACA,SAAOC,aAAMC,aAAN,CAAoBJ,IAApB,CAAP;AACD","sourcesContent":["import fs from 'fs';\nimport { Readable } from 'stream';\n\nimport { ApiV2, FormData, UserManager } from '@expo/xdl';\nimport got, { Progress } from 'got';\nimport md5File from 'md5-file';\n\nenum UploadType {\n  TURTLE_PROJECT_SOURCES = 'turtle-project-sources',\n  SUBMISSION_APP_ARCHIVE = 'submission-app-archive',\n}\n\ntype ProgressHandler = (progress: Progress) => void;\n\nasync function uploadAsync(\n  uploadType: UploadType,\n  path: string,\n  handleProgressEvent?: ProgressHandler\n): Promise<string> {\n  const presignedPost = await obtainS3PresignedPostAsync(uploadType, path);\n  return await uploadWithPresignedPostAsync(\n    fs.createReadStream(path),\n    presignedPost,\n    handleProgressEvent\n  );\n}\n\ninterface S3PresignedPost {\n  url: string;\n  fields: Record<string, string>;\n}\n\nasync function obtainS3PresignedPostAsync(\n  uploadType: UploadType,\n  filePath: string\n): Promise<S3PresignedPost> {\n  const fileHash = await md5File(filePath);\n  const api = await getApiClientForUser();\n  const { presignedUrl } = await api.postAsync('upload-sessions', {\n    type: uploadType,\n    checksum: fileHash,\n  });\n  return presignedUrl;\n}\n\nasync function uploadWithPresignedPostAsync(\n  stream: Readable,\n  presignedPost: S3PresignedPost,\n  handleProgressEvent?: ProgressHandler\n) {\n  const form = new FormData();\n  for (const [fieldKey, fieldValue] of Object.entries(presignedPost.fields)) {\n    form.append(fieldKey, fieldValue);\n  }\n  form.append('file', stream);\n  const formHeaders = form.getHeaders();\n  let uploadPromise = got.post(presignedPost.url, { body: form, headers: { ...formHeaders } });\n  if (handleProgressEvent) {\n    uploadPromise = uploadPromise.on('uploadProgress', handleProgressEvent);\n  }\n  const response = await uploadPromise;\n  return String(response.headers.location);\n}\n\nasync function getApiClientForUser(): Promise<ApiV2> {\n  const user = await UserManager.ensureLoggedInAsync();\n  return ApiV2.clientForUser(user);\n}\n\nexport { uploadAsync, UploadType };\n"],"file":"uploads.js"}