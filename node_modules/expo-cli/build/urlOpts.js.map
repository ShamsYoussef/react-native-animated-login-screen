{"version":3,"sources":["../src/urlOpts.ts"],"names":["addOptions","program","option","optsAsync","projectDir","options","opts","ProjectSettings","readAsync","host","lan","localhost","tunnel","filter","i","length","CommandError","hostType","offline","ConnectionStatus","setIsOffline","setAsync","printQRCode","url","qrcodeTerminal","generate","code","console","log","handleMobileOptsAsync","Promise","all","android","webOnly","Android","openWebProjectAsync","openProjectAsync","ios","Simulator","web","Webpack","openAsync"],"mappings":"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","sourcesContent":["import indentString from 'indent-string';\nimport qrcodeTerminal from 'qrcode-terminal';\n\nimport { Android, ConnectionStatus, ProjectSettings, Simulator, Webpack } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport CommandError from './CommandError';\n\nexport type URLOptions = {\n  android?: boolean;\n  ios?: boolean;\n  web?: boolean;\n  host?: 'lan' | 'tunnel' | 'localhost';\n  tunnel?: boolean;\n  lan?: boolean;\n  localhost?: boolean;\n};\n\nfunction addOptions(program: Command) {\n  program\n    .option('-a, --android', 'Opens your app in Expo on a connected Android device')\n    .option(\n      '-i, --ios',\n      'Opens your app in Expo in a currently running iOS simulator on your computer'\n    )\n    .option('-w, --web', 'Opens your app in a web browser')\n    .option(\n      '-m, --host [mode]',\n      'lan (default), tunnel, localhost. Type of host to use. \"tunnel\" allows you to view your link on other networks'\n    )\n    .option('--tunnel', 'Same as --host tunnel')\n    .option('--lan', 'Same as --host lan')\n    .option('--localhost', 'Same as --host localhost');\n}\n\nasync function optsAsync(projectDir: string, options: any) {\n  var opts = await ProjectSettings.readAsync(projectDir);\n\n  if ([options.host, options.lan, options.localhost, options.tunnel].filter(i => i).length > 1) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of --host, --tunnel, --lan, and --localhost'\n    );\n  }\n\n  opts.hostType = 'lan';\n\n  if (options.offline) {\n    // TODO: maybe let people know that we will force localhost with offline?\n    ConnectionStatus.setIsOffline(true);\n    opts.hostType = 'localhost';\n  }\n\n  if (options.host) {\n    opts.hostType = options.host;\n  } else if (options.tunnel) {\n    opts.hostType = 'tunnel';\n  } else if (options.lan) {\n    opts.hostType = 'lan';\n  } else if (options.localhost) {\n    opts.hostType = 'localhost';\n  }\n\n  await ProjectSettings.setAsync(projectDir, opts);\n\n  return opts;\n}\n\nfunction printQRCode(url: string) {\n  qrcodeTerminal.generate(url, code => console.log(`${indentString(code, 2)}\\n`));\n}\n\nasync function handleMobileOptsAsync(\n  projectDir: string,\n  options: Pick<URLOptions, 'ios' | 'android' | 'web'> & { webOnly?: boolean }\n) {\n  await Promise.all([\n    (async () => {\n      if (options.android) {\n        if (options.webOnly) {\n          await Android.openWebProjectAsync(projectDir);\n        } else {\n          await Android.openProjectAsync(projectDir);\n        }\n      }\n    })(),\n    (async () => {\n      if (options.ios) {\n        if (options.webOnly) {\n          await Simulator.openWebProjectAsync(projectDir);\n        } else {\n          await Simulator.openProjectAsync(projectDir);\n        }\n      }\n    })(),\n    (async () => {\n      if (options.web) {\n        await Webpack.openAsync(projectDir);\n      }\n    })(),\n  ]);\n\n  return !!options.android || !!options.ios;\n}\n\nexport default {\n  addOptions,\n  handleMobileOptsAsync,\n  printQRCode,\n  optsAsync,\n};\n"],"file":"urlOpts.js"}