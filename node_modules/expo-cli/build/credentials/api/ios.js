"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IosApi = void 0;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _omit() {
  const data = _interopRequireDefault(require("lodash/omit"));

  _omit = function () {
    return data;
  };

  return data;
}

function _pick() {
  const data = _interopRequireDefault(require("lodash/pick"));

  _pick = function () {
    return data;
  };

  return data;
}

function _invariant() {
  const data = _interopRequireDefault(require("invariant"));

  _invariant = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class IosApi {
  constructor(user) {
    _defineProperty(this, "api", void 0);

    _defineProperty(this, "username", void 0);

    _defineProperty(this, "credentials", void 0);

    _defineProperty(this, "shouldRefetch", true);

    this.api = _xdl().ApiV2.clientForUser(user);
    this.username = user.username;
    this.credentials = {
      appCredentials: [],
      userCredentials: []
    };
  }

  withProjectContext(ctx) {
    var _ctx$manifest$owner;

    (0, _invariant().default)(ctx.hasProjectContext, 'Project context required');
    this.username = (_ctx$manifest$owner = ctx.manifest.owner) !== null && _ctx$manifest$owner !== void 0 ? _ctx$manifest$owner : this.username;
    return this;
  }

  withApiClient(apiClient) {
    this.api = apiClient;
    return this;
  }

  async getAllCredentials() {
    if (this.shouldRefetch) {
      await this._fetchAllCredentials();
    }

    return this.credentials;
  }

  async _fetchAllCredentialsApi(credentialLookupParameters) {
    return await this.api.getAsync('credentials/ios', credentialLookupParameters);
  }

  async _fetchAllCredentials() {
    (0, _log().default)('Fetching available credentials');
    this.credentials = await this._fetchAllCredentialsApi({
      owner: this.username
    });
    this.shouldRefetch = false;
  }

  async getDistCert(experienceName, bundleIdentifier) {
    if (this.shouldRefetch) {
      await this._fetchAllCredentials();
    }

    this._ensureAppCredentials(experienceName, bundleIdentifier);

    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    const distCertExpoId = this.credentials.appCredentials[credIndex].distCredentialsId;

    if (!distCertExpoId) {
      return null;
    }

    const distCert = this.credentials.userCredentials.find(cred => cred.id === distCertExpoId);
    return distCert || null;
  }

  async _createDistCertApi(uploadUserCredentialParameters) {
    return await this.api.postAsync('credentials/ios/dist', uploadUserCredentialParameters);
  }

  async createDistCert(credentials) {
    const {
      id
    } = await this._createDistCertApi({
      credentials,
      owner: this.username
    });
    const newDistCert = { ...credentials,
      id,
      type: 'dist-cert'
    };
    this.credentials.userCredentials.push(newDistCert);
    return newDistCert;
  }

  async _updateDistCertApi(credentialsId, uploadUserCredentialParameters) {
    return await this.api.putAsync(`credentials/ios/dist/${credentialsId}`, uploadUserCredentialParameters);
  }

  async updateDistCert(credentialsId, credentials) {
    const {
      id
    } = await this._updateDistCertApi(credentialsId, {
      credentials,
      owner: this.username
    });
    const updatedDistCert = { ...credentials,
      id,
      type: 'dist-cert'
    };
    const credIndex = this.credentials.userCredentials.findIndex(({
      id
    }) => id === credentialsId);
    this.credentials.userCredentials[credIndex] = updatedDistCert;
    return updatedDistCert;
  }

  async _deleteDistCertApi(credentialsId, credentialLookupParameters) {
    await this.api.deleteAsync(`credentials/ios/dist/${credentialsId}`, credentialLookupParameters);
  }

  async deleteDistCert(credentialsId) {
    await this._deleteDistCertApi(credentialsId, {
      owner: this.username
    });
    this.credentials.userCredentials = this.credentials.userCredentials.filter(({
      id
    }) => id !== credentialsId);
    this.credentials.appCredentials = this.credentials.appCredentials.map(record => {
      if (record.distCredentialsId === credentialsId) {
        return (0, _omit().default)(record, 'distCredentialsId');
      }

      return record;
    });
  }

  async _useDistCertApi(userCredentialsId, appLookupParameters) {
    await this.api.postAsync('credentials/ios/use/dist', { ...appLookupParameters,
      userCredentialsId
    });
  }

  async useDistCert(experienceName, bundleIdentifier, userCredentialsId) {
    await this._useDistCertApi(userCredentialsId, {
      experienceName,
      bundleIdentifier,
      owner: this.username
    });

    this._ensureAppCredentials(experienceName, bundleIdentifier);

    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    this.credentials.appCredentials[credIndex].distCredentialsId = userCredentialsId;
  }

  async _createPushKeyApi(uploadUserCredentialParameters) {
    return await this.api.postAsync('credentials/ios/push', uploadUserCredentialParameters);
  }

  async createPushKey(credentials) {
    const {
      id
    } = await this._createPushKeyApi({
      credentials,
      owner: this.username
    });
    const newPushKey = { ...credentials,
      id,
      type: 'push-key'
    };
    this.credentials.userCredentials.push(newPushKey);
    return newPushKey;
  }

  async _updatePushKeyApi(credentialsId, uploadUserCredentialParameters) {
    return await this.api.putAsync(`credentials/ios/push/${credentialsId}`, uploadUserCredentialParameters);
  }

  async updatePushKey(credentialsId, credentials) {
    const {
      id
    } = await this._updatePushKeyApi(credentialsId, {
      credentials,
      owner: this.username
    });
    const updatedPushKey = { ...credentials,
      id,
      type: 'push-key'
    };
    const credIndex = this.credentials.userCredentials.findIndex(({
      id
    }) => id === credentialsId);
    this.credentials.userCredentials[credIndex] = updatedPushKey;
    return updatedPushKey;
  }

  async _deletePushKeyApi(credentialsId, credentialLookupParameters) {
    await this.api.deleteAsync(`credentials/ios/push/${credentialsId}`, credentialLookupParameters);
  }

  async deletePushKey(credentialsId) {
    await this._deletePushKeyApi(credentialsId, {
      owner: this.username
    });
    this.credentials.userCredentials = this.credentials.userCredentials.filter(({
      id
    }) => id !== credentialsId);
    this.credentials.appCredentials = this.credentials.appCredentials.map(record => {
      if (record.pushCredentialsId === credentialsId) {
        return (0, _omit().default)(record, 'pushCredentialsId');
      }

      return record;
    });
  }

  async getPushKey(experienceName, bundleIdentifier) {
    if (this.shouldRefetch) {
      await this._fetchAllCredentials();
    }

    this._ensureAppCredentials(experienceName, bundleIdentifier);

    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    const pushKeyId = this.credentials.appCredentials[credIndex].pushCredentialsId;

    if (!pushKeyId) {
      return null;
    }

    const pushKey = this.credentials.userCredentials.find(cred => cred.id === pushKeyId);
    return pushKey || null;
  }

  async _usePushKeyApi(userCredentialsId, appLookupParameters) {
    await this.api.postAsync('credentials/ios/use/push', { ...appLookupParameters,
      userCredentialsId
    });
  }

  async usePushKey(experienceName, bundleIdentifier, userCredentialsId) {
    await this._usePushKeyApi(userCredentialsId, {
      experienceName,
      bundleIdentifier,
      owner: this.username
    });

    this._ensureAppCredentials(experienceName, bundleIdentifier);

    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    this.credentials.appCredentials[credIndex].pushCredentialsId = userCredentialsId;
  }

  async getPushCert(experienceName, bundleIdentifier) {
    const appCredentials = await this.getAppCredentials(experienceName, bundleIdentifier);
    const pushId = appCredentials.credentials.pushId;
    const pushP12 = appCredentials.credentials.pushP12;
    const pushPassword = appCredentials.credentials.pushPassword;

    if (!pushId || !pushP12 || !pushPassword) {
      return null;
    }

    return {
      pushId,
      pushP12,
      pushPassword
    };
  }

  async _deletePushCertApi(appLookupParameters) {
    await this.api.postAsync(`credentials/ios/pushCert/delete`, appLookupParameters);
  }

  async deletePushCert(experienceName, bundleIdentifier) {
    await this._deletePushCertApi({
      experienceName,
      bundleIdentifier,
      owner: this.username
    });
    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    this.credentials.appCredentials[credIndex].credentials = (0, _omit().default)(this.credentials.appCredentials[credIndex].credentials, ['pushId', 'pushP12', 'pushPassword']);
  }

  async _updateProvisioningProfileApi(uploadAppCredentialParameters) {
    await this.api.postAsync(`credentials/ios/provisioningProfile/update`, uploadAppCredentialParameters);
  }

  async updateProvisioningProfile(experienceName, bundleIdentifier, provisioningProfile, appleTeam) {
    await this._updateProvisioningProfileApi({
      experienceName,
      bundleIdentifier,
      credentials: { ...provisioningProfile,
        teamId: appleTeam.id
      },
      owner: this.username
    });
    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    Object.assign(this.credentials.appCredentials[credIndex].credentials, provisioningProfile);
    return provisioningProfile;
  }

  async getAppCredentials(experienceName, bundleIdentifier) {
    if (this.shouldRefetch) {
      await this._fetchAllCredentials();
    }

    this._ensureAppCredentials(experienceName, bundleIdentifier);

    return this.credentials.appCredentials.find(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
  }

  async getProvisioningProfile(experienceName, bundleIdentifier) {
    const appCredentials = await this.getAppCredentials(experienceName, bundleIdentifier);
    const provisioningProfile = appCredentials.credentials.provisioningProfile;

    if (!provisioningProfile) {
      return null;
    }

    return (0, _pick().default)(appCredentials.credentials, ['provisioningProfile', 'provisioningProfileId']);
  }

  async _deleteProvisioningProfileApi(appLookupParameters) {
    await this.api.postAsync(`credentials/ios/provisioningProfile/delete`, appLookupParameters);
  }

  async deleteProvisioningProfile(experienceName, bundleIdentifier) {
    await this._deleteProvisioningProfileApi({
      experienceName,
      bundleIdentifier,
      owner: this.username
    });
    const credIndex = this.credentials.appCredentials.findIndex(app => app.experienceName === experienceName && app.bundleIdentifier === bundleIdentifier);
    this.credentials.appCredentials[credIndex].credentials = (0, _omit().default)(this.credentials.appCredentials[credIndex].credentials, ['provisioningProfile', 'provisioningProfileId']);
  }

  _ensureAppCredentials(experienceName, bundleIdentifier) {
    const exists = this.credentials.appCredentials.filter(i => i.experienceName === experienceName && i.bundleIdentifier === bundleIdentifier).length !== 0;

    if (!exists) {
      this.credentials.appCredentials.push({
        experienceName,
        bundleIdentifier,
        credentials: {}
      });
    }
  }

}

exports.IosApi = IosApi;
//# sourceMappingURL=ios.js.map