"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AndroidApi = void 0;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _keyBy() {
  const data = _interopRequireDefault(require("lodash/keyBy"));

  _keyBy = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AndroidApi {
  constructor(user) {
    _defineProperty(this, "api", void 0);

    _defineProperty(this, "shouldRefetchAll", true);

    _defineProperty(this, "credentials", {});

    this.api = _xdl().ApiV2.clientForUser(user);
  }

  withApiClient(client) {
    this.api = client;
    return this;
  }

  async fetchAll() {
    if (this.shouldRefetchAll) {
      var _await$this$api$getAs;

      this.credentials = (0, _keyBy().default)(((_await$this$api$getAs = await this.api.getAsync('credentials/android')) === null || _await$this$api$getAs === void 0 ? void 0 : _await$this$api$getAs.credentials) || [], 'experienceName');
      this.shouldRefetchAll = false;
    }

    return this.credentials;
  }

  async fetchKeystore(experienceName) {
    var _this$credentials$exp;

    await this._ensureCredentialsFetched(experienceName);
    return ((_this$credentials$exp = this.credentials[experienceName]) === null || _this$credentials$exp === void 0 ? void 0 : _this$credentials$exp.keystore) || null;
  }

  async fetchCredentials(experienceName) {
    await this._ensureCredentialsFetched(experienceName);
    return this.credentials[experienceName];
  }

  async updateKeystore(experienceName, keystore) {
    var _this$credentials$exp2;

    await this._ensureCredentialsFetched(experienceName);
    await this.api.putAsync(`credentials/android/keystore/${experienceName}`, {
      keystore
    });
    this.credentials[experienceName] = {
      experienceName,
      keystore,
      pushCredentials: (_this$credentials$exp2 = this.credentials[experienceName]) === null || _this$credentials$exp2 === void 0 ? void 0 : _this$credentials$exp2.pushCredentials
    };
  }

  async updateFcmKey(experienceName, fcmApiKey) {
    var _this$credentials$exp3;

    await this._ensureCredentialsFetched(experienceName);
    await this.api.putAsync(`credentials/android/push/${experienceName}`, {
      fcmApiKey
    });
    this.credentials[experienceName] = {
      experienceName,
      keystore: (_this$credentials$exp3 = this.credentials[experienceName]) === null || _this$credentials$exp3 === void 0 ? void 0 : _this$credentials$exp3.keystore,
      pushCredentials: {
        fcmApiKey
      }
    };
  }

  async removeKeystore(experienceName) {
    await this._ensureCredentialsFetched(experienceName);
    await this.api.deleteAsync(`credentials/android/keystore/${experienceName}`);

    if (this.credentials[experienceName]) {
      this.credentials[experienceName].keystore = null;
    }
  }

  async _ensureCredentialsFetched(experienceName) {
    if (!this.credentials[experienceName]) {
      const response = await this.api.getAsync(`credentials/android/${experienceName}`);
      this.credentials[experienceName] = {
        experienceName,
        keystore: response === null || response === void 0 ? void 0 : response.keystore,
        pushCredentials: response === null || response === void 0 ? void 0 : response.pushCredentials
      };
    }
  }

}

exports.AndroidApi = AndroidApi;
//# sourceMappingURL=android.js.map