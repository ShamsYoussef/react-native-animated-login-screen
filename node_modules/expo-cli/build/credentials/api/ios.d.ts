import { ApiV2, User } from '@expo/xdl';
import * as appleApi from '../../appleApi';
import { IosAppCredentials, IosCredentials, IosDistCredentials, IosPushCredentials } from '../credentials';
import { Context } from '../context';
declare type CredentialFields = {
    credentials: {
        [key: string]: any;
    };
};
declare type CredentialLookupParameters = {
    owner: string;
};
declare type AppLookupParameters = {
    bundleIdentifier: string;
    experienceName: string;
} & CredentialLookupParameters;
declare type UploadUserCredentialParameters = CredentialFields & CredentialLookupParameters;
declare type UploadAppCredentialParameters = CredentialFields & AppLookupParameters;
export declare class IosApi {
    api: ApiV2;
    username: string;
    credentials: IosCredentials;
    shouldRefetch: boolean;
    constructor(user: User);
    withProjectContext(ctx: Context): IosApi;
    withApiClient(apiClient: ApiV2): this;
    getAllCredentials(): Promise<IosCredentials>;
    _fetchAllCredentialsApi(credentialLookupParameters: CredentialLookupParameters): Promise<any>;
    _fetchAllCredentials(): Promise<void>;
    getDistCert(experienceName: string, bundleIdentifier: string): Promise<IosDistCredentials | null>;
    _createDistCertApi(uploadUserCredentialParameters: UploadUserCredentialParameters): Promise<any>;
    createDistCert(credentials: appleApi.DistCert): Promise<IosDistCredentials>;
    _updateDistCertApi(credentialsId: number, uploadUserCredentialParameters: UploadUserCredentialParameters): Promise<any>;
    updateDistCert(credentialsId: number, credentials: appleApi.DistCert): Promise<IosDistCredentials>;
    _deleteDistCertApi(credentialsId: number, credentialLookupParameters: CredentialLookupParameters): Promise<void>;
    deleteDistCert(credentialsId: number): Promise<void>;
    _useDistCertApi(userCredentialsId: number, appLookupParameters: AppLookupParameters): Promise<void>;
    useDistCert(experienceName: string, bundleIdentifier: string, userCredentialsId: number): Promise<void>;
    _createPushKeyApi(uploadUserCredentialParameters: UploadUserCredentialParameters): Promise<any>;
    createPushKey(credentials: appleApi.PushKey): Promise<IosPushCredentials>;
    _updatePushKeyApi(credentialsId: number, uploadUserCredentialParameters: UploadUserCredentialParameters): Promise<any>;
    updatePushKey(credentialsId: number, credentials: appleApi.PushKey): Promise<IosPushCredentials>;
    _deletePushKeyApi(credentialsId: number, credentialLookupParameters: CredentialLookupParameters): Promise<void>;
    deletePushKey(credentialsId: number): Promise<void>;
    getPushKey(experienceName: string, bundleIdentifier: string): Promise<IosPushCredentials | null>;
    _usePushKeyApi(userCredentialsId: number, appLookupParameters: AppLookupParameters): Promise<void>;
    usePushKey(experienceName: string, bundleIdentifier: string, userCredentialsId: number): Promise<void>;
    getPushCert(experienceName: string, bundleIdentifier: string): Promise<{
        pushId: string;
        pushP12: string;
        pushPassword: string;
    } | null>;
    _deletePushCertApi(appLookupParameters: AppLookupParameters): Promise<void>;
    deletePushCert(experienceName: string, bundleIdentifier: string): Promise<void>;
    _updateProvisioningProfileApi(uploadAppCredentialParameters: UploadAppCredentialParameters): Promise<void>;
    updateProvisioningProfile(experienceName: string, bundleIdentifier: string, provisioningProfile: appleApi.ProvisioningProfile, appleTeam: Pick<appleApi.Team, 'id'>): Promise<appleApi.ProvisioningProfile>;
    getAppCredentials(experienceName: string, bundleIdentifier: string): Promise<IosAppCredentials>;
    getProvisioningProfile(experienceName: string, bundleIdentifier: string): Promise<appleApi.ProvisioningProfile | null>;
    _deleteProvisioningProfileApi(appLookupParameters: AppLookupParameters): Promise<void>;
    deleteProvisioningProfile(experienceName: string, bundleIdentifier: string): Promise<void>;
    _ensureAppCredentials(experienceName: string, bundleIdentifier: string): void;
}
export {};
