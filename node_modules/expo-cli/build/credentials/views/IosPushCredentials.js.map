{"version":3,"sources":["../../../src/credentials/views/IosPushCredentials.ts"],"names":["APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosPush","constructor","options","_nonInteractive","nonInteractive","create","ctx","newPushKey","provideOrGenerate","ios","createPushKey","open","pushKey","_getRequiredQuestions","requiredQuestions","pushKeySchema","hasAppleCtx","questions","required","filter","q","_ensurePushKey","partialKey","teamId","appleCtx","team","id","Error","userProvided","isValid","validatePushKey","generatePushKey","RemoveIosPush","shouldRevoke","selected","selectPushCredFromList","removePushCert","green","removeSpecific","appCredentials","deletePushCert","experienceName","bundleIdentifier","apps","getAppsUsingPushCred","credentials","appsList","map","appCred","join","confirm","type","name","message","deletePushKey","revoke","ensureAppleCtx","PushKeyManager","apnsKeyId","UpdateIosPush","allowLegacy","updateSpecific","updated","userCredentials","find","i","length","question","log","warn","teamName","updatePushKey","UseExistingPushNotification","_experienceName","_bundleIdentifier","withProjectContext","hasProjectContext","error","getOptionsFromProjectContext","usePushKey","CreateOrReusePushKey","assignPushKey","userCredentialsId","user","existingPushKeys","getValidPushKeys","autoselectedPushKey","confirmQuestion","formatPushKey","pageSize","Infinity","_createOrReuse","choices","value","action","iosCredentials","pushKeys","cred","yellow","pushKeyManager","pushInfoFromApple","list","filterRevokedPushKeys","getValidityStatus","validPushKeys","includes","experience","manifest","slug","owner","username","filterInvalid","pushCerts","pushP12","pushPassword","pushCredentials","getName","pushCred","pushCert","pushId","entry","index","credentialsIndex","pushCredentialsId","formatPushKeyFromApple","appleInfo","joinApps","usedByString","gray","teamText","validityStatus","validityText","manager","e","code","keys","usedByExpo","cert","reduce","acc","here","grey","key","certInfo","spinner","start","filteredFormattedPushKeyArray","isValidPushKey","successMsg","succeed","failureMsg","fail","validKeyIdsOnAppleServer","validPushKeysOnExpoServer","getPushKeyFromParams","builderOptions","pushP8Path","apnsKeyP8","fs","readFile","usePushKeyFromParams","iosPushCredentials"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport ora from 'ora';\n\nimport terminalLink from 'terminal-link';\nimport prompt, { Question } from '../../prompt';\nimport log from '../../log';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosPushCredentials,\n  pushKeySchema,\n} from '../credentials';\nimport { CredentialSchema, askForUserProvided } from '../actions/promptForCredentials';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { PushKey, PushKeyInfo, PushKeyManager, isPushKey } from '../../appleApi';\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Push Notifactions Keys on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\ntype CliOptions = {\n  nonInteractive?: boolean;\n};\n\nexport type PushKeyOptions = {\n  experienceName: string;\n  bundleIdentifier: string;\n} & CliOptions;\n\nexport class CreateIosPush implements IView {\n  _nonInteractive: boolean;\n\n  constructor(options: CliOptions = {}) {\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async create(ctx: Context): Promise<IosPushCredentials> {\n    const newPushKey = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createPushKey(newPushKey);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await this.create(ctx);\n\n    log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    log();\n    return null;\n  }\n\n  _getRequiredQuestions(ctx: Context): CredentialSchema<PushKey> {\n    const requiredQuestions = { ...pushKeySchema };\n    if (ctx.hasAppleCtx() && requiredQuestions.questions) {\n      requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n    }\n    return requiredQuestions;\n  }\n\n  _ensurePushKey(ctx: Context, partialKey: Partial<PushKey>): PushKey {\n    if (ctx.hasAppleCtx()) {\n      partialKey.teamId = ctx.appleCtx.team.id;\n    }\n    if (!isPushKey(partialKey)) {\n      throw new Error(`Not of type PushKey: ${partialKey}`);\n    }\n    return partialKey;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    if (!this._nonInteractive) {\n      const requiredQuestions = this._getRequiredQuestions(ctx);\n      const userProvided = await askForUserProvided(requiredQuestions);\n      if (userProvided) {\n        const pushKey = this._ensurePushKey(ctx, userProvided);\n        const isValid = await validatePushKey(ctx, pushKey);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generatePushKey(ctx);\n  }\n}\n\nexport class RemoveIosPush implements IView {\n  shouldRevoke: boolean;\n  nonInteractive: boolean;\n\n  constructor(shouldRevoke: boolean = false, nonInteractive: boolean = false) {\n    this.shouldRevoke = shouldRevoke;\n    this.nonInteractive = nonInteractive;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectPushCredFromList(ctx);\n    if (!selected) {\n    } else if (!('type' in selected)) {\n      await this.removePushCert(ctx, selected as IosAppCredentials);\n      log(chalk.green('Successfully removed Push Certificate'));\n    } else {\n      await this.removeSpecific(ctx, selected as IosPushCredentials);\n      log(chalk.green('Successfully removed Push Notification Key'));\n    }\n    return null;\n  }\n\n  async removePushCert(ctx: Context, appCredentials: IosAppCredentials): Promise<void> {\n    await ctx.ios.deletePushCert(appCredentials.experienceName, appCredentials.bundleIdentifier);\n  }\n\n  async removeSpecific(ctx: Context, selected: IosPushCredentials) {\n    const apps = getAppsUsingPushCred(ctx.ios.credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (appsList && !this.nonInteractive) {\n      const { confirm } = await prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `Removing this key/cert will disable notifications in ${appsList}. Do you want to continue?`,\n        },\n      ]);\n      if (!confirm) {\n        log('Aborting');\n        return;\n      }\n    }\n\n    log('Removing Push Key...\\n');\n    await ctx.ios.deletePushKey(selected.id);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !this.nonInteractive) {\n      const { revoke } = await prompt([\n        {\n          type: 'confirm',\n          name: 'revoke',\n          message: `Do you also want to revoke it on Apple Developer Portal?`,\n        },\n      ]);\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      await new PushKeyManager(ctx.appleCtx).revoke([selected.apnsKeyId]);\n    }\n  }\n}\n\nexport class UpdateIosPush implements IView {\n  async open(ctx: Context) {\n    const selected = (await selectPushCredFromList(ctx, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      log(chalk.green('Successfully updated Push Notification Key.\\n'));\n      const updated = ctx.ios.credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosPushCredentials) {\n    const apps = getAppsUsingPushCred(ctx.ios.credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (apps.length > 1) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Update will affect all applications that are using this key (${appsList}). Do you want to continue?`,\n      };\n      const { confirm } = await prompt(question);\n      if (!confirm) {\n        log.warn('Aborting update process');\n        return;\n      }\n    }\n\n    const newPushKey = await this.provideOrGenerate(ctx);\n    const credentials = {\n      ...newPushKey,\n      teamId: ctx.appleCtx.team.id,\n      teamName: ctx.appleCtx.team.name,\n    };\n    await ctx.ios.updatePushKey(selected.id, credentials);\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    const userProvided = await askForUserProvided(pushKeySchema);\n    if (userProvided) {\n      const isValid = await validatePushKey(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generatePushKey(ctx);\n  }\n}\n\nexport class UseExistingPushNotification implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n\n  constructor(options: PushKeyOptions) {\n    const { experienceName, bundleIdentifier } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n  }\n\n  static withProjectContext(ctx: Context): UseExistingPushNotification | null {\n    if (!ctx.hasProjectContext) {\n      log.error('Can only be used in project context');\n      return null;\n    }\n    const options = getOptionsFromProjectContext(ctx);\n    if (!options) return null;\n    return new UseExistingPushNotification(options);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = (await selectPushCredFromList(ctx, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await ctx.ios.usePushKey(this._experienceName, this._bundleIdentifier, selected.id);\n      log(\n        chalk.green(\n          `Successfully assigned Push Notifactions Key to ${this._experienceName} (${this._bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReusePushKey implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _nonInteractive: boolean;\n\n  constructor(options: PushKeyOptions) {\n    const { experienceName, bundleIdentifier } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async assignPushKey(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.usePushKey(this._experienceName, this._bundleIdentifier, userCredentialsId);\n    log(\n      chalk.green(\n        `Successfully assigned Push Key to ${this._experienceName} (${this._bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingPushKeys = await getValidPushKeys(ctx.ios.credentials, ctx);\n\n    if (existingPushKeys.length === 0) {\n      const pushKey = await new CreateIosPush({ nonInteractive: this._nonInteractive }).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid keys\n    const autoselectedPushKey = existingPushKeys[0];\n    const confirmQuestion: Question = {\n      type: 'confirm',\n      name: 'confirm',\n      message: `${formatPushKey(\n        autoselectedPushKey,\n        ctx.ios.credentials,\n        'VALID'\n      )} \\n Would you like to use this Push Key?`,\n      pageSize: Infinity,\n    };\n\n    if (!this._nonInteractive) {\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    log(`Using Push Key: ${autoselectedPushKey.apnsKeyId}`);\n    await this.assignPushKey(ctx, autoselectedPushKey.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing push key] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new push key]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select an iOS push key to use for push notifications:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const pushKey = await new CreateIosPush({ nonInteractive: this._nonInteractive }).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingPushNotification({\n        bundleIdentifier: this._bundleIdentifier,\n        experienceName: this._experienceName,\n      });\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidPushKeys(iosCredentials: IosCredentials, ctx: Context) {\n  const pushKeys = iosCredentials.userCredentials.filter(\n    (cred): cred is IosPushCredentials => cred.type === 'push-key'\n  );\n  if (!ctx.hasAppleCtx()) {\n    log(\n      chalk.yellow(\n        `Unable to determine validity of Push Keys due to insufficient Apple Credentials`\n      )\n    );\n    return pushKeys;\n  }\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  return await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n}\n\nfunction getValidityStatus(\n  pushKey: IosPushCredentials,\n  validPushKeys: IosPushCredentials[] | null\n): ValidityStatus {\n  if (!validPushKeys) {\n    return 'UNKNOWN';\n  }\n  return validPushKeys.includes(pushKey) ? 'VALID' : 'INVALID';\n}\n\nfunction getOptionsFromProjectContext(ctx: Context): PushKeyOptions | null {\n  const experience = ctx.manifest?.slug;\n  const owner = ctx.manifest?.owner;\n  const experienceName = `@${owner || ctx.user.username}/${experience}`;\n  const bundleIdentifier = ctx.manifest?.ios?.bundleIdentifier;\n  if (!experience || !bundleIdentifier) {\n    log.error(`slug and ios.bundleIdentifier needs to be defined`);\n    return null;\n  }\n\n  return { experienceName, bundleIdentifier };\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n  allowLegacy?: boolean;\n};\n\nasync function selectPushCredFromList(\n  ctx: Context,\n  options: ListOptions = {}\n): Promise<IosPushCredentials | IosAppCredentials | null> {\n  const iosCredentials = ctx.ios.credentials;\n  const allowLegacy = options.allowLegacy || true;\n  let pushKeys = iosCredentials.userCredentials.filter(\n    cred => cred.type === 'push-key'\n  ) as IosPushCredentials[];\n  let validPushKeys: IosPushCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n    const pushInfoFromApple = await pushKeyManager.list();\n    validPushKeys = await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n  }\n  pushKeys = options.filterInvalid && validPushKeys ? validPushKeys : pushKeys;\n\n  const pushCerts = allowLegacy\n    ? iosCredentials.appCredentials.filter(\n        ({ credentials }) => credentials.pushP12 && credentials.pushPassword\n      )\n    : [];\n  const pushCredentials = [...pushCerts, ...pushKeys];\n  if (pushCredentials.length === 0) {\n    log.warn('There are no push credentials available in your account');\n    return null;\n  }\n\n  const getName = (pushCred: IosPushCredentials | IosAppCredentials) => {\n    if ('type' in pushCred) {\n      return formatPushKey(\n        pushCred as IosPushCredentials,\n        iosCredentials,\n        getValidityStatus(pushCred as IosPushCredentials, validPushKeys)\n      );\n    }\n\n    const pushCert = pushCred as IosAppCredentials;\n    return `Push Certificate (PushId: ${pushCert.credentials.pushId || '------'}, TeamId: ${\n      pushCert.credentials.teamId || '-------'\n    } used in ${pushCert.experienceName})`;\n  };\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select credentials from list',\n    choices: pushCredentials.map((entry, index) => ({\n      name: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return pushCredentials[credentialsIndex];\n}\n\nfunction getAppsUsingPushCred(\n  iosCredentials: IosCredentials,\n  pushCred: IosPushCredentials | IosAppCredentials\n): IosAppCredentials[] {\n  if ('type' in pushCred) {\n    return iosCredentials.appCredentials.filter(\n      cred => cred.pushCredentialsId === (pushCred as IosPushCredentials).id\n    );\n  } else if (pushCred.credentials?.pushP12 && pushCred.credentials?.pushPassword) {\n    return [pushCred as IosAppCredentials];\n  }\n  return [];\n}\n\nfunction formatPushKeyFromApple(appleInfo: PushKeyInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'push-key' && cred.apnsKeyId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.pushCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, id } = appleInfo;\n  const pushKey = userCredentials[0];\n  const teamText = pushKey\n    ? `, Team ID: ${pushKey.teamId || '---'}, Team name: ${pushKey.teamName || '---'}`\n    : '';\n\n  return `${name} - KeyId: ${id}${teamText}\\n${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatPushKey(\n  pushKey: IosPushCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.pushCredentialsId === pushKey.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Push Notifications Key (Key ID: ${pushKey.apnsKeyId}, Team ID: ${pushKey.teamId})${usedByString}${validityText}`;\n}\n\nasync function generatePushKey(ctx: Context): Promise<PushKey> {\n  await ctx.ensureAppleCtx();\n  const manager = new PushKeyManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR') {\n      const keys = await manager.list();\n      log.warn('Maximum number of Push Notifications Keys generated on Apple Developer Portal.');\n      log.warn(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n      const usedByExpo = ctx.ios.credentials.userCredentials\n        .filter((cert): cert is IosPushCredentials => cert.type === 'push-key')\n        .reduce<{ [key: string]: IosPushCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.apnsKeyId]: cert }),\n          {}\n        );\n\n      // https://docs.expo.io/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      log(chalk.grey(`⚠️  Revoking a Push Key will affect other apps that rely on it`));\n      log(chalk.grey(`ℹ️  Learn more ${here}`));\n      log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'checkbox',\n          name: 'revoke',\n          message: 'Select Push Notifications Key to revoke.',\n          choices: keys.map((key, index) => ({\n            value: index,\n            name: formatPushKeyFromApple(key, ctx.ios.credentials),\n          })),\n          pageSize: Infinity,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = keys[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosPush(true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generatePushKey(ctx);\n}\n\nexport async function validatePushKey(ctx: Context, pushKey: PushKey) {\n  if (!ctx.hasAppleCtx()) {\n    log.warn('Unable to validate Push Keys due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(`Checking validity of push key on Apple Developer Portal...`).start();\n\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  const filteredFormattedPushKeyArray = await filterRevokedPushKeys(pushInfoFromApple, [pushKey]);\n  const isValidPushKey = filteredFormattedPushKeyArray.length > 0;\n  if (isValidPushKey) {\n    const successMsg = `Successfully validated Push Key against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `This Push Key is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidPushKey;\n}\n\nasync function filterRevokedPushKeys<T extends PushKey>(\n  pushInfoFromApple: PushKeyInfo[],\n  pushKeys: T[]\n): Promise<T[]> {\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validKeyIdsOnAppleServer = pushInfoFromApple.map(pushKey => pushKey.id);\n  const validPushKeysOnExpoServer = pushKeys.filter(pushKey => {\n    return validKeyIdsOnAppleServer.includes(pushKey.apnsKeyId);\n  });\n  return validPushKeysOnExpoServer;\n}\n\nexport async function getPushKeyFromParams(builderOptions: {\n  pushId?: string;\n  pushP8Path?: string;\n  teamId?: string;\n}): Promise<PushKey | null> {\n  const { pushId, pushP8Path, teamId } = builderOptions;\n\n  // none of the pushKey params were set, assume user has no intention of passing it in\n  if (!pushId && !pushP8Path) {\n    return null;\n  }\n\n  // partial pushKey params were set, assume user has intention of passing it in\n  if (!(pushId && pushP8Path && teamId)) {\n    throw new Error(\n      'In order to provide a Push Key through the CLI parameters, you have to pass --push-id, --push-p8-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    apnsKeyId: pushId,\n    apnsKeyP8: await fs.readFile(pushP8Path, 'base64'),\n    teamId,\n  } as PushKey;\n}\n\nexport async function usePushKeyFromParams(\n  ctx: Context,\n  appCredentials: IosAppCredentials,\n  pushKey: PushKey\n): Promise<IosPushCredentials> {\n  const isValid = await validatePushKey(ctx, pushKey);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Push Key');\n  }\n  const iosPushCredentials = await ctx.ios.createPushKey(pushKey);\n  const { experienceName, bundleIdentifier } = appCredentials;\n\n  await ctx.ios.usePushKey(experienceName, bundleIdentifier, iosPushCredentials.id);\n  log(chalk.green(`Successfully assigned Push Key to ${experienceName} (${bundleIdentifier})`));\n  return iosPushCredentials;\n}\n"],"file":"IosPushCredentials.js"}