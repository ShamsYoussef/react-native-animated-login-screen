{"version":3,"sources":["../../../src/credentials/views/SetupAndroidKeystore.ts"],"names":["SetupAndroidKeystore","constructor","experienceName","options","open","ctx","keystore","keystorePassword","keyAlias","keyPassword","android","fetchKeystore","nonInteractive","allowMissingKeystore","log","warn","Error","keytoolCommandExists","UpdateKeystore","err"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAOO,MAAMA,oBAAN,CAA4C;AACjDC,EAAAA,WAAW,CAASC,cAAT,EAAyCC,OAAzC,EAA2D;AAAA,SAAlDD,cAAkD,GAAlDA,cAAkD;AAAA,SAAlBC,OAAkB,GAAlBA,OAAkB;AAAE;;AAExE,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAAA;;AAC9C,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,gBAAZ;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,iCACH,MAAMJ,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0B,KAAKT,cAA/B,CADH,yEACsD,EAD5D;;AAEA,QAAII,QAAQ,IAAIC,gBAAZ,IAAgCC,QAAhC,IAA4CC,WAAhD,EAA6D;AAC3D,aAAO,IAAP;AACD;;AACD,QAAI,KAAKN,OAAL,CAAaS,cAAjB,EAAiC;AAC/B,UAAI,KAAKT,OAAL,CAAaU,oBAAjB,EAAuC;AACrCC,uBAAIC,IAAJ,CACE,6FADF;;AAGA,eAAO,IAAP;AACD,OALD,MAKO;AACL,cAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACD;AACF;;AAED,QAAI,MAAMC,oBAAoB,EAA9B,EAAkC;AAChC,aAAO,KAAIC,iCAAJ,EAAmB,KAAKhB,cAAxB,CAAP;AACD,KAFD,MAEO;AACLY,qBAAIC,IAAJ,CACE,qGADF;;AAGA,aAAO,IAAP;AACD;AACF;;AA5BgD;;;;AA+BnD,eAAeE,oBAAf,GAAwD;AACtD,MAAI;AACF,UAAM,8BAAc,SAAd,CAAN;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOE,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF","sourcesContent":["import { AndroidCredentials } from '@expo/xdl';\nimport commandExists from 'command-exists';\n\nimport log from '../../log';\nimport { Context, IView } from '../context';\nimport { DownloadKeystore, UpdateKeystore } from './AndroidKeystore';\n\ninterface Options {\n  nonInteractive?: boolean;\n  allowMissingKeystore?: boolean;\n}\n\nexport class SetupAndroidKeystore implements IView {\n  constructor(private experienceName: string, private options: Options) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    const { keystore, keystorePassword, keyAlias, keyPassword } =\n      (await ctx.android.fetchKeystore(this.experienceName)) ?? {};\n    if (keystore && keystorePassword && keyAlias && keyPassword) {\n      return null;\n    }\n    if (this.options.nonInteractive) {\n      if (this.options.allowMissingKeystore) {\n        log.warn(\n          'There is no valid Keystore defined for this app, new one will be generated on Expo servers.'\n        );\n        return null;\n      } else {\n        throw new Error('Generating a new Keystore is not supported in --non-interactive mode');\n      }\n    }\n\n    if (await keytoolCommandExists()) {\n      return new UpdateKeystore(this.experienceName);\n    } else {\n      log.warn(\n        'The `keytool` utility was not found in your PATH. A new Keystore will be generated on Expo servers.'\n      );\n      return null;\n    }\n  }\n}\n\nasync function keytoolCommandExists(): Promise<boolean> {\n  try {\n    await commandExists('keytool');\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n"],"file":"SetupAndroidKeystore.js"}