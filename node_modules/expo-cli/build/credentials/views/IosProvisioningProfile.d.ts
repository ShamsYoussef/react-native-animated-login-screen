import { Context, IView } from '../context';
import { IosAppCredentials } from '../credentials';
import { AppleCtx, DistCert, ProvisioningProfile, ProvisioningProfileInfo } from '../../appleApi';
declare type CliOptions = {
    nonInteractive?: boolean;
};
export declare type ProvisioningProfileOptions = {
    experienceName: string;
    bundleIdentifier: string;
    distCert: DistCert;
} & CliOptions;
export declare class RemoveProvisioningProfile implements IView {
    shouldRevoke: boolean;
    nonInteractive: boolean;
    constructor(shouldRevoke?: boolean, nonInteractive?: boolean);
    open(ctx: Context): Promise<IView | null>;
    removeSpecific(ctx: Context, selected: IosAppCredentials): Promise<void>;
}
export declare class CreateProvisioningProfile implements IView {
    _experienceName: string;
    _bundleIdentifier: string;
    _distCert: DistCert;
    _nonInteractive: boolean;
    constructor(options: ProvisioningProfileOptions);
    create(ctx: Context): Promise<ProvisioningProfile>;
    open(ctx: Context): Promise<IView | null>;
    provideOrGenerate(ctx: Context): Promise<ProvisioningProfile>;
}
export declare class UseExistingProvisioningProfile implements IView {
    _experienceName: string;
    _bundleIdentifier: string;
    _distCert: DistCert;
    constructor(options: ProvisioningProfileOptions);
    open(ctx: Context): Promise<IView | null>;
}
export declare class CreateOrReuseProvisioningProfile implements IView {
    _experienceName: string;
    _bundleIdentifier: string;
    _distCert: DistCert;
    _nonInteractive: boolean;
    constructor(options: ProvisioningProfileOptions);
    choosePreferred(profiles: ProvisioningProfileInfo[]): ProvisioningProfileInfo;
    open(ctx: Context): Promise<IView | null>;
    _createOrReuse(ctx: Context): Promise<IView | null>;
}
export declare function validateProfileWithoutApple(provisioningProfile: ProvisioningProfile, distCert: DistCert, bundleIdentifier: string): Promise<boolean>;
export declare function getAppleInfo(appleCtx: AppleCtx, bundleIdentifier: string, profile: ProvisioningProfile): Promise<ProvisioningProfileInfo | null>;
export declare function configureAndUpdateProvisioningProfile(ctx: Context, experienceName: string, bundleIdentifier: string, distCert: DistCert, profileFromApple: ProvisioningProfileInfo): Promise<void>;
export declare function getProvisioningProfileFromParams(builderOptions: {
    provisioningProfilePath?: string;
    teamId?: string;
}): Promise<ProvisioningProfile | null>;
export declare function useProvisioningProfileFromParams(ctx: Context, appCredentials: IosAppCredentials, teamId: string, provisioningProfile: ProvisioningProfile, distCert: DistCert): Promise<ProvisioningProfile>;
export {};
