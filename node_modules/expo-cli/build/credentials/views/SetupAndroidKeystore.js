"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetupAndroidKeystore = void 0;

function _commandExists() {
  const data = _interopRequireDefault(require("command-exists"));

  _commandExists = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _AndroidKeystore() {
  const data = require("./AndroidKeystore");

  _AndroidKeystore = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SetupAndroidKeystore {
  constructor(experienceName, options) {
    this.experienceName = experienceName;
    this.options = options;
  }

  async open(ctx) {
    var _await$ctx$android$fe;

    const {
      keystore,
      keystorePassword,
      keyAlias,
      keyPassword
    } = (_await$ctx$android$fe = await ctx.android.fetchKeystore(this.experienceName)) !== null && _await$ctx$android$fe !== void 0 ? _await$ctx$android$fe : {};

    if (keystore && keystorePassword && keyAlias && keyPassword) {
      return null;
    }

    if (this.options.nonInteractive) {
      if (this.options.allowMissingKeystore) {
        _log().default.warn('There is no valid Keystore defined for this app, new one will be generated on Expo servers.');

        return null;
      } else {
        throw new Error('Generating a new Keystore is not supported in --non-interactive mode');
      }
    }

    if (await keytoolCommandExists()) {
      return new (_AndroidKeystore().UpdateKeystore)(this.experienceName);
    } else {
      _log().default.warn('The `keytool` utility was not found in your PATH. A new Keystore will be generated on Expo servers.');

      return null;
    }
  }

}

exports.SetupAndroidKeystore = SetupAndroidKeystore;

async function keytoolCommandExists() {
  try {
    await (0, _commandExists().default)('keytool');
    return true;
  } catch (err) {
    return false;
  }
}
//# sourceMappingURL=SetupAndroidKeystore.js.map