import { Context, IView } from '../context';
import { IosAppCredentials, IosDistCredentials } from '../credentials';
import { DistCert } from '../../appleApi';
declare type CliOptions = {
    nonInteractive?: boolean;
};
export declare type DistCertOptions = {
    experienceName: string;
    bundleIdentifier: string;
} & CliOptions;
export declare class CreateIosDist implements IView {
    _nonInteractive: boolean;
    constructor(options?: CliOptions);
    create(ctx: Context): Promise<IosDistCredentials>;
    open(ctx: Context): Promise<IView | null>;
    provideOrGenerate(ctx: Context): Promise<DistCert>;
}
export declare class RemoveIosDist implements IView {
    shouldRevoke: boolean;
    nonInteractive: boolean;
    constructor(shouldRevoke?: boolean, nonInteractive?: boolean);
    open(ctx: Context): Promise<IView | null>;
    removeSpecific(ctx: Context, selected: IosDistCredentials): Promise<void>;
}
export declare class UpdateIosDist implements IView {
    open(ctx: Context): Promise<IView | null>;
    updateSpecific(ctx: Context, selected: IosDistCredentials): Promise<void>;
    provideOrGenerate(ctx: Context): Promise<DistCert>;
}
export declare class UseExistingDistributionCert implements IView {
    _experienceName: string;
    _bundleIdentifier: string;
    constructor(options: DistCertOptions);
    static withProjectContext(ctx: Context): UseExistingDistributionCert | null;
    open(ctx: Context): Promise<IView | null>;
}
export declare class CreateOrReuseDistributionCert implements IView {
    _experienceName: string;
    _bundleIdentifier: string;
    _nonInteractive: boolean;
    constructor(options: DistCertOptions);
    assignDistCert(ctx: Context, userCredentialsId: number): Promise<void>;
    open(ctx: Context): Promise<IView | null>;
    _createOrReuse(ctx: Context): Promise<IView | null>;
}
export declare function validateDistributionCertificate(ctx: Context, distributionCert: DistCert): Promise<boolean>;
export declare function getDistCertFromParams(builderOptions: {
    distP12Path?: string;
    teamId?: string;
}): Promise<DistCert | null>;
export declare function useDistCertFromParams(ctx: Context, appCredentials: IosAppCredentials, distCert: DistCert): Promise<IosDistCredentials>;
export {};
