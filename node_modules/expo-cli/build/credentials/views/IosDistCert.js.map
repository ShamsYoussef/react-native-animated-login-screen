{"version":3,"sources":["../../../src/credentials/views/IosDistCert.ts"],"names":["APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosDist","constructor","options","_nonInteractive","nonInteractive","create","ctx","newDistCert","provideOrGenerate","ios","createDistCert","open","distCert","green","userProvided","promptForDistCert","isValid","validateDistributionCertificate","generateDistCert","RemoveIosDist","shouldRevoke","selected","selectDistCertFromList","removeSpecific","apps","credentials","appCredentials","filter","cred","distCredentialsId","id","appsList","map","appCred","experienceName","join","confirm","type","name","message","deleteDistCert","certId","revoke","ensureAppleCtx","DistCertManager","appleCtx","bundleIdentifier","RemoveProvisioningProfile","UpdateIosDist","updateSpecific","updated","userCredentials","find","i","length","question","updateDistCert","teamId","team","teamName","UseExistingDistributionCert","_experienceName","_bundleIdentifier","withProjectContext","hasProjectContext","log","error","getOptionsFromProjectContext","filterInvalid","useDistCert","CreateOrReuseDistributionCert","assignDistCert","userCredentialsId","user","Error","existingCertificates","getValidDistCerts","autoselectedCertificate","confirmQuestion","formatDistCert","pageSize","Infinity","_createOrReuse","choices","value","action","experience","manifest","slug","owner","username","iosCredentials","distCerts","hasAppleCtx","yellow","distCertManager","certInfoFromApple","list","validCerts","filterRevokedDistributionCerts","sortByExpiryDesc","getValidityStatus","validDistCerts","includes","warn","entry","index","credentialsIndex","formatDistCertFromApple","appleInfo","joinApps","usedByString","gray","status","expires","created","ownerName","serialNumber","expiresDate","Date","createdDate","ownerId","validityStatus","distCertSerialNumber","IosCodeSigning","findP12CertSerialNumber","certP12","certPassword","red","validityText","manager","e","code","certs","usedByExpo","cert","reduce","acc","here","grey","certInfo","_getRequiredQuestions","requiredQuestions","distCertSchema","required","q","_ensureDistCert","partialCert","_getDistCertWithSerial","distributionCert","spinner","start","validDistributionCerts","isValidCert","successMsg","succeed","failureMsg","fail","distributionCerts","validCertSerialsOnAppleServer","Math","floor","now","sort","certA","certB","certAInfo","certAExpiry","Number","NEGATIVE_INFINITY","certBInfo","certBExpiry","getDistCertFromParams","builderOptions","distP12Path","process","env","EXPO_IOS_DIST_P12_PASSWORD","fs","readFile","useDistCertFromParams","iosDistCredentials"],"mappings":";;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA,MAAMA,yCAAyC,GAAI;oBAC/BC,iBAAMC,SAAN,CAClB,OADkB,CAElB;;;CAHF;;AAiBO,MAAMC,aAAN,CAAqC;AAG1CC,EAAAA,WAAW,CAACC,OAAmB,GAAG,EAAvB,EAA2B;AAAA;;AAAA;;AACpC,SAAKC,eAAL,4BAAuBD,OAAO,CAACE,cAA/B,yEAAiD,KAAjD;AACD;;AAED,QAAMC,MAAN,CAAaC,GAAb,EAAwD;AACtD,UAAMC,WAAW,GAAG,MAAM,KAAKC,iBAAL,CAAuBF,GAAvB,CAA1B;AACA,WAAO,MAAMA,GAAG,CAACG,GAAJ,CAAQC,cAAR,CAAuBH,WAAvB,CAAb;AACD;;AAED,QAAMI,IAAN,CAAWL,GAAX,EAAgD;AAC9C,UAAMM,QAAQ,GAAG,MAAM,KAAKP,MAAL,CAAYC,GAAZ,CAAvB;AAEA,wBAAIR,iBAAMe,KAAN,CAAY,iDAAZ,CAAJ;AACA,2CAA0BD,QAA1B;AACA;AACA,WAAO,IAAP;AACD;;AAED,QAAMJ,iBAAN,CAAwBF,GAAxB,EAAyD;AACvD,QAAI,CAAC,KAAKH,eAAV,EAA2B;AACzB,YAAMW,YAAY,GAAG,MAAMC,iBAAiB,CAACT,GAAD,CAA5C;;AACA,UAAIQ,YAAJ,EAAkB;AAChB,cAAME,OAAO,GAAG,MAAMC,+BAA+B,CAACX,GAAD,EAAMQ,YAAN,CAArD;AACA,eAAOE,OAAO,GAAGF,YAAH,GAAkB,MAAM,KAAKN,iBAAL,CAAuBF,GAAvB,CAAtC;AACD;AACF;;AACD,WAAO,MAAMY,gBAAgB,CAACZ,GAAD,CAA7B;AACD;;AA9ByC;;;;AAiCrC,MAAMa,aAAN,CAAqC;AAI1ClB,EAAAA,WAAW,CAACmB,YAAqB,GAAG,KAAzB,EAAgChB,cAAuB,GAAG,KAA1D,EAAiE;AAAA;;AAAA;;AAC1E,SAAKgB,YAAL,GAAoBA,YAApB;AACA,SAAKhB,cAAL,GAAsBA,cAAtB;AACD;;AAED,QAAMO,IAAN,CAAWL,GAAX,EAAgD;AAC9C,UAAMe,QAAQ,GAAG,MAAMC,sBAAsB,CAAChB,GAAD,CAA7C;;AACA,QAAIe,QAAJ,EAAc;AACZ,YAAM,KAAKE,cAAL,CAAoBjB,GAApB,EAAyBe,QAAzB,CAAN;AACA,0BAAIvB,iBAAMe,KAAN,CAAY,iDAAZ,CAAJ;AACD;;AACD,WAAO,IAAP;AACD;;AAED,QAAMU,cAAN,CAAqBjB,GAArB,EAAmCe,QAAnC,EAAiE;AAC/D,UAAMG,IAAI,GAAGlB,GAAG,CAACG,GAAJ,CAAQgB,WAAR,CAAoBC,cAApB,CAAmCC,MAAnC,CACXC,IAAI,IAAIA,IAAI,CAACC,iBAAL,KAA2BR,QAAQ,CAACS,EADjC,CAAb;AAGA,UAAMC,QAAQ,GAAGP,IAAI,CAACQ,GAAL,CAASC,OAAO,IAAInC,iBAAMe,KAAN,CAAYoB,OAAO,CAACC,cAApB,CAApB,EAAyDC,IAAzD,CAA8D,IAA9D,CAAjB;;AAEA,QAAIJ,QAAQ,IAAI,CAAC,KAAK3B,cAAtB,EAAsC;AACpC,YAAM;AAAEgC,QAAAA;AAAF,UAAc,MAAM,uBAAO,CAC/B;AACEC,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,OAAO,EAAG,wCAAuCR,QAAS;AAH5D,OAD+B,CAAP,CAA1B;;AAOA,UAAI,CAACK,OAAL,EAAc;AACZ,4BAAI,UAAJ;AACA;AACD;AACF;;AAED,wBAAI,wCAAJ;AACA,UAAM9B,GAAG,CAACG,GAAJ,CAAQ+B,cAAR,CAAuBnB,QAAQ,CAACS,EAAhC,CAAN;AAEA,QAAIV,YAAY,GAAG,KAAKA,YAAxB;;AACA,QAAIC,QAAQ,CAACoB,MAAb,EAAqB;AACnB,UAAI,CAACrB,YAAD,IAAiB,CAAC,KAAKhB,cAA3B,EAA2C;AACzC,cAAM;AAAEsC,UAAAA;AAAF,YAAa,MAAM,uBAAO,CAC9B;AACEL,UAAAA,IAAI,EAAE,SADR;AAEEC,UAAAA,IAAI,EAAE,QAFR;AAGEC,UAAAA,OAAO,EAAG;AAHZ,SAD8B,CAAP,CAAzB;AAOAnB,QAAAA,YAAY,GAAGsB,MAAf;AACD;;AAED,UAAItB,YAAJ,EAAkB;AAChB,cAAMd,GAAG,CAACqC,cAAJ,EAAN;AACA,cAAM,KAAIC,2BAAJ,EAAoBtC,GAAG,CAACuC,QAAxB,EAAkCH,MAAlC,CAAyC,CAACrB,QAAQ,CAACoB,MAAV,CAAzC,CAAN;AACD;AACF;;AAED,SAAK,MAAMf,cAAX,IAA6BF,IAA7B,EAAmC;AACjC,0BACG,qCAAoCE,cAAc,CAACQ,cAAe,KAAIR,cAAc,CAACoB,gBAAiB,GADzG;AAGA,YAAM,KAAIC,mDAAJ,EAA8B3B,YAA9B,EAA4C,KAAKhB,cAAjD,EAAiEmB,cAAjE,CACJjB,GADI,EAEJoB,cAFI,CAAN;AAID;AACF;;AArEyC;;;;AAwErC,MAAMsB,aAAN,CAAqC;AAC1C,QAAMrC,IAAN,CAAWL,GAAX,EAAgD;AAC9C,UAAMe,QAAQ,GAAG,MAAMC,sBAAsB,CAAChB,GAAD,CAA7C;;AACA,QAAIe,QAAJ,EAAc;AACZ,YAAM,KAAK4B,cAAL,CAAoB3C,GAApB,EAAyBe,QAAzB,CAAN;AAEA,0BAAIvB,iBAAMe,KAAN,CAAY,iDAAZ,CAAJ;AACA,YAAMqC,OAAO,GAAG5C,GAAG,CAACG,GAAJ,CAAQgB,WAAR,CAAoB0B,eAApB,CAAoCC,IAApC,CAAyCC,CAAC,IAAIA,CAAC,CAACvB,EAAF,KAAST,QAAQ,CAACS,EAAhE,CAAhB;;AACA,UAAIoB,OAAJ,EAAa;AACX,+CAA0BA,OAA1B;AACD;;AACD;AACD;;AACD,WAAO,IAAP;AACD;;AAED,QAAMD,cAAN,CAAqB3C,GAArB,EAAmCe,QAAnC,EAAiE;AAC/D,UAAMG,IAAI,GAAGlB,GAAG,CAACG,GAAJ,CAAQgB,WAAR,CAAoBC,cAApB,CAAmCC,MAAnC,CACXC,IAAI,IAAIA,IAAI,CAACC,iBAAL,KAA2BR,QAAQ,CAACS,EADjC,CAAb;AAGA,UAAMC,QAAQ,GAAGP,IAAI,CAACQ,GAAL,CAASC,OAAO,IAAInC,iBAAMe,KAAN,CAAYoB,OAAO,CAACC,cAApB,CAApB,EAAyDC,IAAzD,CAA8D,IAA9D,CAAjB;;AAEA,QAAIX,IAAI,CAAC8B,MAAL,GAAc,CAAlB,EAAqB;AACnB,YAAMC,QAAkB,GAAG;AACzBlB,QAAAA,IAAI,EAAE,SADmB;AAEzBC,QAAAA,IAAI,EAAE,SAFmB;AAGzBC,QAAAA,OAAO,EAAG,wCAAuCR,QAAS;AAHjC,OAA3B;AAKA,YAAM;AAAEK,QAAAA;AAAF,UAAc,MAAM,uBAAOmB,QAAP,CAA1B;;AACA,UAAI,CAACnB,OAAL,EAAc;AACZ,4BAAI,yBAAJ;AACA;AACD;AACF;;AAED,UAAM7B,WAAW,GAAG,MAAM,KAAKC,iBAAL,CAAuBF,GAAvB,CAA1B;AACA,UAAMA,GAAG,CAACqC,cAAJ,EAAN;AACA,UAAMrC,GAAG,CAACG,GAAJ,CAAQ+C,cAAR,CAAuBnC,QAAQ,CAACS,EAAhC,EAAoC,EACxC,GAAGvB,WADqC;AAExCkD,MAAAA,MAAM,EAAEnD,GAAG,CAACuC,QAAJ,CAAaa,IAAb,CAAkB5B,EAFc;AAGxC6B,MAAAA,QAAQ,EAAErD,GAAG,CAACuC,QAAJ,CAAaa,IAAb,CAAkBpB;AAHY,KAApC,CAAN;;AAMA,SAAK,MAAMZ,cAAX,IAA6BF,IAA7B,EAAmC;AACjC,0BACG,qCAAoCE,cAAc,CAACQ,cAAe,KAAIR,cAAc,CAACoB,gBAAiB,GADzG;AAGA,YAAM,KAAIC,mDAAJ,EAA8B,IAA9B,EAAoCxB,cAApC,CAAmDjB,GAAnD,EAAwDoB,cAAxD,CAAN;AACD;AACF;;AAED,QAAMlB,iBAAN,CAAwBF,GAAxB,EAAyD;AACvD,UAAMQ,YAAY,GAAG,MAAMC,iBAAiB,CAACT,GAAD,CAA5C;;AACA,QAAIQ,YAAJ,EAAkB;AAChB,YAAME,OAAO,GAAG,MAAMC,+BAA+B,CAACX,GAAD,EAAMQ,YAAN,CAArD;AACA,aAAOE,OAAO,GAAGF,YAAH,GAAkB,MAAM,KAAKN,iBAAL,CAAuBF,GAAvB,CAAtC;AACD;;AACD,WAAO,MAAMY,gBAAgB,CAACZ,GAAD,CAA7B;AACD;;AA1DyC;;;;AA6DrC,MAAMsD,2BAAN,CAAmD;AAIxD3D,EAAAA,WAAW,CAACC,OAAD,EAA2B;AAAA;;AAAA;;AACpC,UAAM;AAAEgC,MAAAA,cAAF;AAAkBY,MAAAA;AAAlB,QAAuC5C,OAA7C;AACA,SAAK2D,eAAL,GAAuB3B,cAAvB;AACA,SAAK4B,iBAAL,GAAyBhB,gBAAzB;AACD;;AAED,SAAOiB,kBAAP,CAA0BzD,GAA1B,EAA4E;AAC1E,QAAI,CAACA,GAAG,CAAC0D,iBAAT,EAA4B;AAC1BC,qBAAIC,KAAJ,CAAU,qCAAV;;AACA,aAAO,IAAP;AACD;;AACD,UAAMhE,OAAO,GAAGiE,4BAA4B,CAAC7D,GAAD,CAA5C;AACA,QAAI,CAACJ,OAAL,EAAc,OAAO,IAAP;AACd,WAAO,IAAI0D,2BAAJ,CAAgC1D,OAAhC,CAAP;AACD;;AAED,QAAMS,IAAN,CAAWL,GAAX,EAAgD;AAC9C,UAAMe,QAAQ,GAAG,MAAMC,sBAAsB,CAAChB,GAAD,EAAM;AACjD8D,MAAAA,aAAa,EAAE;AADkC,KAAN,CAA7C;;AAGA,QAAI/C,QAAJ,EAAc;AACZ,YAAMf,GAAG,CAACG,GAAJ,CAAQ4D,WAAR,CAAoB,KAAKR,eAAzB,EAA0C,KAAKC,iBAA/C,EAAkEzC,QAAQ,CAACS,EAA3E,CAAN;AACA,0BACEhC,iBAAMe,KAAN,CACG,qDAAoD,KAAKgD,eAAgB,KAAI,KAAKC,iBAAkB,GADvG,CADF;AAKD;;AACD,WAAO,IAAP;AACD;;AAjCuD;;;;AAoCnD,MAAMQ,6BAAN,CAAqD;AAK1DrE,EAAAA,WAAW,CAACC,OAAD,EAA2B;AAAA;;AAAA;;AAAA;;AAAA;;AACpC,UAAM;AAAEgC,MAAAA,cAAF;AAAkBY,MAAAA;AAAlB,QAAuC5C,OAA7C;AACA,SAAK2D,eAAL,GAAuB3B,cAAvB;AACA,SAAK4B,iBAAL,GAAyBhB,gBAAzB;AACA,SAAK3C,eAAL,6BAAuBD,OAAO,CAACE,cAA/B,2EAAiD,KAAjD;AACD;;AAED,QAAMmE,cAAN,CAAqBjE,GAArB,EAAmCkE,iBAAnC,EAA8D;AAC5D,UAAMlE,GAAG,CAACG,GAAJ,CAAQ4D,WAAR,CAAoB,KAAKR,eAAzB,EAA0C,KAAKC,iBAA/C,EAAkEU,iBAAlE,CAAN;AACA,wBACE1E,iBAAMe,KAAN,CACG,qDAAoD,KAAKgD,eAAgB,KAAI,KAAKC,iBAAkB,GADvG,CADF;AAKD;;AAED,QAAMnD,IAAN,CAAWL,GAAX,EAAgD;AAC9C,QAAI,CAACA,GAAG,CAACmE,IAAT,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAW,6CAAX,CAAN;AACD;;AAED,UAAMC,oBAAoB,GAAG,MAAMC,iBAAiB,CAACtE,GAAG,CAACG,GAAJ,CAAQgB,WAAT,EAAsBnB,GAAtB,CAApD;;AAEA,QAAIqE,oBAAoB,CAACrB,MAArB,KAAgC,CAApC,EAAuC;AACrC,YAAM1C,QAAQ,GAAG,MAAM,IAAIZ,aAAJ,CAAkB;AAAEI,QAAAA,cAAc,EAAE,KAAKD;AAAvB,OAAlB,EAA4DE,MAA5D,CACrBC,GADqB,CAAvB;AAGA,YAAM,KAAKiE,cAAL,CAAoBjE,GAApB,EAAyBM,QAAQ,CAACkB,EAAlC,CAAN;AACA,aAAO,IAAP;AACD,KAb6C,CAe9C;;;AACA,UAAM+C,uBAAuB,GAAGF,oBAAoB,CAAC,CAAD,CAApD;AACA,UAAMG,eAAyB,GAAG;AAChCzC,MAAAA,IAAI,EAAE,SAD0B;AAEhCC,MAAAA,IAAI,EAAE,SAF0B;AAGhCC,MAAAA,OAAO,EAAG,GAAEwC,cAAc,CACxBF,uBADwB,EAExBvE,GAAG,CAACG,GAAJ,CAAQgB,WAFgB,EAGxB,OAHwB,CAIxB,6CAP8B;AAQhCuD,MAAAA,QAAQ,EAAEC;AARsB,KAAlC;;AAWA,QAAI,CAAC,KAAK9E,eAAV,EAA2B;AACzB,YAAM;AAAEiC,QAAAA;AAAF,UAAc,MAAM,uBAAO0C,eAAP,CAA1B;;AACA,UAAI,CAAC1C,OAAL,EAAc;AACZ,eAAO,MAAM,KAAK8C,cAAL,CAAoB5E,GAApB,CAAb;AACD;AACF,KAjC6C,CAmC9C;;;AACA,wBAAK,mCAAkCuE,uBAAuB,CAACpC,MAAxB,IAAkC,OAAQ,EAAjF;AACA,UAAM,KAAK8B,cAAL,CAAoBjE,GAApB,EAAyBuE,uBAAuB,CAAC/C,EAAjD,CAAN;AACA,WAAO,IAAP;AACD;;AAED,QAAMoD,cAAN,CAAqB5E,GAArB,EAA0D;AACxD,UAAM6E,OAAO,GAAG,CACd;AACE7C,MAAAA,IAAI,EAAE,6CADR;AAEE8C,MAAAA,KAAK,EAAE;AAFT,KADc,EAKd;AAAE9C,MAAAA,IAAI,EAAE,yBAAR;AAAmC8C,MAAAA,KAAK,EAAE;AAA1C,KALc,CAAhB;AAQA,UAAM7B,QAAkB,GAAG;AACzBlB,MAAAA,IAAI,EAAE,MADmB;AAEzBC,MAAAA,IAAI,EAAE,QAFmB;AAGzBC,MAAAA,OAAO,EAAE,iEAHgB;AAIzB4C,MAAAA,OAJyB;AAKzBH,MAAAA,QAAQ,EAAEC;AALe,KAA3B;AAQA,UAAM;AAAEI,MAAAA;AAAF,QAAa,MAAM,uBAAO9B,QAAP,CAAzB;;AAEA,QAAI8B,MAAM,KAAK,UAAf,EAA2B;AACzB,YAAMzE,QAAQ,GAAG,MAAM,IAAIZ,aAAJ,CAAkB;AAAEI,QAAAA,cAAc,EAAE,KAAKD;AAAvB,OAAlB,EAA4DE,MAA5D,CACrBC,GADqB,CAAvB;AAGA,YAAM,KAAKiE,cAAL,CAAoBjE,GAApB,EAAyBM,QAAQ,CAACkB,EAAlC,CAAN;AACA,aAAO,IAAP;AACD,KAND,MAMO,IAAIuD,MAAM,KAAK,iBAAf,EAAkC;AACvC,aAAO,IAAIzB,2BAAJ,CAAgC;AACrCd,QAAAA,gBAAgB,EAAE,KAAKgB,iBADc;AAErC5B,QAAAA,cAAc,EAAE,KAAK2B;AAFgB,OAAhC,CAAP;AAID;;AAED,UAAM,IAAIa,KAAJ,CAAU,oBAAV,CAAN;AACD;;AA/FyD;;;;AAkG5D,SAASP,4BAAT,CAAsC7D,GAAtC,EAA4E;AAAA;;AAC1E,QAAMgF,UAAU,GAAGhF,GAAG,CAACiF,QAAJ,CAAaC,IAAhC;AACA,QAAMC,KAAK,GAAGnF,GAAG,CAACiF,QAAJ,CAAaE,KAA3B;AACA,QAAMvD,cAAc,GAAI,IAAGuD,KAAK,IAAInF,GAAG,CAACmE,IAAJ,CAASiB,QAAS,IAAGJ,UAAW,EAApE;AACA,QAAMxC,gBAAgB,wBAAGxC,GAAG,CAACiF,QAAJ,CAAa9E,GAAhB,sDAAG,kBAAkBqC,gBAA3C;;AACA,MAAI,CAACwC,UAAD,IAAe,CAACxC,gBAApB,EAAsC;AACpCmB,mBAAIC,KAAJ,CAAW,kDAAX;;AACA,WAAO,IAAP;AACD;;AAED,SAAO;AAAEhC,IAAAA,cAAF;AAAkBY,IAAAA;AAAlB,GAAP;AACD;;AAED,eAAe8B,iBAAf,CAAiCe,cAAjC,EAAiErF,GAAjE,EAA+E;AAC7E,QAAMsF,SAAS,GAAGD,cAAc,CAACxC,eAAf,CAA+BxB,MAA/B,CACfC,IAAD,IAAsCA,IAAI,CAACS,IAAL,KAAc,WADpC,CAAlB;;AAGA,MAAI,CAAC/B,GAAG,CAACuF,WAAJ,EAAL,EAAwB;AACtB,wBAAI/F,iBAAMgG,MAAN,CAAc,4DAAd,CAAJ;AACA,WAAOF,SAAP;AACD;;AACD,QAAMG,eAAe,GAAG,KAAInD,2BAAJ,EAAoBtC,GAAG,CAACuC,QAAxB,CAAxB;AACA,QAAMmD,iBAAiB,GAAG,MAAMD,eAAe,CAACE,IAAhB,EAAhC;AACA,QAAMC,UAAU,GAAG,MAAMC,8BAA8B,CACrDH,iBADqD,EAErDJ,SAFqD,CAAvD;AAIA,SAAOQ,gBAAgB,CAACJ,iBAAD,EAAoBE,UAApB,CAAvB;AACD;;AAED,SAASG,iBAAT,CACEzF,QADF,EAEE0F,cAFF,EAGkB;AAChB,MAAI,CAACA,cAAL,EAAqB;AACnB,WAAO,SAAP;AACD;;AACD,SAAOA,cAAc,CAACC,QAAf,CAAwB3F,QAAxB,IAAoC,OAApC,GAA8C,SAArD;AACD;;AAMD,eAAeU,sBAAf,CACEhB,GADF,EAEEJ,OAAoB,GAAG,EAFzB,EAGsC;AACpC,QAAMyF,cAAc,GAAGrF,GAAG,CAACG,GAAJ,CAAQgB,WAA/B;AACA,MAAImE,SAAS,GAAGD,cAAc,CAACxC,eAAf,CAA+BxB,MAA/B,CACbC,IAAD,IAAsCA,IAAI,CAACS,IAAL,KAAc,WADtC,CAAhB;AAGA,MAAIiE,cAA2C,GAAG,IAAlD;;AACA,MAAIhG,GAAG,CAACuF,WAAJ,EAAJ,EAAuB;AACrB,UAAME,eAAe,GAAG,KAAInD,2BAAJ,EAAoBtC,GAAG,CAACuC,QAAxB,CAAxB;AACA,UAAMmD,iBAAiB,GAAG,MAAMD,eAAe,CAACE,IAAhB,EAAhC;AACAK,IAAAA,cAAc,GAAG,MAAMH,8BAA8B,CACnDH,iBADmD,EAEnDJ,SAFmD,CAArD;AAID;;AACDA,EAAAA,SAAS,GAAG1F,OAAO,CAACkE,aAAR,IAAyBkC,cAAzB,GAA0CA,cAA1C,GAA2DV,SAAvE;;AAEA,MAAIA,SAAS,CAACtC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BW,mBAAIuC,IAAJ,CAAS,uEAAT;;AACA,WAAO,IAAP;AACD;;AAED,QAAMjD,QAAkB,GAAG;AACzBlB,IAAAA,IAAI,EAAE,MADmB;AAEzBC,IAAAA,IAAI,EAAE,kBAFmB;AAGzBC,IAAAA,OAAO,EAAE,mCAHgB;AAIzB4C,IAAAA,OAAO,EAAES,SAAS,CAAC5D,GAAV,CAAc,CAACyE,KAAD,EAAQC,KAAR,MAAmB;AACxCpE,MAAAA,IAAI,EAAEyC,cAAc,CAAC0B,KAAD,EAAQd,cAAR,EAAwBU,iBAAiB,CAACI,KAAD,EAAQH,cAAR,CAAzC,CADoB;AAExClB,MAAAA,KAAK,EAAEsB;AAFiC,KAAnB,CAAd;AAJgB,GAA3B;AASA,QAAM;AAAEC,IAAAA;AAAF,MAAuB,MAAM,uBAAOpD,QAAP,CAAnC;AACA,SAAOqC,SAAS,CAACe,gBAAD,CAAhB;AACD;;AAED,SAASC,uBAAT,CAAiCC,SAAjC,EAA0DpF,WAA1D,EAA+F;AAC7F,QAAM0B,eAAe,GAAG1B,WAAW,CAAC0B,eAAZ,CAA4BxB,MAA5B,CACtBC,IAAI,IAAIA,IAAI,CAACS,IAAL,KAAc,WAAd,IAA6BT,IAAI,CAACa,MAAL,KAAgBoE,SAAS,CAAC/E,EADzC,CAAxB;AAGA,QAAMJ,cAAc,GAClByB,eAAe,CAACG,MAAhB,KAA2B,CAA3B,GACI7B,WAAW,CAACC,cAAZ,CAA2BC,MAA3B,CAAkCC,IAAI,IAAIA,IAAI,CAACC,iBAAL,KAA2BsB,eAAe,CAAC,CAAD,CAAf,CAAmBrB,EAAxF,CADJ,GAEI,EAHN;AAIA,QAAMgF,QAAQ,GAAGpF,cAAc,CAC5BM,GADc,CACVqB,CAAC,IAAK,SAAQA,CAAC,CAACnB,cAAe,KAAImB,CAAC,CAACP,gBAAiB,GAD5C,EAEdX,IAFc,CAET,IAFS,CAAjB;AAIA,QAAM4E,YAAY,GAAGD,QAAQ,GACxB,OAAMhH,iBAAMkH,IAAN,CAAY,YAAWF,QAAS,EAAhC,CAAmC,EADjB,GAExB,OAAMhH,iBAAMkH,IAAN,CAAY,sBAAZ,CAAmC,EAF9C;AAIA,QAAM;AAAE1E,IAAAA,IAAF;AAAQ2E,IAAAA,MAAR;AAAgBnF,IAAAA,EAAhB;AAAoBoF,IAAAA,OAApB;AAA6BC,IAAAA,OAA7B;AAAsCC,IAAAA,SAAtC;AAAiDC,IAAAA;AAAjD,MAAkER,SAAxE;AACA,QAAMS,WAAW,GAAG,2BAAW,IAAIC,IAAJ,CAASL,OAAO,GAAG,IAAnB,CAAX,CAApB;AACA,QAAMM,WAAW,GAAG,2BAAW,IAAID,IAAJ,CAASJ,OAAO,GAAG,IAAnB,CAAX,CAApB;AACA,SAAQ,GAAE7E,IAAK,KAAI2E,MAAO,gBAAenF,EAAG,oBAAmBuF,YAAa,cAAaR,SAAS,CAACY,OAAQ,gBAAeL,SAAU;eACvHE,WAAY,cAAaE,WAAY;IAChDT,YAAa,EAFf;AAGD;;AAGD,SAAShC,cAAT,CACEnE,QADF,EAEEa,WAFF,EAGEiG,cAA8B,GAAG,SAHnC,EAIU;AACR,QAAMhG,cAAc,GAAGD,WAAW,CAACC,cAAZ,CAA2BC,MAA3B,CACrBC,IAAI,IAAIA,IAAI,CAACC,iBAAL,KAA2BjB,QAAQ,CAACkB,EADvB,CAAvB;AAGA,QAAMgF,QAAQ,GAAGpF,cAAc,CAC5BM,GADc,CACVqB,CAAC,IAAK,GAAEA,CAAC,CAACnB,cAAe,KAAImB,CAAC,CAACP,gBAAiB,GADtC,EAEdX,IAFc,CAET,IAFS,CAAjB;AAIA,QAAM4E,YAAY,GAAGD,QAAQ,GACxB,SAAQhH,iBAAMkH,IAAN,CAAY,WAAUF,QAAS,EAA/B,CAAkC,EADlB,GAExB,SAAQhH,iBAAMkH,IAAN,CAAY,sBAAZ,CAAmC,EAFhD;AAIA,MAAIK,YAAY,GAAGzG,QAAQ,CAAC+G,oBAA5B;;AACA,MAAI;AACF,QAAI,CAACN,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAGO,sBAAeC,uBAAf,CACbjH,QAAQ,CAACkH,OADI,EAEblH,QAAQ,CAACmH,YAFI,CAAf;AAID;AACF,GAPD,CAOE,OAAO7D,KAAP,EAAc;AACdmD,IAAAA,YAAY,GAAGvH,iBAAMkI,GAAN,CAAU,uBAAV,CAAf;AACD;;AAED,MAAIC,YAAJ;;AACA,MAAIP,cAAc,KAAK,OAAvB,EAAgC;AAC9BO,IAAAA,YAAY,GAAGnI,iBAAMkH,IAAN,CAAW,6CAAX,CAAf;AACD,GAFD,MAEO,IAAIU,cAAc,KAAK,SAAvB,EAAkC;AACvCO,IAAAA,YAAY,GAAGnI,iBAAMkH,IAAN,CAAW,6CAAX,CAAf;AACD,GAFM,MAEA;AACLiB,IAAAA,YAAY,GAAGnI,iBAAMkH,IAAN,CACb,qEADa,CAAf;AAGD;;AACD,SAAQ,sCACNpG,QAAQ,CAAC6B,MAAT,IAAmB,OACpB,oBAAmB4E,YAAa,cAAazG,QAAQ,CAAC6C,MAAO,IAAGsD,YAAa,GAAEkB,YAAa,EAF7F;AAGD;;AAED,eAAe/G,gBAAf,CAAgCZ,GAAhC,EAAiE;AAC/D,QAAMA,GAAG,CAACqC,cAAJ,EAAN;AACA,QAAMuF,OAAO,GAAG,KAAItF,2BAAJ,EAAoBtC,GAAG,CAACuC,QAAxB,CAAhB;;AACA,MAAI;AACF,WAAO,MAAMqF,OAAO,CAAC7H,MAAR,EAAb;AACD,GAFD,CAEE,OAAO8H,CAAP,EAAU;AACV,QAAIA,CAAC,CAACC,IAAF,KAAW,2CAAf,EAA4D;AAC1D,YAAMC,KAAK,GAAG,MAAMH,OAAO,CAACjC,IAAR,EAApB;;AACAhC,qBAAIuC,IAAJ,CAAS,kFAAT;;AACAvC,qBAAIuC,IAAJ,CAAS3G,yCAAT;;AACA,YAAMyI,UAAU,GAAGhI,GAAG,CAACG,GAAJ,CAAQgB,WAAR,CAAoB0B,eAApB,CAChBxB,MADgB,CACR4G,IAAD,IAAsCA,IAAI,CAAClG,IAAL,KAAc,WAAd,IAA6B,CAAC,CAACkG,IAAI,CAAC9F,MADjE,EAEhB+F,MAFgB,CAGf,CAACC,GAAD,EAAMF,IAAN,MAAgB,EAAE,GAAGE,GAAL;AAAU,SAACF,IAAI,CAAC9F,MAAL,IAAe,EAAhB,GAAqB8F;AAA/B,OAAhB,CAHe,EAIf,EAJe,CAAnB,CAJ0D,CAW1D;;AACA,YAAMG,IAAI,GAAG,6BAAa,MAAb,EAAqB,wBAArB,CAAb;AACA,0BACE5I,iBAAM6I,IAAN,CAAY,6EAAZ,CADF;AAGA,0BAAI7I,iBAAM6I,IAAN,CAAY,kBAAiBD,IAAK,EAAlC,CAAJ;AACA;AAEA,UAAI;AAAEhG,QAAAA;AAAF,UAAa,MAAM,uBAAO,CAC5B;AACEL,QAAAA,IAAI,EAAE,UADR;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,OAAO,EAAE,gCAHX;AAIE4C,QAAAA,OAAO,EAAEkD,KAAK,CAACrG,GAAN,CAAU,CAACuG,IAAD,EAAO7B,KAAP,MAAkB;AACnCtB,UAAAA,KAAK,EAAEsB,KAD4B;AAEnCpE,UAAAA,IAAI,EAAEsE,uBAAuB,CAAC2B,IAAD,EAAOjI,GAAG,CAACG,GAAJ,CAAQgB,WAAf;AAFM,SAAlB,CAAV,CAJX;AAQEuD,QAAAA,QAAQ,EAAEC;AARZ,OAD4B,CAAP,CAAvB;;AAaA,WAAK,MAAMyB,KAAX,IAAoBhE,MAApB,EAA4B;AAC1B,cAAMkG,QAAQ,GAAGP,KAAK,CAAC3B,KAAD,CAAtB;;AACA,YAAIkC,QAAQ,IAAIN,UAAU,CAACM,QAAQ,CAAC9G,EAAV,CAA1B,EAAyC;AACvC,gBAAM,IAAIX,aAAJ,CAAkB,IAAlB,EAAwBI,cAAxB,CAAuCjB,GAAvC,EAA4CgI,UAAU,CAACM,QAAQ,CAAC9G,EAAV,CAAtD,CAAN;AACD,SAFD,MAEO;AACL,gBAAMoG,OAAO,CAACxF,MAAR,CAAe,CAACkG,QAAQ,CAAC9G,EAAV,CAAf,CAAN;AACD;AACF;AACF,KAxCD,MAwCO;AACL,YAAMqG,CAAN;AACD;AACF;;AACD,SAAO,MAAMjH,gBAAgB,CAACZ,GAAD,CAA7B;AACD;;AAED,SAASuI,qBAAT,CAA+BvI,GAA/B,EAAyE;AACvE,QAAMwI,iBAAiB,GAAG,EAAE,GAAGC;AAAL,GAA1B;;AACA,MAAIzI,GAAG,CAACuF,WAAJ,MAAqBiD,iBAAiB,CAACE,QAA3C,EAAqD;AACnDF,IAAAA,iBAAiB,CAACE,QAAlB,GAA6BF,iBAAiB,CAACE,QAAlB,CAA2BrH,MAA3B,CAAkCsH,CAAC,IAAIA,CAAC,KAAK,QAA7C,CAA7B;AACD;;AACD,SAAOH,iBAAP;AACD;;AAED,SAASI,eAAT,CAAyB5I,GAAzB,EAAuC6I,WAAvC,EAAiF;AAC/E,MAAI7I,GAAG,CAACuF,WAAJ,EAAJ,EAAuB;AACrBsD,IAAAA,WAAW,CAAC1F,MAAZ,GAAqBnD,GAAG,CAACuC,QAAJ,CAAaa,IAAb,CAAkB5B,EAAvC;AACD;;AACD,MAAI,CAAC,4BAAWqH,WAAX,CAAL,EAA8B;AAC5B,UAAM,IAAIzE,KAAJ,CAAW,yBAAwByE,WAAY,EAA/C,CAAN;AACD;;AACD,SAAOA,WAAP;AACD;;AAED,eAAepI,iBAAf,CAAiCT,GAAjC,EAAyE;AACvE,QAAMwI,iBAAiB,GAAGD,qBAAqB,CAACvI,GAAD,CAA/C;;AACA,QAAMQ,YAAY,GAAG,MAAM,gDAAmBgI,iBAAnB,CAA3B;;AACA,MAAIhI,YAAJ,EAAkB;AAChB,UAAMF,QAAQ,GAAGsI,eAAe,CAAC5I,GAAD,EAAMQ,YAAN,CAAhC;;AACA,WAAO,MAAMsI,sBAAsB,CAACxI,QAAD,CAAnC;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACF;;AAED,eAAewI,sBAAf,CAAsCxI,QAAtC,EAA6E;AAC3E,MAAI;AACFA,IAAAA,QAAQ,CAAC+G,oBAAT,GAAgCC,sBAAeC,uBAAf,CAC9BjH,QAAQ,CAACkH,OADqB,EAE9BlH,QAAQ,CAACmH,YAFqB,CAAhC;AAID,GALD,CAKE,OAAO7D,KAAP,EAAc;AACdD,mBAAIuC,IAAJ,CAAS,6CAAT;;AACAvC,mBAAIuC,IAAJ,CAAS,sDAAT;;AACAvC,mBAAIuC,IAAJ,CAAStC,KAAT;AACD;;AACD,SAAOtD,QAAP;AACD;;AAEM,eAAeK,+BAAf,CAA+CX,GAA/C,EAA6D+I,gBAA7D,EAAyF;AAC9F,MAAI,CAAC/I,GAAG,CAACuF,WAAJ,EAAL,EAAwB;AACtB5B,mBAAIuC,IAAJ,CAAS,mFAAT;;AACA,WAAO,IAAP;AACD;;AACD,QAAM8C,OAAO,GAAG,oBACb,4EADa,EAEdC,KAFc,EAAhB;AAIA,QAAMxD,eAAe,GAAG,KAAInD,2BAAJ,EAAoBtC,GAAG,CAACuC,QAAxB,CAAxB;AACA,QAAMmD,iBAAiB,GAAG,MAAMD,eAAe,CAACE,IAAhB,EAAhC;AACA,QAAMuD,sBAAsB,GAAG,MAAMrD,8BAA8B,CAACH,iBAAD,EAAoB,CACrFqD,gBADqF,CAApB,CAAnE;AAGA,QAAMI,WAAW,GAAGD,sBAAsB,CAAClG,MAAvB,GAAgC,CAApD;;AACA,MAAImG,WAAJ,EAAiB;AACf,UAAMC,UAAU,GAAI,uEAApB;AACAJ,IAAAA,OAAO,CAACK,OAAR,CAAgBD,UAAhB;AACD,GAHD,MAGO;AACL,UAAME,UAAU,GAAI,+EAApB;AACAN,IAAAA,OAAO,CAACO,IAAR,CAAaD,UAAb;AACD;;AACD,SAAOH,WAAP;AACD;;AAED,eAAetD,8BAAf,CACEH,iBADF,EAEE8D,iBAFF,EAGgB;AACd,MAAIA,iBAAiB,CAACxG,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,WAAO,EAAP;AACD,GAHa,CAKd;;;AACA,QAAMyG,6BAA6B,GAAG/D,iBAAiB,CACpDrE,MADmC,EAElC;AACA4G,EAAAA,IAAI,IAAIA,IAAI,CAACrB,OAAL,GAAe8C,IAAI,CAACC,KAAL,CAAW1C,IAAI,CAAC2C,GAAL,KAAa,IAAxB,CAHW,EAKnClI,GALmC,CAK/BuG,IAAI,IAAIA,IAAI,CAAClB,YALkB,CAAtC;AAMA,QAAMmC,sBAAsB,GAAGM,iBAAiB,CAACnI,MAAlB,CAAyB4G,IAAI,IAAI;AAC9D,UAAMlB,YAAY,GAAGkB,IAAI,CAACZ,oBAA1B;;AACA,QAAI,CAACN,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AACD,WAAO0C,6BAA6B,CAACxD,QAA9B,CAAuCc,YAAvC,CAAP;AACD,GAN8B,CAA/B;AAOA,SAAOmC,sBAAP;AACD;;AAED,SAASpD,gBAAT,CACEJ,iBADF,EAEE8D,iBAFF,EAGO;AACL,SAAOA,iBAAiB,CAACK,IAAlB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC9C,UAAMC,SAAS,GAAGtE,iBAAiB,CAAC5C,IAAlB,CAAuBmF,IAAI,IAAIA,IAAI,CAACzG,EAAL,KAAYsI,KAAK,CAAC3H,MAAjD,CAAlB;AACA,UAAM8H,WAAW,GAAGD,SAAS,GAAGA,SAAS,CAACpD,OAAb,GAAuBsD,MAAM,CAACC,iBAA3D;AACA,UAAMC,SAAS,GAAG1E,iBAAiB,CAAC5C,IAAlB,CAAuBmF,IAAI,IAAIA,IAAI,CAACzG,EAAL,KAAYuI,KAAK,CAAC5H,MAAjD,CAAlB;AACA,UAAMkI,WAAW,GAAGD,SAAS,GAAGA,SAAS,CAACxD,OAAb,GAAuBsD,MAAM,CAACC,iBAA3D;AACA,WAAOE,WAAW,GAAGJ,WAArB;AACD,GANM,CAAP;AAOD;;AAEM,eAAeK,qBAAf,CAAqCC,cAArC,EAGsB;AAC3B,QAAM;AAAEC,IAAAA,WAAF;AAAerH,IAAAA;AAAf,MAA0BoH,cAAhC;AACA,QAAM9C,YAAY,GAAGgD,OAAO,CAACC,GAAR,CAAYC,0BAAjC,CAF2B,CAI3B;;AACA,MAAI,CAACH,WAAD,IAAgB,CAAC/C,YAArB,EAAmC;AACjC,WAAO,IAAP;AACD,GAP0B,CAS3B;;;AACA,MAAI,EAAE+C,WAAW,IAAI/C,YAAf,IAA+BtE,MAAjC,CAAJ,EAA8C;AAC5C,UAAM,IAAIiB,KAAJ,CACJ,qMADI,CAAN;AAGD;;AAED,QAAM9D,QAAQ,GAAG;AACfkH,IAAAA,OAAO,EAAE,MAAMoD,mBAAGC,QAAH,CAAYL,WAAZ,EAAmC,QAAnC,CADA;AAEfrH,IAAAA,MAFe;AAGfsE,IAAAA;AAHe,GAAjB;AAKA,SAAO,MAAMqB,sBAAsB,CAACxI,QAAD,CAAnC;AACD;;AAEM,eAAewK,qBAAf,CACL9K,GADK,EAELoB,cAFK,EAGLd,QAHK,EAIwB;AAC7B,QAAMI,OAAO,GAAG,MAAMC,+BAA+B,CAACX,GAAD,EAAMM,QAAN,CAArD;;AACA,MAAI,CAACI,OAAL,EAAc;AACZ,UAAM,IAAI0D,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,QAAM2G,kBAAkB,GAAG,MAAM/K,GAAG,CAACG,GAAJ,CAAQC,cAAR,CAAuBE,QAAvB,CAAjC;AACA,QAAM;AAAEsB,IAAAA,cAAF;AAAkBY,IAAAA;AAAlB,MAAuCpB,cAA7C;AAEA,QAAMpB,GAAG,CAACG,GAAJ,CAAQ4D,WAAR,CAAoBnC,cAApB,EAAoCY,gBAApC,EAAsDuI,kBAAkB,CAACvJ,EAAzE,CAAN;AACA,sBACEhC,iBAAMe,KAAN,CACG,qDAAoDqB,cAAe,KAAIY,gBAAiB,GAD3F,CADF;AAKA,SAAOuI,kBAAP;AACD","sourcesContent":["import chalk from 'chalk';\nimport dateformat from 'dateformat';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport { IosCodeSigning } from '@expo/xdl';\n\nimport terminalLink from 'terminal-link';\nimport prompt, { Question } from '../../prompt';\nimport log from '../../log';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  distCertSchema,\n} from '../credentials';\nimport { CredentialSchema, askForUserProvided } from '../actions/promptForCredentials';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { DistCert, DistCertInfo, DistCertManager, isDistCert } from '../../appleApi';\nimport { RemoveProvisioningProfile } from './IosProvisioningProfile';\n\nconst APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline(\n  'three'\n)} Apple Distribution Certificates generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Distribution Certificates are not application specific!\n`;\n\ntype CliOptions = {\n  nonInteractive?: boolean;\n};\n\nexport type DistCertOptions = {\n  experienceName: string;\n  bundleIdentifier: string;\n} & CliOptions;\n\nexport class CreateIosDist implements IView {\n  _nonInteractive: boolean;\n\n  constructor(options: CliOptions = {}) {\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async create(ctx: Context): Promise<IosDistCredentials> {\n    const newDistCert = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createDistCert(newDistCert);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const distCert = await this.create(ctx);\n\n    log(chalk.green('Successfully created Distribution Certificate\\n'));\n    displayIosUserCredentials(distCert);\n    log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    if (!this._nonInteractive) {\n      const userProvided = await promptForDistCert(ctx);\n      if (userProvided) {\n        const isValid = await validateDistributionCertificate(ctx, userProvided);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generateDistCert(ctx);\n  }\n}\n\nexport class RemoveIosDist implements IView {\n  shouldRevoke: boolean;\n  nonInteractive: boolean;\n\n  constructor(shouldRevoke: boolean = false, nonInteractive: boolean = false) {\n    this.shouldRevoke = shouldRevoke;\n    this.nonInteractive = nonInteractive;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      log(chalk.green('Successfully removed Distribution Certificate\\n'));\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosDistCredentials) {\n    const apps = ctx.ios.credentials.appCredentials.filter(\n      cred => cred.distCredentialsId === selected.id\n    );\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (appsList && !this.nonInteractive) {\n      const { confirm } = await prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `You are removing certificate used by ${appsList}. Do you want to continue?`,\n        },\n      ]);\n      if (!confirm) {\n        log('Aborting');\n        return;\n      }\n    }\n\n    log('Removing Distribution Certificate...\\n');\n    await ctx.ios.deleteDistCert(selected.id);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (selected.certId) {\n      if (!shouldRevoke && !this.nonInteractive) {\n        const { revoke } = await prompt([\n          {\n            type: 'confirm',\n            name: 'revoke',\n            message: `Do you also want to revoke it on Apple Developer Portal?`,\n          },\n        ]);\n        shouldRevoke = revoke;\n      }\n\n      if (shouldRevoke) {\n        await ctx.ensureAppleCtx();\n        await new DistCertManager(ctx.appleCtx).revoke([selected.certId]);\n      }\n    }\n\n    for (const appCredentials of apps) {\n      log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      await new RemoveProvisioningProfile(shouldRevoke, this.nonInteractive).removeSpecific(\n        ctx,\n        appCredentials\n      );\n    }\n  }\n}\n\nexport class UpdateIosDist implements IView {\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx);\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      log(chalk.green('Successfully updated Distribution Certificate\\n'));\n      const updated = ctx.ios.credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosDistCredentials) {\n    const apps = ctx.ios.credentials.appCredentials.filter(\n      cred => cred.distCredentialsId === selected.id\n    );\n    const appsList = apps.map(appCred => chalk.green(appCred.experienceName)).join(', ');\n\n    if (apps.length > 1) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'confirm',\n        message: `You are updating certificate used by ${appsList}. Do you want to continue?`,\n      };\n      const { confirm } = await prompt(question);\n      if (!confirm) {\n        log('Aborting update process');\n        return;\n      }\n    }\n\n    const newDistCert = await this.provideOrGenerate(ctx);\n    await ctx.ensureAppleCtx();\n    await ctx.ios.updateDistCert(selected.id, {\n      ...newDistCert,\n      teamId: ctx.appleCtx.team.id,\n      teamName: ctx.appleCtx.team.name,\n    });\n\n    for (const appCredentials of apps) {\n      log(\n        `Removing Provisioning Profile for ${appCredentials.experienceName} (${appCredentials.bundleIdentifier})`\n      );\n      await new RemoveProvisioningProfile(true).removeSpecific(ctx, appCredentials);\n    }\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<DistCert> {\n    const userProvided = await promptForDistCert(ctx);\n    if (userProvided) {\n      const isValid = await validateDistributionCertificate(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generateDistCert(ctx);\n  }\n}\n\nexport class UseExistingDistributionCert implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n\n  constructor(options: DistCertOptions) {\n    const { experienceName, bundleIdentifier } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n  }\n\n  static withProjectContext(ctx: Context): UseExistingDistributionCert | null {\n    if (!ctx.hasProjectContext) {\n      log.error('Can only be used in project context');\n      return null;\n    }\n    const options = getOptionsFromProjectContext(ctx);\n    if (!options) return null;\n    return new UseExistingDistributionCert(options);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectDistCertFromList(ctx, {\n      filterInvalid: true,\n    });\n    if (selected) {\n      await ctx.ios.useDistCert(this._experienceName, this._bundleIdentifier, selected.id);\n      log(\n        chalk.green(\n          `Successfully assigned Distribution Certificate to ${this._experienceName} (${this._bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseDistributionCert implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _nonInteractive: boolean;\n\n  constructor(options: DistCertOptions) {\n    const { experienceName, bundleIdentifier } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async assignDistCert(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.useDistCert(this._experienceName, this._bundleIdentifier, userCredentialsId);\n    log(\n      chalk.green(\n        `Successfully assigned Distribution Certificate to ${this._experienceName} (${this._bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingCertificates = await getValidDistCerts(ctx.ios.credentials, ctx);\n\n    if (existingCertificates.length === 0) {\n      const distCert = await new CreateIosDist({ nonInteractive: this._nonInteractive }).create(\n        ctx\n      );\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid certs\n    const autoselectedCertificate = existingCertificates[0];\n    const confirmQuestion: Question = {\n      type: 'confirm',\n      name: 'confirm',\n      message: `${formatDistCert(\n        autoselectedCertificate,\n        ctx.ios.credentials,\n        'VALID'\n      )} \\n Would you like to use this certificate?`,\n      pageSize: Infinity,\n    };\n\n    if (!this._nonInteractive) {\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    log(`Using Distribution Certificate: ${autoselectedCertificate.certId || '-----'}`);\n    await this.assignDistCert(ctx, autoselectedCertificate.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing certificate] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new certificate]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select an iOS distribution certificate to use for code signing:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const distCert = await new CreateIosDist({ nonInteractive: this._nonInteractive }).create(\n        ctx\n      );\n      await this.assignDistCert(ctx, distCert.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingDistributionCert({\n        bundleIdentifier: this._bundleIdentifier,\n        experienceName: this._experienceName,\n      });\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nfunction getOptionsFromProjectContext(ctx: Context): DistCertOptions | null {\n  const experience = ctx.manifest.slug;\n  const owner = ctx.manifest.owner;\n  const experienceName = `@${owner || ctx.user.username}/${experience}`;\n  const bundleIdentifier = ctx.manifest.ios?.bundleIdentifier;\n  if (!experience || !bundleIdentifier) {\n    log.error(`slug and ios.bundleIdentifier need to be defined`);\n    return null;\n  }\n\n  return { experienceName, bundleIdentifier };\n}\n\nasync function getValidDistCerts(iosCredentials: IosCredentials, ctx: Context) {\n  const distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  if (!ctx.hasAppleCtx()) {\n    log(chalk.yellow(`Unable to determine validity of Distribution Certificates.`));\n    return distCerts;\n  }\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n    certInfoFromApple,\n    distCerts\n  );\n  return sortByExpiryDesc(certInfoFromApple, validCerts);\n}\n\nfunction getValidityStatus(\n  distCert: IosDistCredentials,\n  validDistCerts: IosDistCredentials[] | null\n): ValidityStatus {\n  if (!validDistCerts) {\n    return 'UNKNOWN';\n  }\n  return validDistCerts.includes(distCert) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n};\n\nasync function selectDistCertFromList(\n  ctx: Context,\n  options: ListOptions = {}\n): Promise<IosDistCredentials | null> {\n  const iosCredentials = ctx.ios.credentials;\n  let distCerts = iosCredentials.userCredentials.filter(\n    (cred): cred is IosDistCredentials => cred.type === 'dist-cert'\n  );\n  let validDistCerts: IosDistCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const distCertManager = new DistCertManager(ctx.appleCtx);\n    const certInfoFromApple = await distCertManager.list();\n    validDistCerts = await filterRevokedDistributionCerts<IosDistCredentials>(\n      certInfoFromApple,\n      distCerts\n    );\n  }\n  distCerts = options.filterInvalid && validDistCerts ? validDistCerts : distCerts;\n\n  if (distCerts.length === 0) {\n    log.warn('There are no Distribution Certificates available in your expo account');\n    return null;\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select certificate from the list.',\n    choices: distCerts.map((entry, index) => ({\n      name: formatDistCert(entry, iosCredentials, getValidityStatus(entry, validDistCerts)),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return distCerts[credentialsIndex];\n}\n\nfunction formatDistCertFromApple(appleInfo: DistCertInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'dist-cert' && cred.certId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.distCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, status, id, expires, created, ownerName, serialNumber } = appleInfo;\n  const expiresDate = dateformat(new Date(expires * 1000));\n  const createdDate = dateformat(new Date(created * 1000));\n  return `${name} (${status}) - Cert ID: ${id}, Serial number: ${serialNumber}, Team ID: ${appleInfo.ownerId}, Team name: ${ownerName}\n    expires: ${expiresDate}, created: ${createdDate}\n  ${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatDistCert(\n  distCert: IosDistCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.distCredentialsId === distCert.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let serialNumber = distCert.distCertSerialNumber;\n  try {\n    if (!serialNumber) {\n      serialNumber = IosCodeSigning.findP12CertSerialNumber(\n        distCert.certP12,\n        distCert.certPassword\n      );\n    }\n  } catch (error) {\n    serialNumber = chalk.red('invalid serial number');\n  }\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Distribution Certificate (Cert ID: ${\n    distCert.certId || '-----'\n  }, Serial number: ${serialNumber}, Team ID: ${distCert.teamId})${usedByString}${validityText}`;\n}\n\nasync function generateDistCert(ctx: Context): Promise<DistCert> {\n  await ctx.ensureAppleCtx();\n  const manager = new DistCertManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR') {\n      const certs = await manager.list();\n      log.warn('Maximum number of Distribution Certificates generated on Apple Developer Portal.');\n      log.warn(APPLE_DIST_CERTS_TOO_MANY_GENERATED_ERROR);\n      const usedByExpo = ctx.ios.credentials.userCredentials\n        .filter((cert): cert is IosDistCredentials => cert.type === 'dist-cert' && !!cert.certId)\n        .reduce<{ [key: string]: IosDistCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.certId || '']: cert }),\n          {}\n        );\n\n      // https://docs.expo.io/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      log(\n        chalk.grey(`✅  Distribution Certificates can be revoked with no production side effects`)\n      );\n      log(chalk.grey(`ℹ️  Learn more ${here}`));\n      log();\n\n      let { revoke } = await prompt([\n        {\n          type: 'checkbox',\n          name: 'revoke',\n          message: 'Select certificates to revoke.',\n          choices: certs.map((cert, index) => ({\n            value: index,\n            name: formatDistCertFromApple(cert, ctx.ios.credentials),\n          })),\n          pageSize: Infinity,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = certs[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosDist(true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generateDistCert(ctx);\n}\n\nfunction _getRequiredQuestions(ctx: Context): CredentialSchema<DistCert> {\n  const requiredQuestions = { ...distCertSchema };\n  if (ctx.hasAppleCtx() && requiredQuestions.required) {\n    requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n  }\n  return requiredQuestions;\n}\n\nfunction _ensureDistCert(ctx: Context, partialCert: Partial<DistCert>): DistCert {\n  if (ctx.hasAppleCtx()) {\n    partialCert.teamId = ctx.appleCtx.team.id;\n  }\n  if (!isDistCert(partialCert)) {\n    throw new Error(`Not of type DistCert: ${partialCert}`);\n  }\n  return partialCert;\n}\n\nasync function promptForDistCert(ctx: Context): Promise<DistCert | null> {\n  const requiredQuestions = _getRequiredQuestions(ctx);\n  const userProvided = await askForUserProvided(requiredQuestions);\n  if (userProvided) {\n    const distCert = _ensureDistCert(ctx, userProvided);\n    return await _getDistCertWithSerial(distCert);\n  } else {\n    return null;\n  }\n}\n\nasync function _getDistCertWithSerial(distCert: DistCert): Promise<DistCert> {\n  try {\n    distCert.distCertSerialNumber = IosCodeSigning.findP12CertSerialNumber(\n      distCert.certP12,\n      distCert.certPassword\n    );\n  } catch (error) {\n    log.warn('Unable to access certificate serial number.');\n    log.warn('Make sure that certificate and password are correct.');\n    log.warn(error);\n  }\n  return distCert;\n}\n\nexport async function validateDistributionCertificate(ctx: Context, distributionCert: DistCert) {\n  if (!ctx.hasAppleCtx()) {\n    log.warn('Unable to validate distribution certificate due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(\n    `Checking validity of distribution certificate on Apple Developer Portal...`\n  ).start();\n\n  const distCertManager = new DistCertManager(ctx.appleCtx);\n  const certInfoFromApple = await distCertManager.list();\n  const validDistributionCerts = await filterRevokedDistributionCerts(certInfoFromApple, [\n    distributionCert,\n  ]);\n  const isValidCert = validDistributionCerts.length > 0;\n  if (isValidCert) {\n    const successMsg = `Successfully validated Distribution Certificate against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `The Distribution Certificate is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidCert;\n}\n\nasync function filterRevokedDistributionCerts<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): Promise<T[]> {\n  if (distributionCerts.length === 0) {\n    return [];\n  }\n\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validCertSerialsOnAppleServer = certInfoFromApple\n    .filter(\n      // remove expired certs\n      cert => cert.expires > Math.floor(Date.now() / 1000)\n    )\n    .map(cert => cert.serialNumber);\n  const validDistributionCerts = distributionCerts.filter(cert => {\n    const serialNumber = cert.distCertSerialNumber;\n    if (!serialNumber) {\n      return false;\n    }\n    return validCertSerialsOnAppleServer.includes(serialNumber);\n  });\n  return validDistributionCerts;\n}\n\nfunction sortByExpiryDesc<T extends DistCert>(\n  certInfoFromApple: DistCertInfo[],\n  distributionCerts: T[]\n): T[] {\n  return distributionCerts.sort((certA, certB) => {\n    const certAInfo = certInfoFromApple.find(cert => cert.id === certA.certId);\n    const certAExpiry = certAInfo ? certAInfo.expires : Number.NEGATIVE_INFINITY;\n    const certBInfo = certInfoFromApple.find(cert => cert.id === certB.certId);\n    const certBExpiry = certBInfo ? certBInfo.expires : Number.NEGATIVE_INFINITY;\n    return certBExpiry - certAExpiry;\n  });\n}\n\nexport async function getDistCertFromParams(builderOptions: {\n  distP12Path?: string;\n  teamId?: string;\n}): Promise<DistCert | null> {\n  const { distP12Path, teamId } = builderOptions;\n  const certPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;\n\n  // none of the distCert params were set, assume user has no intention of passing it in\n  if (!distP12Path && !certPassword) {\n    return null;\n  }\n\n  // partial distCert params were set, assume user has intention of passing it in\n  if (!(distP12Path && certPassword && teamId)) {\n    throw new Error(\n      'In order to provide a Distribution Certificate through the CLI parameters, you have to pass --dist-p12-path parameter, --team-id parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.'\n    );\n  }\n\n  const distCert = {\n    certP12: await fs.readFile(distP12Path as string, 'base64'),\n    teamId,\n    certPassword,\n  } as DistCert;\n  return await _getDistCertWithSerial(distCert);\n}\n\nexport async function useDistCertFromParams(\n  ctx: Context,\n  appCredentials: IosAppCredentials,\n  distCert: DistCert\n): Promise<IosDistCredentials> {\n  const isValid = await validateDistributionCertificate(ctx, distCert);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Distribution Certificate');\n  }\n  const iosDistCredentials = await ctx.ios.createDistCert(distCert);\n  const { experienceName, bundleIdentifier } = appCredentials;\n\n  await ctx.ios.useDistCert(experienceName, bundleIdentifier, iosDistCredentials.id);\n  log(\n    chalk.green(\n      `Successfully assigned Distribution Certificate to ${experienceName} (${bundleIdentifier})`\n    )\n  );\n  return iosDistCredentials;\n}\n"],"file":"IosDistCert.js"}