{"version":3,"sources":["../../../src/credentials/views/IosProvisioningProfile.ts"],"names":["RemoveProvisioningProfile","constructor","shouldRevoke","nonInteractive","open","ctx","selected","selectProfileFromExpo","ios","credentials","removeSpecific","chalk","green","experienceName","bundleIdentifier","deleteProvisioningProfile","revoke","type","name","message","ensureAppleCtx","ppManager","ProvisioningProfileManager","appleCtx","CreateProvisioningProfile","options","distCert","_experienceName","_bundleIdentifier","_distCert","_nonInteractive","create","provisioningProfile","provideOrGenerate","appleTeam","hasAppleCtx","team","appleTeamSchema","Error","updateProvisioningProfile","appCredentials","find","app","userProvided","provisioningProfileSchema","yellow","generateProvisioningProfile","UseExistingProvisioningProfile","selectProfileFromApple","configureAndUpdateProvisioningProfile","CreateOrReuseProvisioningProfile","choosePreferred","profiles","profileWithSameCert","profile","certificates","some","cert","id","certId","user","existingProfiles","list","length","autoselectedProfile","confirmQuestion","formatProvisioningProfileFromApple","pageSize","Infinity","confirm","_createOrReuse","provisioningProfileId","choices","value","question","action","log","warn","map","entry","index","credentialsIndex","iosCredentials","filter","getName","teamId","manager","inHouse","profileName","Date","toISOString","validateProfileWithoutApple","spinner","start","base64EncodedProfile","fail","buffer","Buffer","from","toString","profilePlist","plist","parse","distCertFingerprint","PKCS12Utils","getP12CertFingerprint","certP12","certPassword","IosCodeSigning","validateProvisioningProfile","e","isExpired","succeed","getAppleInfo","profilesFromApple","configuredProfileFromApple","appleProfile","profileFromApple","updatedProfile","useExisting","appleInfo","expires","expireString","toDateString","details","getProvisioningProfileFromParams","builderOptions","provisioningProfilePath","fs","readFile","useProvisioningProfileFromParams","isValid"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport plist, { PlistObject } from '@expo/plist';\nimport { IosCodeSigning, PKCS12Utils } from '@expo/xdl';\nimport prompt, { Question } from '../../prompt';\nimport log from '../../log';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  appleTeamSchema,\n  provisioningProfileSchema,\n} from '../credentials';\nimport { askForUserProvided, getCredentialsFromUser } from '../actions/promptForCredentials';\nimport { displayIosAppCredentials } from '../actions/list';\nimport {\n  AppleCtx,\n  DistCert,\n  ProvisioningProfile,\n  ProvisioningProfileInfo,\n  ProvisioningProfileManager,\n} from '../../appleApi';\n\ntype CliOptions = {\n  nonInteractive?: boolean;\n};\n\nexport type ProvisioningProfileOptions = {\n  experienceName: string;\n  bundleIdentifier: string;\n  distCert: DistCert;\n} & CliOptions;\n\nexport class RemoveProvisioningProfile implements IView {\n  shouldRevoke: boolean;\n  nonInteractive: boolean;\n\n  constructor(shouldRevoke: boolean = false, nonInteractive: boolean = false) {\n    this.shouldRevoke = shouldRevoke;\n    this.nonInteractive = nonInteractive;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const selected = await selectProfileFromExpo(ctx.ios.credentials);\n    if (selected) {\n      await this.removeSpecific(ctx, selected);\n      log(\n        chalk.green(\n          `Successfully removed Provisioning Profile for ${selected.experienceName} (${selected.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n\n  async removeSpecific(ctx: Context, selected: IosAppCredentials) {\n    log('Removing Provisioning Profile...\\n');\n    await ctx.ios.deleteProvisioningProfile(selected.experienceName, selected.bundleIdentifier);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !this.nonInteractive) {\n      const { revoke } = await prompt([\n        {\n          type: 'confirm',\n          name: 'revoke',\n          message: 'Do you also want to revoke it on Apple Developer Portal?',\n        },\n      ]);\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n      await ppManager.revoke(selected.bundleIdentifier);\n    }\n  }\n}\n\nexport class CreateProvisioningProfile implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _distCert: DistCert;\n  _nonInteractive: boolean;\n\n  constructor(options: ProvisioningProfileOptions) {\n    const { experienceName, bundleIdentifier, distCert } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._distCert = distCert;\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async create(ctx: Context): Promise<ProvisioningProfile> {\n    const provisioningProfile = await this.provideOrGenerate(ctx);\n    const appleTeam = ctx.hasAppleCtx()\n      ? ctx.appleCtx.team\n      : await getCredentialsFromUser(appleTeamSchema);\n    if (!appleTeam) {\n      throw new Error('Must provide a valid Apple Team Id');\n    }\n    return await ctx.ios.updateProvisioningProfile(\n      this._experienceName,\n      this._bundleIdentifier,\n      provisioningProfile,\n      appleTeam\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.create(ctx);\n\n    log(chalk.green('Successfully created Provisioning Profile\\n'));\n    const appCredentials = ctx.ios.credentials.appCredentials.find(\n      app =>\n        app.experienceName === this._experienceName &&\n        app.bundleIdentifier === this._bundleIdentifier\n    )!;\n    displayIosAppCredentials(appCredentials);\n    log();\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<ProvisioningProfile> {\n    if (!this._nonInteractive) {\n      const userProvided = await askForUserProvided(provisioningProfileSchema);\n      if (userProvided) {\n        // userProvided profiles don't come with ProvisioningProfileId's (only accessible from Apple Portal API)\n        log(chalk.yellow('Provisioning profile: Unable to validate uploaded profile.'));\n        return userProvided;\n      }\n    }\n    return await generateProvisioningProfile(ctx, this._bundleIdentifier, this._distCert);\n  }\n}\n\nexport class UseExistingProvisioningProfile implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _distCert: DistCert;\n\n  constructor(options: ProvisioningProfileOptions) {\n    const { experienceName, bundleIdentifier, distCert } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._distCert = distCert;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    await ctx.ensureAppleCtx();\n    const selected = await selectProfileFromApple(ctx.appleCtx, this._bundleIdentifier);\n    if (selected) {\n      await configureAndUpdateProvisioningProfile(\n        ctx,\n        this._experienceName,\n        this._bundleIdentifier,\n        this._distCert,\n        selected\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReuseProvisioningProfile implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _distCert: DistCert;\n  _nonInteractive: boolean;\n\n  constructor(options: ProvisioningProfileOptions) {\n    const { experienceName, bundleIdentifier, distCert } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._distCert = distCert;\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  choosePreferred(profiles: ProvisioningProfileInfo[]): ProvisioningProfileInfo {\n    // prefer the profile that already has the same dist cert associated with it\n    const profileWithSameCert = profiles.find(profile =>\n      profile.certificates.some(cert => cert.id === this._distCert.certId)\n    );\n\n    // if not, just get an arbitrary profile\n    return profileWithSameCert || profiles[0];\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    if (!ctx.hasAppleCtx()) {\n      return new CreateProvisioningProfile({\n        experienceName: this._experienceName,\n        bundleIdentifier: this._bundleIdentifier,\n        distCert: this._distCert,\n        nonInteractive: this._nonInteractive,\n      });\n    }\n\n    const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n    const existingProfiles = await ppManager.list(this._bundleIdentifier);\n\n    if (existingProfiles.length === 0) {\n      return new CreateProvisioningProfile({\n        experienceName: this._experienceName,\n        bundleIdentifier: this._bundleIdentifier,\n        distCert: this._distCert,\n        nonInteractive: this._nonInteractive,\n      });\n    }\n\n    const autoselectedProfile = this.choosePreferred(existingProfiles);\n    // autoselect creds if we find valid certs\n    const confirmQuestion: Question = {\n      type: 'confirm',\n      name: 'confirm',\n      message: `${formatProvisioningProfileFromApple(\n        autoselectedProfile\n      )} \\n Would you like to use this profile?`,\n      pageSize: Infinity,\n    };\n\n    if (!this._nonInteractive) {\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    log(`Using Provisioning Profile: ${autoselectedProfile.provisioningProfileId}`);\n    await configureAndUpdateProvisioningProfile(\n      ctx,\n      this._experienceName,\n      this._bundleIdentifier,\n      this._distCert,\n      autoselectedProfile\n    );\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing provisioning profile] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new provisioning profile]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select a Provisioning Profile:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      return new CreateProvisioningProfile({\n        experienceName: this._experienceName,\n        bundleIdentifier: this._bundleIdentifier,\n        distCert: this._distCert,\n        nonInteractive: this._nonInteractive,\n      });\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingProvisioningProfile({\n        experienceName: this._experienceName,\n        bundleIdentifier: this._bundleIdentifier,\n        distCert: this._distCert,\n      });\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function selectProfileFromApple(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string\n): Promise<ProvisioningProfileInfo | null> {\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profiles = await ppManager.list(bundleIdentifier);\n  if (profiles.length === 0) {\n    log.warn(\n      `There are no Provisioning Profiles available in your apple account for bundleIdentifier: ${bundleIdentifier}`\n    );\n    return null;\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      name: formatProvisioningProfileFromApple(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function selectProfileFromExpo(\n  iosCredentials: IosCredentials\n): Promise<IosAppCredentials | null> {\n  const profiles = iosCredentials.appCredentials.filter(\n    ({ credentials }) => !!credentials.provisioningProfile && !!credentials.provisioningProfileId\n  );\n  if (profiles.length === 0) {\n    log.warn('There are no Provisioning Profiles available in your account');\n    return null;\n  }\n\n  const getName = (profile: IosAppCredentials) => {\n    const id = chalk.green(profile.credentials.provisioningProfileId || '-----');\n    const teamId = profile.credentials.teamId || '------';\n    return `Provisioning Profile (ID: ${id}, Team ID: ${teamId})`;\n  };\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select Provisioning Profile from the list.',\n    choices: profiles.map((entry, index) => ({\n      name: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return profiles[credentialsIndex];\n}\n\nasync function generateProvisioningProfile(\n  ctx: Context,\n  bundleIdentifier: string,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  await ctx.ensureAppleCtx();\n  const manager = new ProvisioningProfileManager(ctx.appleCtx);\n  const type = ctx.appleCtx.team.inHouse ? 'Enterprise ' : 'AppStore';\n  const profileName = `*[expo] ${bundleIdentifier} ${type} ${new Date().toISOString()}`; // Apple drops [ if its the first char (!!)\n  return await manager.create(bundleIdentifier, distCert, profileName);\n}\n\n// Best effort validation without Apple credentials\nexport async function validateProfileWithoutApple(\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert,\n  bundleIdentifier: string\n): Promise<boolean> {\n  const spinner = ora(`Performing best effort validation of Provisioning Profile...\\n`).start();\n  const base64EncodedProfile = provisioningProfile.provisioningProfile;\n  if (!base64EncodedProfile) {\n    spinner.fail('No profile on file');\n    return false;\n  }\n\n  const buffer = Buffer.from(base64EncodedProfile, 'base64');\n  const profile = buffer.toString('utf-8');\n  const profilePlist = plist.parse(profile) as PlistObject;\n\n  try {\n    const distCertFingerprint = await PKCS12Utils.getP12CertFingerprint(\n      distCert.certP12,\n      distCert.certPassword\n    );\n\n    IosCodeSigning.validateProvisioningProfile(profilePlist, {\n      distCertFingerprint,\n      bundleIdentifier,\n    });\n  } catch (e) {\n    spinner.fail(`Provisioning profile is invalid: ${e.toString()}`);\n    return false;\n  }\n\n  const isExpired = new Date(profilePlist['ExpirationDate'] as string) <= new Date();\n  if (isExpired) {\n    spinner.fail('Provisioning profile is expired');\n    return false;\n  }\n\n  spinner.succeed('Successfully performed best effort validation of Provisioning Profile.');\n  return true;\n}\n\nexport async function getAppleInfo(\n  appleCtx: AppleCtx,\n  bundleIdentifier: string,\n  profile: ProvisioningProfile\n): Promise<ProvisioningProfileInfo | null> {\n  if (!profile.provisioningProfileId) {\n    log(\n      chalk.yellow('Provisioning Profile: cannot look up profile on Apple Servers - there is no id')\n    );\n    return null;\n  }\n\n  const spinner = ora(`Getting Provisioning Profile info from Apple's Servers...\\n`).start();\n  const ppManager = new ProvisioningProfileManager(appleCtx);\n  const profilesFromApple = await ppManager.list(bundleIdentifier);\n\n  const configuredProfileFromApple = profilesFromApple.find(\n    appleProfile => appleProfile.provisioningProfileId === profile.provisioningProfileId\n  );\n\n  if (!configuredProfileFromApple) {\n    spinner.fail(\n      `Provisioning Profile: ${profile.provisioningProfileId} does not exist on Apple Servers`\n    );\n    return null;\n  }\n\n  spinner.succeed(\n    `Successfully fetched Provisioning Profile ${profile.provisioningProfileId} from Apple Servers`\n  );\n  return configuredProfileFromApple;\n}\n\nexport async function configureAndUpdateProvisioningProfile(\n  ctx: Context,\n  experienceName: string,\n  bundleIdentifier: string,\n  distCert: DistCert,\n  profileFromApple: ProvisioningProfileInfo\n) {\n  // configure profile on Apple's Server to use our distCert\n  const ppManager = new ProvisioningProfileManager(ctx.appleCtx);\n  const updatedProfile = await ppManager.useExisting(bundleIdentifier, profileFromApple, distCert);\n  log(\n    chalk.green(\n      `Successfully configured Provisioning Profile ${\n        profileFromApple.provisioningProfileId\n      } on Apple Servers with Distribution Certificate ${distCert.certId || ''}`\n    )\n  );\n\n  // Update profile on expo servers\n  await ctx.ios.updateProvisioningProfile(\n    experienceName,\n    bundleIdentifier,\n    updatedProfile,\n    ctx.appleCtx.team\n  );\n  log(\n    chalk.green(\n      `Successfully assigned Provisioning Profile to ${experienceName} (${bundleIdentifier})`\n    )\n  );\n}\n\nfunction formatProvisioningProfileFromApple(appleInfo: ProvisioningProfileInfo) {\n  const { expires, provisioningProfileId } = appleInfo;\n  const id = provisioningProfileId ?? '-----';\n  const name = appleInfo.name ?? '-----';\n  const expireString = expires ? new Date(expires * 1000).toDateString() : 'unknown';\n  const details = chalk.green(`\\n    Name: ${name}\\n    Expiry: ${expireString}`);\n  return `Provisioning Profile - ID: ${id}${details}`;\n}\n\nexport async function getProvisioningProfileFromParams(builderOptions: {\n  provisioningProfilePath?: string;\n  teamId?: string;\n}): Promise<ProvisioningProfile | null> {\n  const { provisioningProfilePath, teamId } = builderOptions;\n\n  // none of the provisioningProfile params were set, assume user has no intention of passing it in\n  if (!provisioningProfilePath && !teamId) {\n    return null;\n  }\n\n  // partial provisioningProfile params were set, assume user has intention of passing it in\n  if (!(provisioningProfilePath && teamId)) {\n    throw new Error(\n      'In order to provide a Provisioning Profile through the CLI parameters, you have to pass --provisioning-profile-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    provisioningProfile: await fs.readFile(provisioningProfilePath as string, 'base64'),\n  };\n}\n\nexport async function useProvisioningProfileFromParams(\n  ctx: Context,\n  appCredentials: IosAppCredentials,\n  teamId: string,\n  provisioningProfile: ProvisioningProfile,\n  distCert: DistCert\n): Promise<ProvisioningProfile> {\n  const { experienceName, bundleIdentifier } = appCredentials;\n  const isValid = await validateProfileWithoutApple(\n    provisioningProfile,\n    distCert,\n    appCredentials.bundleIdentifier\n  );\n  if (!isValid) {\n    throw new Error('Uploaded invalid Provisioning Profile');\n  }\n\n  return await ctx.ios.updateProvisioningProfile(\n    experienceName,\n    bundleIdentifier,\n    provisioningProfile,\n    { id: teamId }\n  );\n}\n"],"file":"IosProvisioningProfile.js"}