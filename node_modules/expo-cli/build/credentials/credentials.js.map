{"version":3,"sources":["../../src/credentials/credentials.ts"],"names":["distCertSchema","id","canReuse","name","required","questions","certP12","question","type","base64Encode","certPassword","teamId","pushKeySchema","apnsKeyP8","apnsKeyId","provisioningProfileSchema","dependsOn","provisioningProfile","appleTeamSchema","keystoreSchema","provideMethodQuestion","expoGenerated","userProvided","keystore","keystorePassword","keyAlias","keyPassword","EXPO_WILL_GENERATE"],"mappings":";;;;;;AAIA;AACA;AACA;AAwCO,MAAMA,cAAmD,GAAG;AACjEC,EAAAA,EAAE,EAAE,kBAD6D;AAEjEC,EAAAA,QAAQ,EAAE,IAFuD;AAGjEC,EAAAA,IAAI,EAAE,gCAH2D;AAIjEC,EAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,cAAZ,EAA4B,QAA5B,CAJuD;AAKjEC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE,mBADH;AAEPC,MAAAA,IAAI,EAAE,MAFC;AAGPC,MAAAA,YAAY,EAAE;AAHP,KADA;AAMTC,IAAAA,YAAY,EAAE;AACZF,MAAAA,IAAI,EAAE,UADM;AAEZD,MAAAA,QAAQ,EAAE;AAFE,KANL;AAUTI,IAAAA,MAAM,EAAE;AACNH,MAAAA,IAAI,EAAE,QADA;AAEND,MAAAA,QAAQ,EAAE;AAFJ;AAVC;AALsD,CAA5D;;AAsBA,MAAMK,aAAiD,GAAG;AAC/DX,EAAAA,EAAE,EAAE,SAD2D;AAE/DC,EAAAA,QAAQ,EAAE,IAFqD;AAG/DC,EAAAA,IAAI,EAAE,sCAHyD;AAI/DC,EAAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,QAA3B,CAJqD;AAK/DC,EAAAA,SAAS,EAAE;AACTQ,IAAAA,SAAS,EAAE;AACTL,MAAAA,IAAI,EAAE,MADG;AAETD,MAAAA,QAAQ,EAAE;AAFD,KADF;AAKTO,IAAAA,SAAS,EAAE;AACTN,MAAAA,IAAI,EAAE,QADG;AAETD,MAAAA,QAAQ,EAAE;AAFD,KALF;AASTI,IAAAA,MAAM,EAAE;AACNH,MAAAA,IAAI,EAAE,QADA;AAEND,MAAAA,QAAQ,EAAE;AAFJ;AATC;AALoD,CAA1D;;AAqBA,MAAMQ,yBAAyE,GAAG;AACvFd,EAAAA,EAAE,EAAE,qBADmF;AAEvFE,EAAAA,IAAI,EAAE,4BAFiF;AAGvFC,EAAAA,QAAQ,EAAE,CAAC,qBAAD,CAH6E;AAIvFY,EAAAA,SAAS,EAAE,kBAJ4E;AAKvFX,EAAAA,SAAS,EAAE;AACTY,IAAAA,mBAAmB,EAAE;AACnBT,MAAAA,IAAI,EAAE,MADa;AAEnBD,MAAAA,QAAQ,EAAE,uCAFS;AAGnBE,MAAAA,YAAY,EAAE;AAHK;AADZ;AAL4E,CAAlF;;AAcA,MAAMS,eAA4D,GAAG;AAC1EjB,EAAAA,EAAE,EAAE,MADsE;AAE1EE,EAAAA,IAAI,EAAE,YAFoE;AAG1EC,EAAAA,QAAQ,EAAE,CAAC,IAAD,CAHgE;AAI1EC,EAAAA,SAAS,EAAE;AACTJ,IAAAA,EAAE,EAAE;AACFO,MAAAA,IAAI,EAAE,QADJ;AAEFD,MAAAA,QAAQ,EAAE;AAFR;AADK;AAJ+D,CAArE,C,CAYP;AACA;AACA;;;AAcO,MAAMY,cAAkD,GAAG;AAChElB,EAAAA,EAAE,EAAE,UAD4D;AAEhEE,EAAAA,IAAI,EAAE,kBAF0D;AAGhEiB,EAAAA,qBAAqB,EAAE;AACrBb,IAAAA,QAAQ,EAAG,iIADU;AAErBc,IAAAA,aAAa,EAAE,uBAFM;AAGrBC,IAAAA,YAAY,EAAE;AAHO,GAHyC;AAQhElB,EAAAA,QAAQ,EAAE,CAAC,UAAD,EAAa,kBAAb,EAAiC,UAAjC,EAA6C,aAA7C,CARsD;AAShEC,EAAAA,SAAS,EAAE;AACTkB,IAAAA,QAAQ,EAAE;AACRhB,MAAAA,QAAQ,EAAE,4BADF;AAERC,MAAAA,IAAI,EAAE,MAFE;AAGRC,MAAAA,YAAY,EAAE;AAHN,KADD;AAMTe,IAAAA,gBAAgB,EAAE;AAChBjB,MAAAA,QAAQ,EAAE,mBADM;AAEhBC,MAAAA,IAAI,EAAE;AAFU,KANT;AAUTiB,IAAAA,QAAQ,EAAE;AACRlB,MAAAA,QAAQ,EAAE,WADF;AAERC,MAAAA,IAAI,EAAE;AAFE,KAVD;AAcTkB,IAAAA,WAAW,EAAE;AACXnB,MAAAA,QAAQ,EAAE,cADC;AAEXC,MAAAA,IAAI,EAAE;AAFK;AAdJ;AATqD,CAA3D;;AA8BA,MAAMmB,kBAAkB,GAAG,kCAA3B","sourcesContent":["import { AndroidCredentials as Android } from '@expo/xdl';\nimport { CredentialSchema } from './actions/promptForCredentials';\nimport * as appleApi from '../appleApi';\n\n//\n// iOS\n//\n\nexport type IosCredentials = {\n  appCredentials: IosAppCredentials[];\n  userCredentials: (IosPushCredentials | IosDistCredentials)[];\n};\n\nexport type IosAppCredentials = {\n  experienceName: string;\n  bundleIdentifier: string;\n\n  pushCredentialsId?: number;\n  distCredentialsId?: number;\n  credentials: {\n    provisioningProfileId?: string;\n    provisioningProfile?: string;\n\n    teamId?: string;\n    teamName?: string;\n    // legacy pushCert\n    pushId?: string;\n    pushP12?: string;\n    pushPassword?: string;\n  };\n};\n\nexport type IosAllAppCredentials = IosAppCredentials & {\n  pushCredentials?: appleApi.PushKey;\n};\n\nexport type IosPushCredentials = {\n  id: number;\n  type: 'push-key';\n} & appleApi.PushKey;\n\nexport type IosDistCredentials = {\n  id: number;\n  type: 'dist-cert';\n} & appleApi.DistCert;\n\nexport const distCertSchema: CredentialSchema<appleApi.DistCert> = {\n  id: 'distributionCert',\n  canReuse: true,\n  name: 'Apple Distribution Certificate',\n  required: ['certP12', 'certPassword', 'teamId'],\n  questions: {\n    certP12: {\n      question: 'Path to P12 file:',\n      type: 'file',\n      base64Encode: true,\n    },\n    certPassword: {\n      type: 'password',\n      question: 'P12 password:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const pushKeySchema: CredentialSchema<appleApi.PushKey> = {\n  id: 'pushKey',\n  canReuse: true,\n  name: 'Apple Push Notifications service key',\n  required: ['apnsKeyP8', 'apnsKeyId', 'teamId'],\n  questions: {\n    apnsKeyP8: {\n      type: 'file',\n      question: 'Path to P8 file:',\n    },\n    apnsKeyId: {\n      type: 'string',\n      question: 'Key ID:',\n    },\n    teamId: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\nexport const provisioningProfileSchema: CredentialSchema<appleApi.ProvisioningProfile> = {\n  id: 'provisioningProfile',\n  name: 'Apple Provisioning Profile',\n  required: ['provisioningProfile'],\n  dependsOn: 'distributionCert',\n  questions: {\n    provisioningProfile: {\n      type: 'file',\n      question: 'Path to .mobile provisioning profile:',\n      base64Encode: true,\n    },\n  },\n};\n\nexport const appleTeamSchema: CredentialSchema<Pick<appleApi.Team, 'id'>> = {\n  id: 'team',\n  name: 'Apple Team',\n  required: ['id'],\n  questions: {\n    id: {\n      type: 'string',\n      question: 'Apple Team ID:',\n    },\n  },\n};\n\n//\n// Android\n//\n\nexport type FcmCredentials = {\n  fcmApiKey: string;\n};\n\nexport type Keystore = Android.Keystore;\n\nexport type AndroidCredentials = {\n  experienceName: string;\n  keystore: Keystore | null;\n  pushCredentials: FcmCredentials | null;\n};\n\nexport const keystoreSchema: CredentialSchema<Android.Keystore> = {\n  id: 'keystore',\n  name: 'Android Keystore',\n  provideMethodQuestion: {\n    question: `Would you like to upload a Keystore or have us generate one for you?\\nIf you don't know what this means, let us generate it! :)`,\n    expoGenerated: 'Generate new keystore',\n    userProvided: 'I want to upload my own file',\n  },\n  required: ['keystore', 'keystorePassword', 'keyAlias', 'keyPassword'],\n  questions: {\n    keystore: {\n      question: 'Path to the Keystore file.',\n      type: 'file',\n      base64Encode: true,\n    },\n    keystorePassword: {\n      question: 'Keystore password',\n      type: 'password',\n    },\n    keyAlias: {\n      question: 'Key alias',\n      type: 'string',\n    },\n    keyPassword: {\n      question: 'Key password',\n      type: 'password',\n    },\n  },\n};\n\nexport const EXPO_WILL_GENERATE = 'EXPO_PLEASE_GENERATE_THIS_FOR_ME';\n"],"file":"credentials.js"}