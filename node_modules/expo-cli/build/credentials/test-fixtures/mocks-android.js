"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApiV2MockCredentials = getApiV2MockCredentials;
exports.getApiV2Mock = getApiV2Mock;
exports.getCtxMock = getCtxMock;
exports.testAppJsonWithDifferentOwner = exports.testAppJson = exports.jester2 = exports.jester = exports.testAllCredentials = exports.testJester2AppCredentials = exports.testAppCredentials = exports.testPushCredentials = exports.testKeystore2 = exports.testKeystore = exports.testPackageName = exports.testExperienceName2 = exports.testJester2ExperienceName = exports.testExperienceName = exports.testSlug2 = exports.testSlug = void 0;

function _merge() {
  const data = _interopRequireDefault(require("lodash/merge"));

  _merge = function () {
    return data;
  };

  return data;
}

function _mockKeystore() {
  const data = require("./mock-keystore");

  _mockKeystore = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const today = new Date();
const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
const testSlug = 'testApp';
exports.testSlug = testSlug;
const testSlug2 = 'testApp2';
exports.testSlug2 = testSlug2;
const testExperienceName = `@jester/${testSlug}`;
exports.testExperienceName = testExperienceName;
const testJester2ExperienceName = `@jester2/${testSlug}`;
exports.testJester2ExperienceName = testJester2ExperienceName;
const testExperienceName2 = `@jester/${testSlug2}`;
exports.testExperienceName2 = testExperienceName2;
const testPackageName = 'test.com.app';
exports.testPackageName = testPackageName;
const testKeystore = {
  keystore: _mockKeystore().testKeystoreBase64,
  keystorePassword: 'ae6777e9444a436dbe533d2be46c83ba',
  keyAlias: 'QHdrb3p5cmEvY3JlZGVudGlhbHMtdGVzdA==',
  keyPassword: '43f760fe7ecd4e6a925779eb45bc787b'
};
exports.testKeystore = testKeystore;
const testKeystore2 = {
  keystore: _mockKeystore().testKeystore2Base64,
  keystorePassword: '6faeed2326b94effadbeb731510c2378',
  keyAlias: 'QHdrb3p5cmEvY3JlZGVudGlhbHMtdGVzdA==',
  keyPassword: 'e4829b38057042d78f25053f390478f9'
};
exports.testKeystore2 = testKeystore2;
const testPushCredentials = {
  fcmApiKey: 'examplefcmapikey'
};
exports.testPushCredentials = testPushCredentials;
const testAppCredentials = {
  experienceName: testExperienceName,
  keystore: testKeystore,
  pushCredentials: testPushCredentials
};
exports.testAppCredentials = testAppCredentials;
const testJester2AppCredentials = {
  experienceName: testJester2ExperienceName,
  keystore: testKeystore2,
  pushCredentials: testPushCredentials
};
exports.testJester2AppCredentials = testJester2AppCredentials;
const testAllCredentials = {
  [testExperienceName]: testAppCredentials,
  [testJester2ExperienceName]: testJester2AppCredentials
};
exports.testAllCredentials = testAllCredentials;
const jester = {
  kind: 'user',
  username: 'jester',
  nickname: 'jester',
  userId: 'jester-id',
  picture: 'jester-pic',
  userMetadata: {
    onboarded: true
  },
  currentConnection: 'Username-Password-Authentication',
  sessionSecret: 'jester-secret'
};
exports.jester = jester;
const jester2 = {
  kind: 'user',
  username: 'jester2',
  nickname: 'jester2',
  userId: 'jester2-id',
  picture: 'jester2-pic',
  userMetadata: {
    onboarded: true
  },
  currentConnection: 'Username-Password-Authentication',
  sessionSecret: 'jester2-secret'
};
exports.jester2 = jester2;

function getApiV2MockCredentials(overridenMock = {}) {
  const defaultCredentialsApiV2Mock = {
    getAsync: jest.fn(path => {
      if (path.match(/^credentials\/android$/)) {
        return {
          credentials: [testAppCredentials]
        };
      }

      const match = path.match(/^credentials\/android\/(@[-a-zA-Z0-9]+\/[-a-zA-Z0-9]+)$/);

      if (match) {
        return testAllCredentials[match[1]];
      }

      return null;
    })
  };
  return getApiV2Mock((0, _merge().default)(defaultCredentialsApiV2Mock, overridenMock));
}

function getApiV2Mock(overridenMock = {}) {
  const defaultMock = {
    sessionSecret: 'test-session',
    getAsync: jest.fn(),
    postAsync: jest.fn(),
    putAsync: jest.fn(),
    deleteAsync: jest.fn(),
    uploadFormDataAsync: jest.fn(),
    _requestAsync: jest.fn()
  };
  return (0, _merge().default)(defaultMock, overridenMock);
}

const testAppJson = {
  name: 'testing 123',
  version: '0.1.0',
  slug: testSlug,
  sdkVersion: '33.0.0',
  android: {
    package: testPackageName
  }
};
exports.testAppJson = testAppJson;
const testAppJsonWithDifferentOwner = { ...testAppJson,
  owner: jester2.username
};
exports.testAppJsonWithDifferentOwner = testAppJsonWithDifferentOwner;

function getCtxMock(overridenMock = {}) {
  const defaultMock = {
    android: {
      fetchAll: jest.fn(),
      fetchKeystore: jest.fn(() => testKeystore),
      updateKeystore: jest.fn(),
      removeKeystore: jest.fn()
    },
    ensureAppleCtx: jest.fn(),
    user: jest.fn(),
    hasAppleCtx: jest.fn(() => true),
    hasProjectContext: true,
    manifest: testAppJson,
    projectDir: '.'
  };
  return (0, _merge().default)(defaultMock, overridenMock);
}
//# sourceMappingURL=mocks-android.js.map