/// <reference types="jest" />
import { User } from '@expo/xdl';
import { AndroidCredentials } from '../credentials';
export declare const testSlug = "testApp";
export declare const testSlug2 = "testApp2";
export declare const testExperienceName: string;
export declare const testJester2ExperienceName: string;
export declare const testExperienceName2: string;
export declare const testPackageName = "test.com.app";
export declare const testKeystore: {
    keystore: string;
    keystorePassword: string;
    keyAlias: string;
    keyPassword: string;
};
export declare const testKeystore2: {
    keystore: string;
    keystorePassword: string;
    keyAlias: string;
    keyPassword: string;
};
export declare const testPushCredentials: {
    fcmApiKey: string;
};
export declare const testAppCredentials: {
    experienceName: string;
    keystore: {
        keystore: string;
        keystorePassword: string;
        keyAlias: string;
        keyPassword: string;
    };
    pushCredentials: {
        fcmApiKey: string;
    };
};
export declare const testJester2AppCredentials: {
    experienceName: string;
    keystore: {
        keystore: string;
        keystorePassword: string;
        keyAlias: string;
        keyPassword: string;
    };
    pushCredentials: {
        fcmApiKey: string;
    };
};
export declare const testAllCredentials: {
    [key: string]: AndroidCredentials;
};
export declare const jester: User;
export declare const jester2: User;
export declare function getApiV2MockCredentials(overridenMock?: {
    [key: string]: any;
}): {
    sessionSecret: string;
    getAsync: jest.Mock<any, any>;
    postAsync: jest.Mock<any, any>;
    putAsync: jest.Mock<any, any>;
    deleteAsync: jest.Mock<any, any>;
    uploadFormDataAsync: jest.Mock<any, any>;
    _requestAsync: jest.Mock<any, any>;
} & {
    [key: string]: any;
};
export declare function getApiV2Mock(overridenMock?: {
    [key: string]: any;
}): {
    sessionSecret: string;
    getAsync: jest.Mock<any, any>;
    postAsync: jest.Mock<any, any>;
    putAsync: jest.Mock<any, any>;
    deleteAsync: jest.Mock<any, any>;
    uploadFormDataAsync: jest.Mock<any, any>;
    _requestAsync: jest.Mock<any, any>;
} & {
    [key: string]: any;
};
export declare const testAppJson: {
    name: string;
    version: string;
    slug: string;
    sdkVersion: string;
    android: {
        package: string;
    };
};
export declare const testAppJsonWithDifferentOwner: {
    owner: string;
    name: string;
    version: string;
    slug: string;
    sdkVersion: string;
    android: {
        package: string;
    };
};
export declare function getCtxMock(overridenMock?: {
    [key: string]: any;
}): {
    android: {
        fetchAll: jest.Mock<any, any>;
        fetchKeystore: jest.Mock<{
            keystore: string;
            keystorePassword: string;
            keyAlias: string;
            keyPassword: string;
        }, []>;
        updateKeystore: jest.Mock<any, any>;
        removeKeystore: jest.Mock<any, any>;
    };
    ensureAppleCtx: jest.Mock<any, any>;
    user: jest.Mock<any, any>;
    hasAppleCtx: jest.Mock<boolean, []>;
    hasProjectContext: boolean;
    manifest: {
        name: string;
        version: string;
        slug: string;
        sdkVersion: string;
        android: {
            package: string;
        };
    };
    projectDir: string;
} & {
    [key: string]: any;
};
