"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApiV2MockCredentials = getApiV2MockCredentials;
exports.getApiV2Mock = getApiV2Mock;
exports.getCtxMock = getCtxMock;
exports.testAppJsonWithDifferentOwner = exports.testAppJson = exports.jester2 = exports.jester = exports.testAllCredentials = exports.testAppCredentials = exports.testAppCredential = exports.testLegacyPushCert = exports.testPushKeysFromApple = exports.testPushKeyFromApple = exports.testIosPushCredentials = exports.testIosPushCredential = exports.testPushKey = exports.testDistCertsFromApple = exports.testDistCertFromApple = exports.testIosDistCredentials = exports.testIosDistCredential = exports.testDistCert = exports.testProvisioningProfilesFromApple = exports.testProvisioningProfileFromApple = exports.testProvisioningProfiles = exports.testProvisioningProfile = exports.testAppleTeam = exports.testBundleIdentifier = exports.testExperienceName = exports.testSlug = void 0;

function _merge() {
  const data = _interopRequireDefault(require("lodash/merge"));

  _merge = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Mock Credential objects for Jester
*/
const today = new Date();
const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
const testSlug = 'testApp';
exports.testSlug = testSlug;
const testExperienceName = `@jester/${testSlug}`;
exports.testExperienceName = testExperienceName;
const testBundleIdentifier = 'test.com.app';
exports.testBundleIdentifier = testBundleIdentifier;
const testAppleTeam = {
  id: 'test-team-id'
};
exports.testAppleTeam = testAppleTeam;
const testProvisioningProfile = {
  provisioningProfileId: 'test-id',
  provisioningProfile: 'test'
};
exports.testProvisioningProfile = testProvisioningProfile;
const testProvisioningProfiles = [testProvisioningProfile];
exports.testProvisioningProfiles = testProvisioningProfiles;
const testProvisioningProfileFromApple = {
  name: 'test-name',
  status: 'Active',
  expires: tomorrow.getTime(),
  distributionMethod: 'test',
  certificates: [],
  provisioningProfileId: testProvisioningProfile.provisioningProfileId,
  provisioningProfile: testProvisioningProfile.provisioningProfile
};
exports.testProvisioningProfileFromApple = testProvisioningProfileFromApple;
const testProvisioningProfilesFromApple = [testProvisioningProfileFromApple];
exports.testProvisioningProfilesFromApple = testProvisioningProfilesFromApple;
const testDistCert = {
  certP12: 'test-p12',
  certPassword: 'test-password',
  distCertSerialNumber: 'test-serial',
  teamId: 'test-team-id'
};
exports.testDistCert = testDistCert;
const testIosDistCredential = {
  id: 1,
  type: 'dist-cert',
  ...testDistCert
};
exports.testIosDistCredential = testIosDistCredential;
const testIosDistCredentials = [testIosDistCredential];
exports.testIosDistCredentials = testIosDistCredentials;
const testDistCertFromApple = {
  id: 'test-id',
  name: 'test-name',
  status: 'Active',
  created: today.getTime(),
  expires: tomorrow.getTime(),
  ownerType: 'test-owner-type',
  ownerName: 'test-owner',
  ownerId: 'test-id',
  serialNumber: testIosDistCredential.distCertSerialNumber
};
exports.testDistCertFromApple = testDistCertFromApple;
const testDistCertsFromApple = [testDistCertFromApple];
exports.testDistCertsFromApple = testDistCertsFromApple;
const testPushKey = {
  apnsKeyP8: 'test-p8',
  apnsKeyId: 'test-key-id',
  teamId: 'test-team-id'
};
exports.testPushKey = testPushKey;
const testIosPushCredential = {
  id: 2,
  type: 'push-key',
  ...testPushKey
};
exports.testIosPushCredential = testIosPushCredential;
const testIosPushCredentials = [testIosPushCredential];
exports.testIosPushCredentials = testIosPushCredentials;
const testPushKeyFromApple = {
  id: testIosPushCredential.apnsKeyId,
  name: 'test-name'
};
exports.testPushKeyFromApple = testPushKeyFromApple;
const testPushKeysFromApple = [testPushKeyFromApple];
exports.testPushKeysFromApple = testPushKeysFromApple;
const testLegacyPushCert = {
  pushId: 'test-push-id',
  pushP12: 'test-push-p12',
  pushPassword: 'test-push-password'
};
exports.testLegacyPushCert = testLegacyPushCert;
const testAppCredential = {
  experienceName: testExperienceName,
  bundleIdentifier: testBundleIdentifier,
  distCredentialsId: testIosDistCredential.id,
  pushCredentialsId: testIosPushCredential.id,
  credentials: { ...testProvisioningProfile
  }
};
exports.testAppCredential = testAppCredential;
const testAppCredentials = [testAppCredential];
exports.testAppCredentials = testAppCredentials;
const testAllCredentials = {
  userCredentials: [...testIosDistCredentials, ...testIosPushCredentials],
  appCredentials: testAppCredentials
};
exports.testAllCredentials = testAllCredentials;
const jester = {
  kind: 'user',
  username: 'jester',
  nickname: 'jester',
  userId: 'jester-id',
  picture: 'jester-pic',
  userMetadata: {
    onboarded: true
  },
  currentConnection: 'Username-Password-Authentication',
  sessionSecret: 'jester-secret'
};
exports.jester = jester;
const jester2 = {
  kind: 'user',
  username: 'jester2',
  nickname: 'jester2',
  userId: 'jester2-id',
  picture: 'jester2-pic',
  userMetadata: {
    onboarded: true
  },
  currentConnection: 'Username-Password-Authentication',
  sessionSecret: 'jester2-secret'
};
exports.jester2 = jester2;

function getApiV2MockCredentials(overridenMock = {}) {
  const defaultCredentialsApiV2Mock = {
    getAsync: jest.fn(() => testAllCredentials)
  };
  return getApiV2Mock((0, _merge().default)(defaultCredentialsApiV2Mock, overridenMock));
}

function getApiV2Mock(overridenMock = {}) {
  const defaultMock = {
    sessionSecret: 'test-session',
    getAsync: jest.fn(),
    postAsync: jest.fn(),
    putAsync: jest.fn(),
    deleteAsync: jest.fn(),
    uploadFormDataAsync: jest.fn(),
    _requestAsync: jest.fn()
  };
  return (0, _merge().default)(defaultMock, overridenMock);
}

const testAppJson = {
  name: 'testing 123',
  version: '0.1.0',
  slug: testSlug,
  sdkVersion: '33.0.0',
  ios: {
    bundleIdentifier: testBundleIdentifier
  }
};
exports.testAppJson = testAppJson;
const testAppJsonWithDifferentOwner = { ...testAppJson,
  owner: jester2.username
};
exports.testAppJsonWithDifferentOwner = testAppJsonWithDifferentOwner;

function getCtxMock(overridenMock = {}) {
  const defaultMock = {
    ios: {
      getDistCert: jest.fn(),
      createDistCert: jest.fn(() => testIosDistCredential),
      useDistCert: jest.fn(),
      getPushKey: jest.fn(),
      createPushKey: jest.fn(() => testIosPushCredential),
      usePushKey: jest.fn(),
      updateProvisioningProfile: jest.fn(),
      getAppCredentials: jest.fn(() => testAppCredentials),
      getProvisioningProfile: jest.fn(),
      credentials: testAllCredentials
    },
    appleCtx: {
      appleId: 'test-id',
      appleIdPassword: 'test-password',
      team: {
        id: 'test-team-id'
      },
      fastlaneSession: 'test-fastlane-session'
    },
    ensureAppleCtx: jest.fn(),
    user: jest.fn(),
    hasAppleCtx: jest.fn(() => true),
    hasProjectContext: true,
    manifest: testAppJson
  };
  return (0, _merge().default)(defaultMock, overridenMock);
}
//# sourceMappingURL=mocks-ios.js.map