{"version":3,"sources":["../../../src/credentials/test-fixtures/mocks-android.ts"],"names":["today","Date","tomorrow","getTime","testSlug","testSlug2","testExperienceName","testJester2ExperienceName","testExperienceName2","testPackageName","testKeystore","keystore","testKeystoreBase64","keystorePassword","keyAlias","keyPassword","testKeystore2","testKeystore2Base64","testPushCredentials","fcmApiKey","testAppCredentials","experienceName","pushCredentials","testJester2AppCredentials","testAllCredentials","jester","kind","username","nickname","userId","picture","userMetadata","onboarded","currentConnection","sessionSecret","jester2","getApiV2MockCredentials","overridenMock","defaultCredentialsApiV2Mock","getAsync","jest","fn","path","match","credentials","getApiV2Mock","defaultMock","postAsync","putAsync","deleteAsync","uploadFormDataAsync","_requestAsync","testAppJson","name","version","slug","sdkVersion","android","package","testAppJsonWithDifferentOwner","owner","getCtxMock","fetchAll","fetchKeystore","updateKeystore","removeKeystore","ensureAppleCtx","user","hasAppleCtx","hasProjectContext","manifest","projectDir"],"mappings":"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","sourcesContent":["import { User } from '@expo/xdl';\nimport merge from 'lodash/merge';\nimport { AndroidCredentials } from '../credentials';\nimport { testKeystore2Base64, testKeystoreBase64 } from './mock-keystore';\n\nconst today = new Date();\nconst tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\nexport const testSlug = 'testApp';\nexport const testSlug2 = 'testApp2';\nexport const testExperienceName = `@jester/${testSlug}`;\nexport const testJester2ExperienceName = `@jester2/${testSlug}`;\nexport const testExperienceName2 = `@jester/${testSlug2}`;\nexport const testPackageName = 'test.com.app';\n\nexport const testKeystore = {\n  keystore: testKeystoreBase64,\n  keystorePassword: 'ae6777e9444a436dbe533d2be46c83ba',\n  keyAlias: 'QHdrb3p5cmEvY3JlZGVudGlhbHMtdGVzdA==',\n  keyPassword: '43f760fe7ecd4e6a925779eb45bc787b',\n};\nexport const testKeystore2 = {\n  keystore: testKeystore2Base64,\n  keystorePassword: '6faeed2326b94effadbeb731510c2378',\n  keyAlias: 'QHdrb3p5cmEvY3JlZGVudGlhbHMtdGVzdA==',\n  keyPassword: 'e4829b38057042d78f25053f390478f9',\n};\n\nexport const testPushCredentials = {\n  fcmApiKey: 'examplefcmapikey',\n};\n\nexport const testAppCredentials = {\n  experienceName: testExperienceName,\n  keystore: testKeystore,\n  pushCredentials: testPushCredentials,\n};\n\nexport const testJester2AppCredentials = {\n  experienceName: testJester2ExperienceName,\n  keystore: testKeystore2,\n  pushCredentials: testPushCredentials,\n};\n\nexport const testAllCredentials: { [key: string]: AndroidCredentials } = {\n  [testExperienceName]: testAppCredentials,\n  [testJester2ExperienceName]: testJester2AppCredentials,\n};\n\nexport const jester: User = {\n  kind: 'user',\n  username: 'jester',\n  nickname: 'jester',\n  userId: 'jester-id',\n  picture: 'jester-pic',\n  userMetadata: { onboarded: true },\n  currentConnection: 'Username-Password-Authentication',\n  sessionSecret: 'jester-secret',\n};\n\nexport const jester2: User = {\n  kind: 'user',\n  username: 'jester2',\n  nickname: 'jester2',\n  userId: 'jester2-id',\n  picture: 'jester2-pic',\n  userMetadata: { onboarded: true },\n  currentConnection: 'Username-Password-Authentication',\n  sessionSecret: 'jester2-secret',\n};\n\nexport function getApiV2MockCredentials(overridenMock: { [key: string]: any } = {}) {\n  const defaultCredentialsApiV2Mock = {\n    getAsync: jest.fn(path => {\n      if (path.match(/^credentials\\/android$/)) {\n        return {\n          credentials: [testAppCredentials],\n        };\n      }\n      const match = path.match(/^credentials\\/android\\/(@[-a-zA-Z0-9]+\\/[-a-zA-Z0-9]+)$/);\n      if (match) {\n        return testAllCredentials[match[1]];\n      }\n      return null;\n    }),\n  };\n  return getApiV2Mock(merge(defaultCredentialsApiV2Mock, overridenMock));\n}\n\nexport function getApiV2Mock(overridenMock: { [key: string]: any } = {}) {\n  const defaultMock = {\n    sessionSecret: 'test-session',\n    getAsync: jest.fn(),\n    postAsync: jest.fn(),\n    putAsync: jest.fn(),\n    deleteAsync: jest.fn(),\n    uploadFormDataAsync: jest.fn(),\n    _requestAsync: jest.fn(),\n  };\n  return merge(defaultMock, overridenMock);\n}\nexport const testAppJson = {\n  name: 'testing 123',\n  version: '0.1.0',\n  slug: testSlug,\n  sdkVersion: '33.0.0',\n  android: { package: testPackageName },\n};\nexport const testAppJsonWithDifferentOwner = {\n  ...testAppJson,\n  owner: jester2.username,\n};\n\nexport function getCtxMock(overridenMock: { [key: string]: any } = {}) {\n  const defaultMock = {\n    android: {\n      fetchAll: jest.fn(),\n      fetchKeystore: jest.fn(() => testKeystore),\n      updateKeystore: jest.fn(),\n      removeKeystore: jest.fn(),\n    },\n    ensureAppleCtx: jest.fn(),\n    user: jest.fn(),\n    hasAppleCtx: jest.fn(() => true),\n    hasProjectContext: true,\n    manifest: testAppJson,\n    projectDir: '.',\n  };\n  return merge(defaultMock, overridenMock);\n}\n"],"file":"mocks-android.js"}