{"version":3,"sources":["../../src/commands/install.ts"],"names":["installAsync","packages","options","projectRoot","info","process","cwd","error","code","log","addNewLineIfNone","message","newLine","chalk","cyan","bold","exit","packageManager","PackageManager","createForProject","npm","yarn","exp","ConfigUtils","getConfig","Versions","gteSdkVersion","sdkVersion","fs","existsSync","path","join","nodeModulesPath","name","bundledNativeModulesPath","projectHasModule","bundledNativeModules","JsonFile","readAsync","nativeModules","others","versionedPackages","map","arg","spec","includes","type","version","modifiedSpec","push","raw","messages","length","addAsync","install","program","command","alias","option","description","asyncAction"],"mappings":"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","sourcesContent":["import * as ConfigUtils from '@expo/config';\nimport fs from 'fs';\nimport JsonFile from '@expo/json-file';\nimport npmPackageArg from 'npm-package-arg';\nimport path from 'path';\nimport { Versions } from '@expo/xdl';\nimport { Command } from 'commander';\nimport * as PackageManager from '@expo/package-manager';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\nimport log from '../log';\n\nasync function installAsync(packages: string[], options: PackageManager.CreateForProjectOptions) {\n  let projectRoot: string;\n  try {\n    const info = await findProjectRootAsync(process.cwd());\n    projectRoot = info.projectRoot;\n  } catch (error) {\n    if (error.code !== 'NO_PROJECT') {\n      // An unknown error occurred.\n      throw error;\n    }\n    // This happens when an app.config exists but a package.json is not present.\n    log.addNewLineIfNone();\n    log.error(error.message);\n    log.newLine();\n    log(log.chalk.cyan(`You can create a new project with ${log.chalk.bold(`expo init`)}`));\n    log.newLine();\n    process.exit(1);\n  }\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log,\n  });\n\n  // This ends up being confusing for people. If they're using expo install,\n  // let's just install the deps such that they work in the client even if\n  // it's a bare project.\n  //\n  // if (workflow === 'bare') {\n  //   return await packageManager.addAsync(...packages);\n  // }\n\n  const { exp } = ConfigUtils.getConfig(projectRoot);\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    log.addNewLineIfNone();\n    log.error(\n      `${log.chalk.bold(\n        `expo install`\n      )} is only available for managed apps using Expo SDK version 33 or higher.`\n    );\n    log.newLine();\n    log(log.chalk.cyan(`Current version: ${log.chalk.bold(exp.sdkVersion)}`));\n    log.newLine();\n    process.exit(1);\n  }\n\n  // This shouldn't be invoked because `findProjectRootAsync` will throw if node_modules are missing.\n  if (!fs.existsSync(path.join(exp.nodeModulesPath || projectRoot, 'node_modules'))) {\n    log.addNewLineIfNone();\n    log(log.chalk.cyan(`node_modules not found, running ${packageManager.name} install command.`));\n    log.newLine();\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModulesPath = ConfigUtils.projectHasModule(\n    'expo/bundledNativeModules.json',\n    projectRoot,\n    exp\n  );\n\n  if (!bundledNativeModulesPath) {\n    log.addNewLineIfNone();\n    log.error(\n      `The dependency map ${log.chalk.bold(\n        `expo/bundledNativeModules.json`\n      )} cannot be found, please ensure you have the package \"${log.chalk\n        .bold`expo`}\" installed in your project.`\n    );\n    log.newLine();\n    process.exit(1);\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(bundledNativeModulesPath);\n\n  const nativeModules = [];\n  const others = [];\n  const versionedPackages = packages.map(arg => {\n    const spec = npmPackageArg(arg);\n    const { name } = spec;\n    if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      const version = bundledNativeModules[name];\n      const modifiedSpec = `${name}@${version}`;\n      nativeModules.push(modifiedSpec);\n      return modifiedSpec;\n    } else {\n      // Other packages are passed through unmodified.\n      others.push(spec.raw);\n      return spec.raw;\n    }\n  });\n  const messages = [];\n  if (nativeModules.length > 0) {\n    messages.push(\n      `${nativeModules.length} SDK ${exp.sdkVersion} compatible native ${\n        nativeModules.length === 1 ? 'module' : 'modules'\n      }`\n    );\n  }\n  if (others.length > 0) {\n    messages.push(`${others.length} other ${others.length === 1 ? 'package' : 'packages'}`);\n  }\n  log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n  await packageManager.addAsync(...versionedPackages);\n}\n\nexport default function install(program: Command) {\n  program\n    .command('install [packages...]')\n    .alias('add')\n    .option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)')\n    .description('Installs a unimodule or other package to a project.')\n    .asyncAction(installAsync);\n}\n"],"file":"install.js"}