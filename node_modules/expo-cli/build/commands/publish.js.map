{"version":3,"sources":["../../src/commands/publish.ts"],"names":["action","projectDir","options","channelRe","RegExp","releaseChannel","test","log","error","process","exit","exp","pkg","skipSDKVersionRequirement","dependencies","warn","chalk","bold","hasOptimized","fs","existsSync","path","join","nonInteractive","parent","target","status","Project","currentStatus","shouldStartOurOwn","packagerInfo","ProjectSettings","readPackagerInfoAsync","runningPackagerTarget","stopAsync","startedOurOwn","startOpts","reset","clear","nonPersistent","maxWorkers","startAsync","quiet","recipient","sendTo","getRecipient","args","sdkVersion","Exp","getPublishInfoAsync","buildStatus","getBuildStatusAsync","platform","current","userHasBuiltExperienceBefore","userHasBuiltAppBefore","duringBuild","isDetached","simpleSpinner","start","result","publishAsync","url","stop","newLine","exampleManifestUrl","getExampleManifestUrl","websiteUrl","replace","sendUrlAsync","includes","program","command","alias","description","option","asyncActionProjectDir"],"mappings":"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","sourcesContent":["import { ProjectTarget, getConfig, getDefaultTarget } from '@expo/config';\nimport simpleSpinner from '@expo/simple-spinner';\nimport { Exp, Project, ProjectSettings } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport path from 'path';\nimport terminalLink from 'terminal-link';\n\nimport { installExitHooks } from '../exit';\nimport log from '../log';\nimport sendTo from '../sendTo';\n\ntype Options = {\n  clear?: boolean;\n  sendTo?: string | boolean;\n  quiet?: boolean;\n  target?: ProjectTarget;\n  releaseChannel?: string;\n  duringBuild?: boolean;\n  maxWorkers?: number;\n  parent?: { nonInteractive: boolean };\n};\n\nexport async function action(projectDir: string, options: Options = {}) {\n  let channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  if (options.releaseChannel && !channelRe.test(options.releaseChannel)) {\n    log.error(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n    process.exit(1);\n  }\n\n  const { exp, pkg } = getConfig(projectDir, {\n    skipSDKVersionRequirement: true,\n  });\n\n  if (pkg.dependencies['expo-updates'] && pkg.dependencies['expokit']) {\n    log.warn(\n      `Warning: You have both the ${chalk.bold('expokit')} and ${chalk.bold(\n        'expo-updates'\n      )} packages installed in package.json.`\n    );\n    log.warn(\n      `These two packages are incompatible and ${chalk.bold(\n        'publishing updates with expo-updates will not work if expokit is installed.'\n      )}`\n    );\n    log.warn(\n      `If you intend to use ${chalk.bold('expo-updates')}, please remove ${chalk.bold(\n        'expokit'\n      )} from your dependencies.`\n    );\n  }\n\n  const hasOptimized = fs.existsSync(path.join(projectDir, '/.expo-shared/assets.json'));\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!hasOptimized && !nonInteractive) {\n    log.warn(\n      'Warning: Your project may contain unoptimized image assets. Smaller image sizes can improve app performance.'\n    );\n    log.warn(\n      `To compress the images in your project, abort publishing and run ${chalk.bold(\n        'npx expo-optimize'\n      )}.`\n    );\n  }\n\n  const target = options.target ?? getDefaultTarget(projectDir);\n\n  const status = await Project.currentStatus(projectDir);\n  let shouldStartOurOwn = false;\n\n  if (status === 'running') {\n    const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    const runningPackagerTarget = packagerInfo.target ?? 'managed';\n    if (target !== runningPackagerTarget) {\n      log(\n        'Found an existing Expo CLI instance running for this project but the target did not match.'\n      );\n      await Project.stopAsync(projectDir);\n      log('Starting a new Expo CLI instance...');\n      shouldStartOurOwn = true;\n    }\n  } else {\n    log('Unable to find an existing Expo CLI instance for this directory; starting a new one...');\n    shouldStartOurOwn = true;\n  }\n\n  let startedOurOwn = false;\n  if (shouldStartOurOwn) {\n    installExitHooks(projectDir);\n\n    const startOpts: Project.StartOptions = {\n      reset: options.clear,\n      nonPersistent: true,\n      target,\n    };\n    if (options.maxWorkers) {\n      startOpts.maxWorkers = options.maxWorkers;\n    }\n\n    await Project.startAsync(projectDir, startOpts, !options.quiet);\n    startedOurOwn = true;\n  }\n\n  let recipient = await sendTo.getRecipient(options.sendTo);\n  log(`Publishing to channel '${options.releaseChannel}'...`);\n\n  const {\n    args: { sdkVersion },\n  } = await Exp.getPublishInfoAsync(projectDir);\n\n  const buildStatus = await Project.getBuildStatusAsync(projectDir, {\n    platform: 'all',\n    current: true,\n    releaseChannel: options.releaseChannel,\n    sdkVersion,\n  });\n\n  if (\n    'userHasBuiltExperienceBefore' in buildStatus &&\n    buildStatus.userHasBuiltExperienceBefore &&\n    !buildStatus.userHasBuiltAppBefore &&\n    !options.duringBuild &&\n    !exp.isDetached\n  ) {\n    log.warn(\n      'We noticed that you have not built a standalone app with this SDK version and release channel before. ' +\n        'Remember that OTA updates will only work for builds with matching SDK versions and release channels. ' +\n        'Read more here: https://docs.expo.io/workflow/publishing/#limitations'\n    );\n  }\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  let result;\n  try {\n    result = await Project.publishAsync(projectDir, {\n      releaseChannel: options.releaseChannel,\n    });\n\n    let url = result.url;\n\n    if (options.quiet) {\n      simpleSpinner.stop();\n    }\n\n    log('Publish complete');\n    log.newLine();\n\n    let exampleManifestUrl = getExampleManifestUrl(url, exp.sdkVersion);\n    if (exampleManifestUrl) {\n      log(\n        `The manifest URL is: ${terminalLink(url, exampleManifestUrl)}. ${terminalLink(\n          'Learn more.',\n          'https://expo.fyi/manifest-url'\n        )}`\n      );\n    } else {\n      log(\n        `The manifest URL is: ${terminalLink(url, url)}. ${terminalLink(\n          'Learn more.',\n          'https://expo.fyi/manifest-url'\n        )}`\n      );\n    }\n\n    if (target === 'managed') {\n      // TODO: replace with websiteUrl from server when it is available, if that makes sense.\n      let websiteUrl = url.replace('exp.host', 'expo.io');\n      log(\n        `The project page is: ${terminalLink(websiteUrl, websiteUrl)}. ${terminalLink(\n          'Learn more.',\n          'https://expo.fyi/project-page'\n        )}`\n      );\n\n      if (recipient) {\n        await sendTo.sendUrlAsync(websiteUrl, recipient);\n      }\n    } else {\n      // This seems pointless in bare?? Leaving it out\n      // if (recipient) {\n      //   await sendTo.sendUrlAsync(url, recipient);\n      // }\n    }\n  } finally {\n    if (startedOurOwn) {\n      await Project.stopAsync(projectDir);\n    }\n  }\n  return result;\n}\n\nfunction getExampleManifestUrl(url: string, sdkVersion: string | undefined): string | null {\n  if (!sdkVersion) {\n    return null;\n  }\n\n  if (url.includes('release-channel') && url.includes('?release-channel')) {\n    return (\n      url.replace('?release-channel', '/index.exp?release-channel') + `&sdkVersion=${sdkVersion}`\n    );\n  } else if (url.includes('?') && !url.includes('release-channel')) {\n    // This is the only relevant url query param we are aware of at the time of\n    // writing this code, so if there is some other param included we don't know\n    // how to deal with it and log nothing.\n    return null;\n  } else {\n    return `${url}/index.exp?sdkVersion=${sdkVersion}`;\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('publish [project-dir]')\n    .alias('p')\n    .description('Publishes your project to exp.host')\n    .option('-q, --quiet', 'Suppress verbose output from the Metro bundler.')\n    .option('-s, --send-to [dest]', 'A phone number or email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this publish is intended. Options are `managed` or `bare`.'\n    )\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option(\n      '--release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .asyncActionProjectDir(action);\n}\n"],"file":"publish.js"}