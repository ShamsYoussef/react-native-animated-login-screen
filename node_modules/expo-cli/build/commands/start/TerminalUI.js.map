{"version":3,"sources":["../../../src/commands/start/TerminalUI.ts"],"names":["CTRL_C","CTRL_D","CTRL_L","bold","b","italic","i","underline","u","chalk","clearConsole","process","stdout","write","platform","printHelp","PLATFORM_TAG","ProjectUtils","getPlatformTag","log","newLine","nested","printUsage","projectDir","options","dev","ProjectSettings","readAsync","openDevToolsAtStartup","UserSettings","getAsync","username","UserManager","getCurrentUsernameAsync","devMode","androidInfo","iosInfo","webInfo","platformInfo","filter","Boolean","join","webOnly","printServerInfo","Webpack","printConnectionInstructions","url","UrlUtils","constructManifestUrlAsync","urlOpts","printQRCode","wrap","columns","wrapItem","item","text","trimStart","startAsync","stdin","startWaitingForCommand","setRawMode","resume","setEncoding","on","handleKeypress","stopWaitingForCommand","removeListener","setInteractiveAuthenticationCallback","key","Android","openWebProjectAsync","Simulator","red","openProjectAsync","lanAddress","hostType","defaultRecipient","rl","readline","createInterface","input","output","chr","name","cleanup","cancel","close","addListener","question","sendTo","trim","sent","Exp","sendAsync","err","setAsync","emit","openAsync","devToolsPort","readPackagerInfoAsync","enabled","projectSettings","minify","reset","Project","authSession","getSessionAsync","logoutAsync","e","error"],"mappings":"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","sourcesContent":["import {\n  Android,\n  Exp,\n  Project,\n  ProjectSettings,\n  ProjectUtils,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport chalk from 'chalk';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport readline from 'readline';\nimport wordwrap from 'wordwrap';\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport log from '../../log';\nimport urlOpts from '../../urlOpts';\nimport { startProjectInEditorAsync } from '../utils/EditorUtils';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst { bold: b, italic: i, underline: u } = chalk;\n\ntype StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\nconst clearConsole = (): void => {\n  process.stdout.write(process.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H');\n};\n\nconst printHelp = (): void => {\n  const PLATFORM_TAG = ProjectUtils.getPlatformTag('Expo');\n  log.newLine();\n  log.nested(`${PLATFORM_TAG} Press ${b('?')} to show a list of all available commands.`);\n};\n\nconst printUsage = async (projectDir: string, options: Pick<StartOptions, 'webOnly'> = {}) => {\n  const { dev } = await ProjectSettings.readAsync(projectDir);\n  const openDevToolsAtStartup = await UserSettings.getAsync('openDevToolsAtStartup', true);\n  const username = await UserManager.getCurrentUsernameAsync();\n  const devMode = dev ? 'development' : 'production';\n  const androidInfo = `${b`a`} to run on ${u`A`}ndroid device/emulator`;\n  const iosInfo = process.platform === 'darwin' ? `${b`i`} to run on ${u`i`}OS simulator` : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  const platformInfo = [androidInfo, iosInfo, webInfo].filter(Boolean).join(', or ');\n  log.nested(`\n \\u203A Press ${platformInfo}.\n \\u203A Press ${b`c`} to show info on ${u`c`}onnecting new devices.\n \\u203A Press ${b`d`} to open DevTools in the default web browser.\n \\u203A Press ${b`shift-d`} to ${\n    openDevToolsAtStartup ? 'disable' : 'enable'\n  } automatically opening ${u`D`}evTools at startup.${\n    options.webOnly ? '' : `\\n \\u203A Press ${b`e`} to send an app link with ${u`e`}mail.`\n  }\n \\u203A Press ${b`p`} to toggle ${u`p`}roduction mode. (current mode: ${i(devMode)})\n \\u203A Press ${b`r`} to ${u`r`}estart bundler, or ${b`shift-r`} to restart and clear cache.\n \\u203A Press ${b`o`} to ${u`o`}pen the project in your editor.\n \\u203A Press ${b`s`} to ${u`s`}ign ${\n    username ? `out. (Signed in as ${i('@' + username)}.)` : 'in.'\n  }\n`);\n};\n\nexport const printServerInfo = async (\n  projectDir: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  if (options.webOnly) {\n    Webpack.printConnectionInstructions(projectDir);\n    printHelp();\n    return;\n  }\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n  const username = await UserManager.getCurrentUsernameAsync();\n  log.newLine();\n  log.nested(`  ${u(url)}`);\n  log.newLine();\n  urlOpts.printQRCode(url);\n  const wrap = wordwrap(2, process.stdout.columns || 80);\n  const wrapItem = wordwrap(4, process.stdout.columns || 80);\n  const item = (text: string): string => '  \\u2022 ' + wrapItem(text).trimStart();\n  const iosInfo = process.platform === 'darwin' ? `, or ${b('i')} for iOS simulator` : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  log.nested(wrap(u('To run the app with live reloading, choose one of:')));\n  if (username) {\n    log.nested(\n      item(\n        `Sign in as ${i(\n          '@' + username\n        )} in Expo client on Android or iOS. Your projects will automatically appear in the \"Projects\" tab.`\n      )\n    );\n  }\n  log.nested(item(`Scan the QR code above with the Expo app (Android) or the Camera app (iOS).`));\n  log.nested(item(`Press ${b`a`} for Android emulator${iosInfo}, or ${webInfo}.`));\n  log.nested(item(`Press ${b`e`} to send a link to your phone with email.`));\n  if (!username) {\n    log.nested(item(`Press ${b`s`} to sign in and enable more options.`));\n  }\n\n  Webpack.printConnectionInstructions(projectDir);\n  printHelp();\n};\n\nexport const startAsync = async (projectDir: string, options: StartOptions) => {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  UserManager.setInteractiveAuthenticationCallback(async () => {\n    stopWaitingForCommand();\n    try {\n      return await loginOrRegisterIfLoggedOutAsync();\n    } finally {\n      startWaitingForCommand();\n    }\n  });\n\n  await printServerInfo(projectDir, options);\n\n  async function handleKeypress(key: string) {\n    if (options.webOnly) {\n      switch (key) {\n        case 'a':\n          clearConsole();\n          log('Trying to open the web project in Chrome on Android...');\n          await Android.openWebProjectAsync(projectDir);\n          printHelp();\n          break;\n        case 'i':\n          clearConsole();\n          log('Trying to open the web project in Safari on the iOS simulator...');\n          await Simulator.openWebProjectAsync(projectDir);\n          printHelp();\n          break;\n        case 'e':\n          log(chalk.red` \\u203A Sending a URL is not supported in web-only mode`);\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'a': {\n          clearConsole();\n          log('Trying to open the project on Android...');\n          await Android.openProjectAsync(projectDir);\n          printHelp();\n          break;\n        }\n        case 'i': {\n          clearConsole();\n          log('Trying to open the project in iOS simulator...');\n          await Simulator.openProjectAsync(projectDir);\n          printHelp();\n          break;\n        }\n        case 'e': {\n          stopWaitingForCommand();\n          const lanAddress = await UrlUtils.constructManifestUrlAsync(projectDir, {\n            hostType: 'lan',\n          });\n          const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          const handleKeypress = (chr: string, key: { name: string }) => {\n            if (key && key.name === 'escape') {\n              cleanup();\n              cancel();\n            }\n          };\n          const cleanup = () => {\n            rl.close();\n            process.stdin.removeListener('keypress', handleKeypress);\n            startWaitingForCommand();\n          };\n          const cancel = async () => {\n            clearConsole();\n            printHelp();\n          };\n          clearConsole();\n          process.stdin.addListener('keypress', handleKeypress);\n          log('Please enter your email address (press ESC to cancel) ');\n          rl.question(\n            defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ',\n            async sendTo => {\n              cleanup();\n              if (!sendTo && defaultRecipient) {\n                sendTo = defaultRecipient;\n              }\n              sendTo = sendTo && sendTo.trim();\n              if (!sendTo) {\n                cancel();\n                return;\n              }\n              log(`Sending ${lanAddress} to ${sendTo}...`);\n\n              let sent = false;\n              try {\n                await Exp.sendAsync(sendTo, lanAddress);\n                sent = true;\n                log(`Sent link successfully.`);\n              } catch (err) {\n                log(`Could not send link. ${err}`);\n              }\n              printHelp();\n              if (sent) {\n                await UserSettings.setAsync('sendTo', sendTo);\n              }\n            }\n          );\n          break;\n        }\n      }\n    }\n\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n        process.emit('SIGINT');\n        break;\n      }\n      case CTRL_L: {\n        clearConsole();\n        break;\n      }\n      case '?': {\n        await printUsage(projectDir, options);\n        break;\n      }\n      case 'w': {\n        clearConsole();\n        log('Attempting to open the project in a web browser...');\n        await Webpack.openAsync(projectDir);\n        await printServerInfo(projectDir, options);\n        break;\n      }\n      case 'c': {\n        clearConsole();\n        await printServerInfo(projectDir, options);\n        break;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n        log('Opening DevTools in the browser...');\n        openBrowser(`http://localhost:${devToolsPort}`);\n        printHelp();\n        break;\n      }\n      case 'D': {\n        clearConsole();\n        const enabled = !(await UserSettings.getAsync('openDevToolsAtStartup', true));\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        log(\n          `Automatically opening DevTools ${b(\n            enabled ? 'enabled' : 'disabled'\n          )}.\\nPress ${b`d`} to open DevTools now.`\n        );\n        printHelp();\n        break;\n      }\n      case 'p': {\n        clearConsole();\n        const projectSettings = await ProjectSettings.readAsync(projectDir);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectDir, { dev, minify: !dev });\n        log(\n          `Metro Bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in the Expo app for the change to take effect.`\n        );\n        printHelp();\n        break;\n      }\n      case 'r':\n      case 'R': {\n        clearConsole();\n        const reset = key === 'R';\n        if (reset) {\n          log('Restarting Metro Bundler and clearing cache...');\n        } else {\n          log('Restarting Metro Bundler...');\n        }\n        Project.startAsync(projectDir, { ...options, reset });\n        break;\n      }\n      case 's': {\n        const authSession = await UserManager.getSessionAsync();\n        if (authSession) {\n          await UserManager.logoutAsync();\n          log('Signed out.');\n        } else {\n          stopWaitingForCommand();\n          try {\n            await loginOrRegisterIfLoggedOutAsync();\n          } catch (e) {\n            log.error(e);\n          } finally {\n            startWaitingForCommand();\n          }\n        }\n        printHelp();\n        break;\n      }\n      case 'o':\n        log('Trying to open the project in your editor...');\n        await startProjectInEditorAsync(projectDir);\n    }\n  }\n};\n"],"file":"TerminalUI.js"}