{"version":3,"sources":["../../../src/commands/fetch/android.ts"],"names":["maybeRenameExistingFile","projectDir","filename","desiredFilePath","path","resolve","fs","pathExists","num","rename","fetchAndroidKeystoreAsync","ctx","Context","init","keystoreFilename","manifest","slug","backupKeystoreOutputPath","experienceName","owner","user","username","DownloadKeystore","outputPath","displayCredentials","fetchAndroidHashesAsync","view","quiet","keystore","android","fetchKeystore","AndroidCredentials","logKeystoreHashes","keystorePath","keystorePassword","keyAlias","keyPassword","log","warn","remove","fetchAndroidUploadCertAsync","uploadKeyFilename","uploadKeyPath","exportCertBase64"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\n\nimport { AndroidCredentials } from '@expo/xdl';\nimport invariant from 'invariant';\nimport { runCredentialsManager } from '../../credentials/route';\nimport { DownloadKeystore } from '../../credentials/views/AndroidKeystore';\nimport { Context } from '../../credentials';\n\nimport log from '../../log';\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  let desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport async function fetchAndroidKeystoreAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n\n  const keystoreFilename = `${ctx.manifest.slug}.jks`;\n  await maybeRenameExistingFile(projectDir, keystoreFilename);\n  const backupKeystoreOutputPath = path.resolve(projectDir, keystoreFilename);\n  const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;\n\n  invariant(ctx.manifest.slug, 'app.json slug field must be set');\n  await runCredentialsManager(\n    ctx,\n    new DownloadKeystore(experienceName, {\n      outputPath: backupKeystoreOutputPath,\n      displayCredentials: true,\n    })\n  );\n}\n\nexport async function fetchAndroidHashesAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n  const outputPath = path.resolve(projectDir, `${ctx.manifest.slug}.tmp.jks`);\n  try {\n    invariant(ctx.manifest.slug, 'app.json slug field must be set');\n    const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      await AndroidCredentials.logKeystoreHashes({\n        keystorePath: outputPath,\n        keystorePassword: keystore.keystorePassword,\n        keyAlias: keystore.keyAlias,\n        keyPassword: keystore.keyPassword,\n      });\n      log(\n        `\\nNote: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.`\n      );\n    } else {\n      log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(outputPath);\n  }\n}\n\nexport async function fetchAndroidUploadCertAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n\n  const keystorePath = path.resolve(projectDir, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFile(projectDir, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectDir, uploadKeyFilename);\n\n  try {\n    invariant(ctx.manifest.slug, 'app.json slug field must be set');\n    const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;\n    const view = new DownloadKeystore(experienceName, {\n      outputPath: keystorePath,\n      quiet: true,\n    });\n    await runCredentialsManager(ctx, view);\n    const keystore = await ctx.android.fetchKeystore(experienceName);\n\n    if (keystore) {\n      log(`Writing upload key to ${uploadKeyPath}`);\n      await AndroidCredentials.exportCertBase64(\n        {\n          keystorePath,\n          keystorePassword: keystore.keystorePassword,\n          keyAlias: keystore.keyAlias,\n        },\n        uploadKeyPath\n      );\n    } else {\n      log.warn('There is no valid Keystore defined for this app');\n    }\n  } finally {\n    await fs.remove(keystorePath);\n  }\n}\n"],"file":"android.js"}