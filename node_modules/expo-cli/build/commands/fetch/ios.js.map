{"version":3,"sources":["../../../src/commands/fetch/ios.ts"],"names":["fetchIosCerts","projectDir","args","remotePackageName","Exp","getPublishInfoAsync","inProjectDir","filename","path","resolve","credentialMetadata","Credentials","getCredentialMetadataAsync","experienceName","creds","getCredentialsForPlatform","Error","certP12","certPassword","certPrivateSigningKey","apnsKeyId","apnsKeyP8","pushP12","pushPassword","pushPrivateSigningKey","provisioningProfile","teamId","undefined","distPath","fs","writeFile","Buffer","from","distPrivateKeyPath","apnsKeyP8Path","pushPath","pushPrivateKeyPath","provisioningProfilePath","chalk","bold","yellow","e"],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport { Credentials, Exp } from '@expo/xdl';\n\nimport log from '../../log';\n\nasync function fetchIosCerts(projectDir: string): Promise<void> {\n  const {\n    args: { remotePackageName },\n  } = await Exp.getPublishInfoAsync(projectDir);\n\n  const inProjectDir = (filename: string): string => path.resolve(projectDir, filename);\n  const credentialMetadata = await Credentials.getCredentialMetadataAsync(projectDir, 'ios');\n\n  log(`Retrieving iOS credentials for ${credentialMetadata.experienceName}`);\n\n  try {\n    const creds = await Credentials.getCredentialsForPlatform(credentialMetadata);\n    if (!creds) throw new Error('Error fetching credentials.');\n\n    const {\n      certP12,\n      certPassword,\n      certPrivateSigningKey,\n      apnsKeyId,\n      apnsKeyP8,\n      pushP12,\n      pushPassword,\n      pushPrivateSigningKey,\n      provisioningProfile,\n      teamId,\n    } = creds;\n\n    if (teamId !== undefined) {\n      log(`These credentials are associated with Apple Team ID: ${teamId}`);\n    }\n    if (certP12) {\n      const distPath = inProjectDir(`${remotePackageName}_dist.p12`);\n      await fs.writeFile(distPath, Buffer.from(certP12, 'base64'));\n    }\n    if (certPrivateSigningKey) {\n      const distPrivateKeyPath = inProjectDir(`${remotePackageName}_dist_cert_private.key`);\n      await fs.writeFile(distPrivateKeyPath, certPrivateSigningKey);\n    }\n    if (certP12 || certPrivateSigningKey) {\n      log('Wrote distribution cert credentials to disk.');\n    }\n    if (apnsKeyP8) {\n      const apnsKeyP8Path = inProjectDir(`${remotePackageName}_apns_key.p8`);\n      await fs.writeFile(apnsKeyP8Path, apnsKeyP8);\n      log('Wrote push key credentials to disk.');\n    }\n    if (pushP12) {\n      const pushPath = inProjectDir(`${remotePackageName}_push.p12`);\n      await fs.writeFile(pushPath, Buffer.from(pushP12, 'base64'));\n    }\n    if (pushPrivateSigningKey) {\n      const pushPrivateKeyPath = inProjectDir(`${remotePackageName}_push_cert_private.key`);\n      await fs.writeFile(pushPrivateKeyPath, pushPrivateSigningKey);\n    }\n    if (pushP12 || pushPrivateSigningKey) {\n      log('Wrote push cert credentials to disk.');\n    }\n    if (provisioningProfile) {\n      const provisioningProfilePath = path.resolve(\n        projectDir,\n        `${remotePackageName}.mobileprovision`\n      );\n      await fs.writeFile(provisioningProfilePath, Buffer.from(provisioningProfile, 'base64'));\n      log('Wrote provisioning profile to disk');\n    }\n    log(`Save these important values as well:\n\nDistribution P12 password: ${\n      certPassword ? chalk.bold(certPassword) : chalk.yellow('(not available)')\n    }\nPush Key ID:               ${apnsKeyId ? chalk.bold(apnsKeyId) : chalk.yellow('(not available)')}\nPush P12 password:         ${\n      pushPassword ? chalk.bold(pushPassword) : chalk.yellow('(not available)')\n    }\n`);\n  } catch (e) {\n    throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n  }\n\n  log('All done!');\n}\n\nexport default fetchIosCerts;\n"],"file":"ios.js"}