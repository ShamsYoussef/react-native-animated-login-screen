"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _configureIOSProjectAsync() {
  const data = _interopRequireDefault(require("./apply/configureIOSProjectAsync"));

  _configureIOSProjectAsync = function () {
    return data;
  };

  return data;
}

function _configureAndroidProjectAsync() {
  const data = _interopRequireDefault(require("./apply/configureAndroidProjectAsync"));

  _configureAndroidProjectAsync = function () {
    return data;
  };

  return data;
}

function _logConfigWarnings() {
  const data = require("./utils/logConfigWarnings");

  _logConfigWarnings = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(program) {
  program.command('apply [project-dir]').option('-p, --platform [platform]', 'Configure only the given platform ("ios" or "android")', /^(android|ios)$/i) // .option('--interactive', 'TODO: provide a flag where people can see a diff for each option to be applied and approve or reject it')
  .description('Take the configuration from app.json or app.config.js and apply it to a native project.').asyncActionProjectDir(async (projectDir, options) => {
    if (!options.platform || options.platform === 'ios') {
      await (0, _configureIOSProjectAsync().default)(projectDir);
      (0, _logConfigWarnings().logConfigWarningsIOS)();
    }

    if (!options.platform || options.platform === 'android') {
      await (0, _configureAndroidProjectAsync().default)(projectDir);
      (0, _logConfigWarnings().logConfigWarningsAndroid)();
    }
  });
}
//# sourceMappingURL=apply.js.map