{"version":3,"sources":["../../../src/commands/build-native/index.ts"],"names":["buildAction","projectDir","platform","Object","values","Platform","includes","Error","ctx","createBuilderContextAsync","builder","Builder","buildArtifactUrl","buildProjectAsync","statusAction","result","getLatestBuildsAsync","builds","user","UserManager","ensureLoggedInAsync","exp","accountName","owner","username","projectName","slug","program","command","description","option","asyncActionProjectDir","checkConfig"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,WAAf,CACEC,UADF,EAEE;AAAEC,EAAAA;AAAF,CAFF,EAGiB;AACf,MAAI,CAACA,QAAD,IAAa,CAACC,MAAM,CAACC,MAAP,CAAcC,sBAAd,EAAwBC,QAAxB,CAAiCJ,QAAjC,CAAlB,EAA8D;AAC5D,UAAM,IAAIK,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAMC,GAAG,GAAG,MAAMC,yBAAyB,CAACR,UAAD,CAA3C;AACA,QAAMS,OAAO,GAAG,KAAIC,kBAAJ,EAAYH,GAAZ,CAAhB;AACA,QAAMI,gBAAgB,GAAG,MAAMF,OAAO,CAACG,iBAAR,CAA0BX,QAA1B,CAA/B;AACA,sBAAK,iBAAgBU,gBAAiB,EAAtC;AACD;;AAED,eAAeE,YAAf,CAA4Bb,UAA5B,EAA+D;AAC7D,QAAMO,GAAG,GAAG,MAAMC,yBAAyB,CAACR,UAAD,CAA3C;AACA,QAAMS,OAAO,GAAG,KAAIC,kBAAJ,EAAYH,GAAZ,CAAhB;AACA,QAAMO,MAAM,GAAG,MAAML,OAAO,CAACM,oBAAR,EAArB;AACA,gCAAgBD,MAAM,CAACE,MAAvB;AACD;;AAED,eAAeR,yBAAf,CAAyCR,UAAzC,EAAsF;AACpF,QAAMiB,IAAU,GAAG,MAAMC,mBAAYC,mBAAZ,EAAzB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAU,yBAAUpB,UAAV,CAAhB;AACA,QAAMqB,WAAW,GAAGD,GAAG,CAACE,KAAJ,IAAaL,IAAI,CAACM,QAAtC;AACA,QAAMC,WAAW,GAAGJ,GAAG,CAACK,IAAxB;AACA,SAAO;AACLzB,IAAAA,UADK;AAELiB,IAAAA,IAFK;AAGLI,IAAAA,WAHK;AAILG,IAAAA,WAJK;AAKLJ,IAAAA;AALK,GAAP;AAOD;;AAEc,kBAAUM,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,qBADX,EAEGC,WAFH,CAGI,6GAHJ,EAKGC,MALH,CAKU,0BALV,EAKsC,yBALtC,EAKiE,kBALjE,EAMGC,qBANH,CAMyB/B,WANzB,EAMsC;AAAEgC,IAAAA,WAAW,EAAE;AAAf,GANtC;AAQAL,EAAAA,OAAO,CACJC,OADH,CACW,cADX,EAEGC,WAFH,CAEgB,uDAFhB,EAGGE,qBAHH,CAGyBjB,YAHzB,EAGuC;AAAEkB,IAAAA,WAAW,EAAE;AAAf,GAHvC;AAID","sourcesContent":["import { Platform } from '@expo/build-tools';\nimport { getConfig } from '@expo/config';\nimport { User, UserManager } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport log from '../../log';\nimport Builder, { BuilderContext } from './Builder';\nimport { printBuildTable } from './utils';\n\nasync function buildAction(\n  projectDir: string,\n  { platform }: { platform: Platform }\n): Promise<void> {\n  if (!platform || !Object.values(Platform).includes(platform)) {\n    throw new Error('Pass valid platform: [android|ios]');\n  }\n  const ctx = await createBuilderContextAsync(projectDir);\n  const builder = new Builder(ctx);\n  const buildArtifactUrl = await builder.buildProjectAsync(platform);\n  log(`Artifact url: ${buildArtifactUrl}`);\n}\n\nasync function statusAction(projectDir: string): Promise<void> {\n  const ctx = await createBuilderContextAsync(projectDir);\n  const builder = new Builder(ctx);\n  const result = await builder.getLatestBuildsAsync();\n  printBuildTable(result.builds);\n}\n\nasync function createBuilderContextAsync(projectDir: string): Promise<BuilderContext> {\n  const user: User = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectDir);\n  const accountName = exp.owner || user.username;\n  const projectName = exp.slug;\n  return {\n    projectDir,\n    user,\n    accountName,\n    projectName,\n    exp,\n  };\n}\n\nexport default function (program: Command) {\n  program\n    .command('build [project-dir]')\n    .description(\n      'Build an app binary for your project, signed and ready for submission to the Google Play Store / App Store.'\n    )\n    .option('-p --platform <platform>', 'Platform: [android|ios]', /^(android|ios)$/i)\n    .asyncActionProjectDir(buildAction, { checkConfig: true });\n\n  program\n    .command('build:status')\n    .description(`Get the status of the latest builds for your project.`)\n    .asyncActionProjectDir(statusAction, { checkConfig: true });\n}\n"],"file":"index.js"}