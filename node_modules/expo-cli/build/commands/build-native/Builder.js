"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _buildTools() {
  const data = require("@expo/build-tools");

  _buildTools = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _uuid() {
  const data = require("uuid");

  _uuid = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _uploads() {
  const data = require("../../uploads");

  _uploads = function () {
    return data;
  };

  return data;
}

function _progress() {
  const data = require("../utils/progress");

  _progress = function () {
    return data;
  };

  return data;
}

function _projects() {
  const data = require("../../projects");

  _projects = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Builder {
  constructor(ctx) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "ctx", void 0);

    this.ctx = ctx;
    this.client = _xdl().ApiV2.clientForUser(ctx.user);
  }

  async buildProjectAsync(platform) {
    const projectId = await (0, _projects().ensureProjectExistsAsync)(this.ctx.user, {
      accountName: this.ctx.accountName,
      projectName: this.ctx.projectName
    });
    return await this.buildAsync(platform, projectId);
  }

  async getLatestBuildsAsync() {
    throw new Error('not implemented yet'); // return await this.client.getAsync('builds');
  }

  async buildAsync(platform, projectId) {
    const tarPath = _path().default.join(_os().default.tmpdir(), `${(0, _uuid().v4)()}.tar.gz`);

    try {
      const fileSize = await (0, _utils().makeProjectTarballAsync)(tarPath);
      (0, _log().default)('Uploading project to AWS S3');
      const archiveUrl = await (0, _uploads().uploadAsync)(_uploads().UploadType.TURTLE_PROJECT_SOURCES, tarPath, (0, _progress().createProgressTracker)(fileSize));
      const job = await (0, _buildTools().prepareJob)(platform, archiveUrl, this.ctx.projectDir);
      const {
        buildId
      } = await this.client.postAsync(`projects/${projectId}/builds`, {
        job: job
      });
      return await (0, _utils().waitForBuildEndAsync)(this.client, projectId, buildId);
    } finally {
      await _fsExtra().default.remove(tarPath);
    }
  }

}

exports.default = Builder;
//# sourceMappingURL=Builder.js.map