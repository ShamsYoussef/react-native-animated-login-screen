{"version":3,"sources":["../../../src/commands/build-native/Builder.ts"],"names":["Builder","constructor","ctx","client","ApiV2","clientForUser","user","buildProjectAsync","platform","projectId","accountName","projectName","buildAsync","getLatestBuildsAsync","Error","tarPath","path","join","os","tmpdir","fileSize","archiveUrl","UploadType","TURTLE_PROJECT_SOURCES","job","projectDir","buildId","postAsync","fs","remove"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AA0Be,MAAMA,OAAN,CAAc;AAI3BC,EAAAA,WAAW,CAACC,GAAD,EAAsB;AAAA;;AAAA;;AAC/B,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcC,aAAMC,aAAN,CAAoBH,GAAG,CAACI,IAAxB,CAAd;AACD;;AAED,QAAMC,iBAAN,CAAwBC,QAAxB,EAA6D;AAC3D,UAAMC,SAAS,GAAG,MAAM,0CAAyB,KAAKP,GAAL,CAASI,IAAlC,EAAwC;AAC9DI,MAAAA,WAAW,EAAE,KAAKR,GAAL,CAASQ,WADwC;AAE9DC,MAAAA,WAAW,EAAE,KAAKT,GAAL,CAASS;AAFwC,KAAxC,CAAxB;AAIA,WAAO,MAAM,KAAKC,UAAL,CAAgBJ,QAAhB,EAA0BC,SAA1B,CAAb;AACD;;AAED,QAAMI,oBAAN,GAAoD;AAClD,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN,CADkD,CAElD;AACD;;AAED,QAAcF,UAAd,CAAyBJ,QAAzB,EAA6CC,SAA7C,EAAiF;AAC/E,UAAMM,OAAO,GAAGC,gBAAKC,IAAL,CAAUC,cAAGC,MAAH,EAAV,EAAwB,GAAE,iBAAS,SAAnC,CAAhB;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAM,sCAAwBL,OAAxB,CAAvB;AAEA,0BAAI,6BAAJ;AACA,YAAMM,UAAU,GAAG,MAAM,4BACvBC,sBAAWC,sBADY,EAEvBR,OAFuB,EAGvB,uCAAsBK,QAAtB,CAHuB,CAAzB;AAMA,YAAMI,GAAG,GAAG,MAAM,8BAAWhB,QAAX,EAAqBa,UAArB,EAAiC,KAAKnB,GAAL,CAASuB,UAA1C,CAAlB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAM,KAAKvB,MAAL,CAAYwB,SAAZ,CAAuB,YAAWlB,SAAU,SAA5C,EAAsD;AAC9Ee,QAAAA,GAAG,EAAEA;AADyE,OAAtD,CAA1B;AAIA,aAAO,MAAM,mCAAqB,KAAKrB,MAA1B,EAAkCM,SAAlC,EAA6CiB,OAA7C,CAAb;AACD,KAhBD,SAgBU;AACR,YAAME,mBAAGC,MAAH,CAAUd,OAAV,CAAN;AACD;AACF;;AA3C0B","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { Platform, prepareJob } from '@expo/build-tools';\nimport { ExpoConfig } from '@expo/config';\nimport { ApiV2, User } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { makeProjectTarballAsync, waitForBuildEndAsync } from './utils';\nimport log from '../../log';\nimport { UploadType, uploadAsync } from '../../uploads';\nimport { createProgressTracker } from '../utils/progress';\nimport { ensureProjectExistsAsync } from '../../projects';\n\nexport interface StatusResult {\n  builds: BuildInfo[];\n}\n\nexport interface BuildInfo {\n  status: string;\n  platform: Platform;\n  createdAt: string;\n  artifacts?: BuildArtifacts;\n}\n\ninterface BuildArtifacts {\n  buildUrl?: string;\n  logsUrl: string;\n}\n\nexport interface BuilderContext {\n  projectDir: string;\n  user: User;\n  accountName: string;\n  projectName: string;\n  exp: ExpoConfig;\n}\n\nexport default class Builder {\n  client: ApiV2;\n  ctx: BuilderContext;\n\n  constructor(ctx: BuilderContext) {\n    this.ctx = ctx;\n    this.client = ApiV2.clientForUser(ctx.user);\n  }\n\n  async buildProjectAsync(platform: Platform): Promise<string> {\n    const projectId = await ensureProjectExistsAsync(this.ctx.user, {\n      accountName: this.ctx.accountName,\n      projectName: this.ctx.projectName,\n    });\n    return await this.buildAsync(platform, projectId);\n  }\n\n  async getLatestBuildsAsync(): Promise<StatusResult> {\n    throw new Error('not implemented yet');\n    // return await this.client.getAsync('builds');\n  }\n\n  private async buildAsync(platform: Platform, projectId: string): Promise<string> {\n    const tarPath = path.join(os.tmpdir(), `${uuidv4()}.tar.gz`);\n    try {\n      const fileSize = await makeProjectTarballAsync(tarPath);\n\n      log('Uploading project to AWS S3');\n      const archiveUrl = await uploadAsync(\n        UploadType.TURTLE_PROJECT_SOURCES,\n        tarPath,\n        createProgressTracker(fileSize)\n      );\n\n      const job = await prepareJob(platform, archiveUrl, this.ctx.projectDir);\n      const { buildId } = await this.client.postAsync(`projects/${projectId}/builds`, {\n        job: job as any,\n      });\n\n      return await waitForBuildEndAsync(this.client, projectId, buildId);\n    } finally {\n      await fs.remove(tarPath);\n    }\n  }\n}\n"],"file":"Builder.js"}