{"version":3,"sources":["../../src/commands/publish-info.ts"],"names":["HORIZ_CELL_WIDTH_SMALL","HORIZ_CELL_WIDTH_BIG","program","command","alias","description","option","parseInt","asyncActionProjectDir","projectDir","options","result","raw","console","log","JSON","stringify","queryResult","length","sampleItem","generalTableString","table","printTableJson","fullName","headers","colWidths","bigCells","Set","forEach","header","has","push","resultRows","map","publication","publishedTime","tableString","printTableJsonArray","Error","checkConfig","publishId","detail"],"mappings":"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","sourcesContent":["import dateFormat from 'dateformat';\n\nimport * as table from './utils/cli-table';\nimport {\n  DetailOptions,\n  HistoryOptions,\n  Publication,\n  getPublicationDetailAsync,\n  getPublishHistoryAsync,\n  printPublicationDetailAsync,\n} from './utils/PublishUtils';\n\nconst HORIZ_CELL_WIDTH_SMALL = 15;\nconst HORIZ_CELL_WIDTH_BIG = 40;\n\nexport default (program: any) => {\n  program\n    .command('publish:history [project-dir]')\n    .alias('ph')\n    .description('View a log of your published releases.')\n    .option(\n      '-c, --release-channel <channel-name>',\n      'Filter by release channel. If this flag is not included, the most recent publications will be shown.'\n    )\n    .option(\n      '-count, --count <number-of-logs>',\n      'Number of logs to view, maximum 100, default 5.',\n      parseInt\n    )\n    .option(\n      '-p, --platform <ios|android>',\n      'Filter by platform, android or ios. Defaults to both platforms.'\n    )\n    .option('-s, --sdk-version <version>', 'Filter by SDK version e.g. 35.0.0')\n    .option('-r, --raw', 'Produce some raw output.')\n    .asyncActionProjectDir(\n      async (projectDir: string, options: HistoryOptions) => {\n        const result = await getPublishHistoryAsync(projectDir, options);\n\n        if (options.raw) {\n          console.log(JSON.stringify(result));\n          return;\n        }\n\n        if (result.queryResult && result.queryResult.length > 0) {\n          // Print general publication info\n          let sampleItem = result.queryResult[0]; // get a sample item\n          let generalTableString = table.printTableJson(\n            {\n              fullName: sampleItem.fullName,\n            },\n            'General Info'\n          );\n          console.log(generalTableString);\n\n          // Print info specific to each publication\n          let headers = [\n            'publishedTime',\n            'appVersion',\n            'sdkVersion',\n            'platform',\n            'channel',\n            'publicationId',\n          ];\n\n          // colWidths contains the cell size of each header\n          let colWidths: number[] = [];\n          let bigCells = new Set(['publicationId', 'publishedTime']);\n          headers.forEach(header => {\n            if (bigCells.has(header)) {\n              colWidths.push(HORIZ_CELL_WIDTH_BIG);\n            } else {\n              colWidths.push(HORIZ_CELL_WIDTH_SMALL);\n            }\n          });\n          const resultRows: Publication[] = result.queryResult.map((publication: Publication) => ({\n            ...publication,\n            publishedTime: dateFormat(publication.publishedTime, 'ddd mmm dd yyyy HH:MM:ss Z'),\n          }));\n          let tableString = table.printTableJsonArray(headers, resultRows, colWidths);\n          console.log(tableString);\n        } else {\n          throw new Error('No records found matching your query.');\n        }\n      },\n      { checkConfig: true }\n    );\n  program\n    .command('publish:details [project-dir]')\n    .alias('pd')\n    .description('View the details of a published release.')\n    .option('--publish-id <publish-id>', 'Publication id. (Required)')\n    .option('-r, --raw', 'Produce some raw output.')\n    .asyncActionProjectDir(\n      async (projectDir: string, options: DetailOptions) => {\n        if (!options.publishId) {\n          throw new Error('--publish-id must be specified.');\n        }\n\n        const detail = await getPublicationDetailAsync(projectDir, options);\n        await printPublicationDetailAsync(detail, options);\n      },\n      { checkConfig: true }\n    );\n};\n"],"file":"publish-info.js"}