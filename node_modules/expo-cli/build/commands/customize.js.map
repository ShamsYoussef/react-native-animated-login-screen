{"version":3,"sources":["../../src/commands/customize.ts"],"names":["maybeWarnToCommitAsync","projectRoot","workingTreeStatus","result","stdout","e","chalk","yellow","dependencyMap","generateFilesAsync","projectDir","staticPath","options","answer","templateFolder","promises","file","Object","keys","includes","projectFilePath","path","resolve","push","fs","copy","require","join","overwrite","recursive","packageManager","PackageManager","createForProject","log","dependency","addDevAsync","fileName","basename","src","dest","pathExists","Error","Promise","all","action","force","exp","ConfigUtils","getConfig","skipSDKVersionRequirement","dirname","files","readdir","filter","item","web","allFiles","map","values","localProjectFile","exists","existsSync","title","value","disabled","description","red","length","bold","type","name","message","hint","warn","limit","instructions","choices","console","program","command","option","allowOffline","asyncAction"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAIA,eAAeA,sBAAf,CAAsCC,WAAtC,EAA2D;AACzD,MAAIC,iBAAiB,GAAG,SAAxB;;AACA,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM,2BAAW,KAAX,EAAkB,CAAC,QAAD,EAAW,aAAX,CAAlB,CAArB;AACAD,IAAAA,iBAAiB,GAAGC,MAAM,CAACC,MAAP,KAAkB,EAAlB,GAAuB,OAAvB,GAAiC,OAArD;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU,CACV;AACA;AACD;;AAED,MAAIH,iBAAiB,KAAK,OAA1B,EAAmC;AACjC,wBACEI,iBAAMC,MAAN,CACE,sFADF,CADF;AAKD;AACF;;AAED,MAAMC,aAA0C,GAAG;AACjD,qBAAmB,CAAC,mBAAD,CAD8B;AAEjD,uBAAqB,CAAC,sBAAD;AAF4B,CAAnD;;AAKA,eAAeC,kBAAf,CAAkC;AAChCC,EAAAA,UADgC;AAEhCC,EAAAA,UAFgC;AAGhCC,EAAAA,OAHgC;AAIhCC,EAAAA,MAJgC;AAKhCC,EAAAA;AALgC,CAAlC,EAYG;AACD,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAK,MAAMC,IAAX,IAAmBH,MAAnB,EAA2B;AACzB,QAAII,MAAM,CAACC,IAAP,CAAYV,aAAZ,EAA2BW,QAA3B,CAAoCH,IAApC,CAAJ,EAA+C;AAC7C,YAAMI,eAAe,GAAGC,gBAAKC,OAAL,CAAaZ,UAAb,EAAyBM,IAAzB,CAAxB,CAD6C,CAE7C;;;AACAD,MAAAA,QAAQ,CAACQ,IAAT,CACEC,mBAAGC,IAAH,CACEC,OAAO,CAACJ,OAAR,CAAgBD,gBAAKM,IAAL,CAAU,+BAAV,EAA2CX,IAA3C,CAAhB,CADF,EAEEI,eAFF,EAGE;AAAEQ,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,SAAS,EAAE;AAA9B,OAHF,CADF;;AAQA,UAAIb,IAAI,IAAIR,aAAZ,EAA2B;AACzB,cAAMsB,cAAc,GAAGC,cAAc,GAACC,gBAAf,CAAgCtB,UAAhC,EAA4C;AAAEuB,UAAAA,GAAG,EAAHA;AAAF,SAA5C,CAAvB;;AACA,aAAK,MAAMC,UAAX,IAAyB1B,aAAa,CAACQ,IAAD,CAAtC,EAA8C;AAC5CD,UAAAA,QAAQ,CAACQ,IAAT,CAAcO,cAAc,CAACK,WAAf,CAA2BD,UAA3B,CAAd;AACD;AACF;AACF,KAjBD,MAiBO;AACL,YAAME,QAAQ,GAAGf,gBAAKgB,QAAL,CAAcrB,IAAd,CAAjB;;AACA,YAAMsB,GAAG,GAAGjB,gBAAKC,OAAL,CAAaR,cAAb,EAA6BsB,QAA7B,CAAZ;;AACA,YAAMG,IAAI,GAAGlB,gBAAKC,OAAL,CAAaZ,UAAb,EAAyBC,UAAzB,EAAqCyB,QAArC,CAAb;;AACA,UAAI,MAAMZ,mBAAGgB,UAAH,CAAcF,GAAd,CAAV,EAA8B;AAC5BvB,QAAAA,QAAQ,CAACQ,IAAT,CAAcC,mBAAGC,IAAH,CAAQa,GAAR,EAAaC,IAAb,EAAmB;AAAEX,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,SAAS,EAAE;AAA9B,SAAnB,CAAd;AACD,OAFD,MAEO;AACL,cAAM,IAAIY,KAAJ,CAAW,8BAA6BL,QAAS,2BAA0BE,GAAI,EAA/E,CAAN;AACD;AACF;AACF;;AACD,QAAMI,OAAO,CAACC,GAAR,CAAY5B,QAAZ,CAAN;AACD;;AAEM,eAAe6B,MAAf,CAAsBlC,UAAkB,GAAG,IAA3C,EAAiDE,OAAgB,GAAG;AAAEiC,EAAAA,KAAK,EAAE;AAAT,CAApE,EAAsF;AAC3F;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUC,WAAW,GAACC,SAAZ,CAAsBtC,UAAtB,EAAkC;AAChDuC,IAAAA,yBAAyB,EAAE;AADqB,GAAlC,CAAhB;;AAIA,QAAMnC,cAAc,GAAGO,gBAAK6B,OAAL,CACrBxB,OAAO,CAACJ,OAAR,CAAgB,6CAAhB,CADqB,CAAvB;;AAIA,QAAM6B,KAAK,GAAG,CAAC,MAAM3B,mBAAG4B,OAAH,CAAWtC,cAAX,CAAP,EAAmCuC,MAAnC,CAA0CC,IAAI,IAAIA,IAAI,KAAK,UAA3D,CAAd;AACA,QAAM;AAAEC,IAAAA,GAAG,EAAE;AAAE5C,MAAAA,UAAU,GAAG;AAAf,QAAyB;AAAhC,MAAuCmC,GAA7C;AAEA,QAAMU,QAAQ,GAAG,CACf,GAAGvC,MAAM,CAACC,IAAP,CAAYV,aAAZ,CADY,EAEf,GAAG2C,KAAK,CAACM,GAAN,CAAUzC,IAAI,IAAIK,gBAAKM,IAAL,CAAUhB,UAAV,EAAsBK,IAAtB,CAAlB,CAFY,CAAjB;AAIA,MAAI0C,MAAM,GAAG,EAAb;;AAEA,OAAK,MAAM1C,IAAX,IAAmBwC,QAAnB,EAA6B;AAC3B,UAAMG,gBAAgB,GAAGtC,gBAAKC,OAAL,CAAaZ,UAAb,EAAyBM,IAAzB,CAAzB;;AACA,UAAM4C,MAAM,GAAGpC,mBAAGqC,UAAH,CAAcF,gBAAd,CAAf;;AAEAD,IAAAA,MAAM,CAACnC,IAAP,CAAY;AACVuC,MAAAA,KAAK,EAAE9C,IADG;AAEV+C,MAAAA,KAAK,EAAE/C,IAFG;AAGV;AACAgD,MAAAA,QAAQ,EAAE,CAACpD,OAAO,CAACiC,KAAT,IAAkBe,MAJlB;AAKVK,MAAAA,WAAW,EACTrD,OAAO,CAACiC,KAAR,IAAiBe,MAAjB,GAA0BtD,iBAAM4D,GAAN,CAAU,uCAAV,CAA1B,GAA+E;AANvE,KAAZ;AAQD;;AAED,MAAI,CAACR,MAAM,CAACL,MAAP,CAAc,CAAC;AAAEW,IAAAA;AAAF,GAAD,KAAkB,CAACA,QAAjC,EAA2CG,MAAhD,EAAwD;AACtD,wBACE7D,iBAAMC,MAAN,CAAa,8CAAb,IACE,gCADF,GAEED,iBAAM8D,IAAN,CAAW,+BAAX,CAHJ;AAKA;AACD;;AAED,QAAMpE,sBAAsB,CAACU,UAAD,CAA5B;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAa,MAAM,wBAAQ;AAC/BwD,IAAAA,IAAI,EAAE,aADyB;AAE/BC,IAAAA,IAAI,EAAE,QAFyB;AAG/BC,IAAAA,OAAO,EAAE,yCAHsB;AAI/BC,IAAAA,IAAI,EAAE,qCAJyB;AAK/B;AACAC,IAAAA,IAAI,EAAE,2CANyB;AAO/BC,IAAAA,KAAK,EAAEhB,MAAM,CAACS,MAPiB;AAQ/BQ,IAAAA,YAAY,EAAE,EARiB;AAS/BC,IAAAA,OAAO,EAAElB;AATsB,GAAR,CAAzB;;AAWA,MAAI,CAAC7C,MAAL,EAAa;AACXgE,IAAAA,OAAO,CAAC5C,GAAR,CAAY,uBAAZ;AACA;AACD;;AACD,QAAMxB,kBAAkB,CAAC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,OAA1B;AAAmCC,IAAAA,MAAnC;AAA2CC,IAAAA;AAA3C,GAAD,CAAxB;AACD;;AAEc,kBAAUgE,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,6BADX,EAEGd,WAFH,CAEe,8CAFf,EAGGe,MAHH,CAGU,aAHV,EAGyB,iCAHzB,EAIGC,YAJH,GAKGC,WALH,CAKetC,MALf;AAMD","sourcesContent":["import * as ConfigUtils from '@expo/config';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport prompts from 'prompts';\n\nimport * as PackageManager from '@expo/package-manager';\nimport log from '../log';\n\ntype Options = { force: boolean };\n\nasync function maybeWarnToCommitAsync(projectRoot: string) {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch (e) {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'dirty') {\n    log(\n      chalk.yellow(\n        'You should commit your changes before generating code into the root of your project.'\n      )\n    );\n  }\n}\n\nconst dependencyMap: { [key: string]: string[] } = {\n  'babel.config.js': ['babel-preset-expo'],\n  'webpack.config.js': ['@expo/webpack-config'],\n};\n\nasync function generateFilesAsync({\n  projectDir,\n  staticPath,\n  options,\n  answer,\n  templateFolder,\n}: {\n  projectDir: string;\n  staticPath: string;\n  options: Options;\n  answer: string[];\n  templateFolder: string;\n}) {\n  let promises = [];\n\n  for (const file of answer) {\n    if (Object.keys(dependencyMap).includes(file)) {\n      const projectFilePath = path.resolve(projectDir, file);\n      // copy the file from template\n      promises.push(\n        fs.copy(\n          require.resolve(path.join('@expo/webpack-config/template', file)),\n          projectFilePath,\n          { overwrite: true, recursive: true }\n        )\n      );\n\n      if (file in dependencyMap) {\n        const packageManager = PackageManager.createForProject(projectDir, { log });\n        for (const dependency of dependencyMap[file]) {\n          promises.push(packageManager.addDevAsync(dependency));\n        }\n      }\n    } else {\n      const fileName = path.basename(file);\n      const src = path.resolve(templateFolder, fileName);\n      const dest = path.resolve(projectDir, staticPath, fileName);\n      if (await fs.pathExists(src)) {\n        promises.push(fs.copy(src, dest, { overwrite: true, recursive: true }));\n      } else {\n        throw new Error(`Expected template file for ${fileName} doesn't exist at path: ${src}`);\n      }\n    }\n  }\n  await Promise.all(promises);\n}\n\nexport async function action(projectDir: string = './', options: Options = { force: false }) {\n  // Get the static path (defaults to 'web/')\n  // Doesn't matter if expo is installed or which mode is used.\n  const { exp } = ConfigUtils.getConfig(projectDir, {\n    skipSDKVersionRequirement: true,\n  });\n\n  const templateFolder = path.dirname(\n    require.resolve('@expo/webpack-config/web-default/index.html')\n  );\n\n  const files = (await fs.readdir(templateFolder)).filter(item => item !== 'icon.png');\n  const { web: { staticPath = 'web' } = {} } = exp;\n\n  const allFiles = [\n    ...Object.keys(dependencyMap),\n    ...files.map(file => path.join(staticPath, file)),\n  ];\n  let values = [];\n\n  for (const file of allFiles) {\n    const localProjectFile = path.resolve(projectDir, file);\n    const exists = fs.existsSync(localProjectFile);\n\n    values.push({\n      title: file,\n      value: file,\n      // @ts-ignore: broken types\n      disabled: !options.force && exists,\n      description:\n        options.force && exists ? chalk.red('This will overwrite the existing file') : '',\n    });\n  }\n\n  if (!values.filter(({ disabled }) => !disabled).length) {\n    log(\n      chalk.yellow('\\nAll of the custom web files already exist.') +\n        '\\nTo regenerate the files run:' +\n        chalk.bold(' expo customize:web --force\\n')\n    );\n    return;\n  }\n\n  await maybeWarnToCommitAsync(projectDir);\n\n  const { answer } = await prompts({\n    type: 'multiselect',\n    name: 'answer',\n    message: 'Which files would you like to generate?',\n    hint: '- Space to select. Return to submit',\n    // @ts-ignore: broken types\n    warn: 'File exists, use --force to overwrite it.',\n    limit: values.length,\n    instructions: '',\n    choices: values,\n  });\n  if (!answer) {\n    console.log('\\n\\u203A Exiting...\\n');\n    return;\n  }\n  await generateFilesAsync({ projectDir, staticPath, options, answer, templateFolder });\n}\n\nexport default function (program: Command) {\n  program\n    .command('customize:web [project-dir]')\n    .description('Generate static web files into your project.')\n    .option('-f, --force', 'Allows replacing existing files')\n    .allowOffline()\n    .asyncAction(action);\n}\n"],"file":"customize.js"}