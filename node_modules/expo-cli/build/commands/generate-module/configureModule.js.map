{"version":3,"sources":["../../../src/commands/generate-module/configureModule.ts"],"names":["asyncForEach","array","callback","index","length","removeFiles","directoryPath","filenames","filename","fse","remove","path","resolve","renameFilesWithExtensions","extensions","renamings","from","to","extension","fromFilename","existsSync","join","toFilename","rename","replaceContents","replaceFunction","file","nodir","replaceContent","filePath","content","readFile","newContent","writeFile","removeUponEmptyOrOnlyEmptySubdirs","dirPath","contents","readdir","results","Promise","all","map","fileStats","lstat","isDirectory","isRemovable","reduce","acc","current","configureIOS","modulePath","podName","jsPackageName","viewManager","iosPath","singleFileContent","replace","configureAndroid","javaPackage","androidPath","sourceFilesPath","destinationFilesPath","split","packageContent","mkdirp","copy","moduleName","startsWith","substring","gradleContent","configureTS","moduleNameWithoutExpoPrefix","substr","tsPath","fileContent","configureNPM","npmModuleName","readmeContent","configureModule","newModulePath","configuration"],"mappings":"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","sourcesContent":["import fse from 'fs-extra';\nimport path from 'path';\nimport walkSync from 'klaw-sync';\nimport { ModuleConfiguration } from './ModuleConfiguration';\n\nconst asyncForEach = async <T>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<void>\n) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\n\nasync function removeFiles(directoryPath: string, filenames: string[]) {\n  await asyncForEach(\n    filenames,\n    async filename => await fse.remove(path.resolve(directoryPath, filename))\n  );\n}\n\n/**\n * Renames files names\n * @param directoryPath - directory that holds files to be renamed\n * @param extensions - array of extensions for files that would be renamed, must be provided with leading dot or empty for no extension, e.g. ['.html', '']\n * @param renamings - array of filenames and their replacers\n */\nconst renameFilesWithExtensions = async (\n  directoryPath: string,\n  extensions: string[],\n  renamings: { from: string; to: string }[]\n) => {\n  await asyncForEach(\n    renamings,\n    async ({ from, to }) =>\n      await asyncForEach(extensions, async extension => {\n        const fromFilename = `${from}${extension}`;\n        if (!fse.existsSync(path.join(directoryPath, fromFilename))) {\n          return;\n        }\n        const toFilename = `${to}${extension}`;\n        await fse.rename(\n          path.join(directoryPath, fromFilename),\n          path.join(directoryPath, toFilename)\n        );\n      })\n  );\n};\n\n/**\n * Enters each file recursively in provided dir and replaces content by invoking provided callback function\n * @param directoryPath - root directory\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContents = async (\n  directoryPath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  for (let file of walkSync(directoryPath, { nodir: true })) {\n    replaceContent(file.path, replaceFunction);\n  }\n};\n\n/**\n * Replaces content in file\n * @param filePath - provided file\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContent = async (\n  filePath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  const content = await fse.readFile(filePath, 'utf8');\n  const newContent = replaceFunction(content);\n  if (newContent !== content) {\n    await fse.writeFile(filePath, newContent);\n  }\n};\n\n/**\n * Removes all empty subdirs up to and including dirPath\n * Recursively enters all subdirs and removes them if one is empty or cantained only empty subdirs\n * @param dirPath - directory path that is being inspected\n * @returns whether the given base directory and any empty subdirectories were deleted or not\n */\nconst removeUponEmptyOrOnlyEmptySubdirs = async (dirPath: string): Promise<boolean> => {\n  const contents = await fse.readdir(dirPath);\n  const results = await Promise.all(\n    contents.map(async file => {\n      const filePath = path.join(dirPath, file);\n      const fileStats = await fse.lstat(filePath);\n      return fileStats.isDirectory() && (await removeUponEmptyOrOnlyEmptySubdirs(filePath));\n    })\n  );\n  const isRemovable = results.reduce((acc, current) => acc && current, true);\n  if (isRemovable) {\n    await fse.remove(dirPath);\n  }\n  return isRemovable;\n};\n\n/**\n * Prepares iOS part, mainly by renaming all files and some template word in files\n * Versioning is done automatically based on package.json from JS/TS part\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureIOS(\n  modulePath: string,\n  { podName, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const iosPath = path.join(modulePath, 'ios');\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    await removeFiles(path.join(iosPath, 'EXModuleTemplate'), [\n      `EXModuleTemplateView.h`,\n      `EXModuleTemplateView.m`,\n      `EXModuleTemplateViewManager.h`,\n      `EXModuleTemplateViewManager.m`,\n    ]);\n  }\n\n  await renameFilesWithExtensions(\n    path.join(iosPath, 'EXModuleTemplate'),\n    ['.h', '.m'],\n    [\n      { from: 'EXModuleTemplateModule', to: `${podName}Module` },\n      {\n        from: 'EXModuleTemplateView',\n        to: `${podName}View`,\n      },\n      {\n        from: 'EXModuleTemplateViewManager',\n        to: `${podName}ViewManager`,\n      },\n    ]\n  );\n  await renameFilesWithExtensions(\n    iosPath,\n    ['', '.podspec'],\n    [{ from: 'EXModuleTemplate', to: `${podName}` }]\n  );\n  await replaceContents(iosPath, singleFileContent =>\n    singleFileContent\n      .replace(/EXModuleTemplate/g, podName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n}\n\n/**\n * Prepares Android part, mainly by renaming all files and template words in files\n * Sets all versions in Gradle to 1.0.0\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureAndroid(\n  modulePath: string,\n  { javaPackage, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const androidPath = path.join(modulePath, 'android');\n  const sourceFilesPath = path.join(\n    androidPath,\n    'src',\n    'main',\n    'kotlin',\n    'expo',\n    'modules',\n    'template'\n  );\n  const destinationFilesPath = path.join(\n    androidPath,\n    'src',\n    'main',\n    'kotlin',\n    ...javaPackage.split('.')\n  );\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    removeFiles(sourceFilesPath, [`ModuleTemplateView.kt`, `ModuleTemplateViewManager.kt`]);\n\n    replaceContent(path.join(sourceFilesPath, 'ModuleTemplatePackage.kt'), packageContent =>\n      packageContent\n        .replace(/(^\\s+)+(^.*?){1}createViewManagers[\\s\\W\\w]+?\\}/m, '')\n        .replace(/^.*ViewManager$/, '')\n    );\n  }\n\n  await fse.mkdirp(destinationFilesPath);\n  await fse.copy(sourceFilesPath, destinationFilesPath);\n\n  // Remove leaf directory content\n  await fse.remove(sourceFilesPath);\n  // Cleanup all empty subdirs up to provided rootDir\n  await removeUponEmptyOrOnlyEmptySubdirs(path.join(androidPath, 'src', 'main', 'kotlin', 'expo'));\n\n  const moduleName = jsPackageName.startsWith('Expo') ? jsPackageName.substring(4) : jsPackageName;\n  await replaceContents(androidPath, singleFileContent =>\n    singleFileContent\n      .replace(/expo\\.modules\\.template/g, javaPackage)\n      .replace(/ModuleTemplate/g, moduleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n  await replaceContent(path.join(androidPath, 'build.gradle'), gradleContent =>\n    gradleContent\n      .replace(/\\bversion = ['\"][\\w.-]+['\"]/, \"version = '1.0.0'\")\n      .replace(/versionCode \\d+/, 'versionCode 1')\n      .replace(/versionName ['\"][\\w.-]+['\"]/, \"versionName '1.0.0'\")\n  );\n  await renameFilesWithExtensions(\n    destinationFilesPath,\n    ['.kt'],\n    [\n      { from: 'ModuleTemplateModule', to: `${moduleName}Module` },\n      { from: 'ModuleTemplatePackage', to: `${moduleName}Package` },\n      { from: 'ModuleTemplateView', to: `${moduleName}View` },\n      { from: 'ModuleTemplateViewManager', to: `${moduleName}ViewManager` },\n    ]\n  );\n}\n\n/**\n * Prepares TS part.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureTS(\n  modulePath: string,\n  { jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const moduleNameWithoutExpoPrefix = jsPackageName.startsWith('Expo')\n    ? jsPackageName.substr(4)\n    : 'Unimodule';\n  const tsPath = path.join(modulePath, 'src');\n\n  // remove View Manager from template\n  if (!viewManager) {\n    await removeFiles(path.join(tsPath), [\n      'ExpoModuleTemplateView.tsx',\n      'ExpoModuleTemplateNativeView.ts',\n      'ExpoModuleTemplateNativeView.web.tsx',\n    ]);\n    await replaceContent(path.join(tsPath, 'ModuleTemplate.ts'), fileContent =>\n      fileContent.replace(/(^\\s+)+(^.*?){1}ExpoModuleTemplateView.*$/m, '')\n    );\n  }\n\n  await renameFilesWithExtensions(\n    path.join(tsPath, '__tests__'),\n    ['.ts'],\n    [{ from: 'ModuleTemplate-test', to: `${moduleNameWithoutExpoPrefix}-test` }]\n  );\n  await renameFilesWithExtensions(\n    tsPath,\n    ['.tsx', '.ts'],\n    [\n      { from: 'ExpoModuleTemplateView', to: `${jsPackageName}View` },\n      { from: 'ExpoModuleTemplateNativeView', to: `${jsPackageName}NativeView` },\n      { from: 'ExpoModuleTemplateNativeView.web', to: `${jsPackageName}NativeView.web` },\n      { from: 'ExpoModuleTemplate', to: jsPackageName },\n      { from: 'ExpoModuleTemplate.web', to: `${jsPackageName}.web` },\n      { from: 'ModuleTemplate', to: moduleNameWithoutExpoPrefix },\n      { from: 'ModuleTemplate.types', to: `${moduleNameWithoutExpoPrefix}.types` },\n    ]\n  );\n\n  await replaceContents(tsPath, singleFileContent =>\n    singleFileContent\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/ModuleTemplate/g, moduleNameWithoutExpoPrefix)\n  );\n}\n\n/**\n * Prepares files for npm (package.json and README.md).\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureNPM(\n  modulePath: string,\n  { npmModuleName, podName, jsPackageName }: ModuleConfiguration\n) {\n  const moduleNameWithoutExpoPrefix = jsPackageName.startsWith('Expo')\n    ? jsPackageName.substr(4)\n    : 'Unimodule';\n  await replaceContent(path.join(modulePath, 'package.json'), singleFileContent =>\n    singleFileContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/\"version\": \"[\\w.-]+\"/, '\"version\": \"1.0.0\"')\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/ModuleTemplate/g, moduleNameWithoutExpoPrefix)\n  );\n  await replaceContent(path.join(modulePath, 'README.md'), readmeContent =>\n    readmeContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/EXModuleTemplate/g, podName)\n  );\n}\n\n/**\n * Configures TS, Android and iOS parts of generated module mostly by applying provided renamings.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nexport default async function configureModule(\n  newModulePath: string,\n  configuration: ModuleConfiguration\n) {\n  await configureNPM(newModulePath, configuration);\n  await configureTS(newModulePath, configuration);\n  await configureAndroid(newModulePath, configuration);\n  await configureIOS(newModulePath, configuration);\n}\n"],"file":"configureModule.js"}