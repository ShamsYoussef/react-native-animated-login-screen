{"version":3,"sources":["../../../src/commands/generate-module/promptQuestionsAsync.ts"],"names":["generateCocoaPodDefaultName","moduleName","wordsToUpperCase","s","toLowerCase","split","map","charAt","toUpperCase","substring","join","startsWith","generateJavaModuleDefaultName","wordsToJavaModule","generateInCodeModuleDefaultName","generateQuestions","suggestedModuleName","name","message","default","validate","answer","length","test","npmModuleName","type","promptQuestionsAsync"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAGA;;;;;AAKA,MAAMA,2BAA2B,GAAIC,UAAD,IAAwB;AAC1D,QAAMC,gBAAgB,GAAIC,CAAD,IACvBA,CAAC,CACEC,WADH,GAEGC,KAFH,CAES,GAFT,EAGGC,GAHH,CAGOH,CAAC,IAAIA,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BL,CAAC,CAACM,SAAF,CAAY,CAAZ,CAHxC,EAIGC,IAJH,CAIQ,EAJR,CADF;;AAOA,MAAIT,UAAU,CAACG,WAAX,GAAyBO,UAAzB,CAAoC,MAApC,CAAJ,EAAiD;AAC/C,WAAQ,KAAIT,gBAAgB,CAACD,UAAU,CAACQ,SAAX,CAAqB,CAArB,CAAD,CAA0B,EAAtD;AACD;;AACD,SAAOP,gBAAgB,CAACD,UAAD,CAAvB;AACD,CAZD;AAcA;;;;;;AAIA,MAAMW,6BAA6B,GAAIX,UAAD,IAAwB;AAC5D,QAAMY,iBAAiB,GAAIV,CAAD,IAAeA,CAAC,CAACC,WAAF,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2BK,IAA3B,CAAgC,EAAhC,CAAzC;;AAEA,MAAIT,UAAU,CAACG,WAAX,GAAyBO,UAAzB,CAAoC,MAApC,CAAJ,EAAiD;AAC/C,WAAQ,gBAAeE,iBAAiB,CAACZ,UAAU,CAACQ,SAAX,CAAqB,CAArB,CAAD,CAA0B,EAAlE;AACD;;AACD,SAAOI,iBAAiB,CAACZ,UAAD,CAAxB;AACD,CAPD;AASA;;;;;;AAIA,MAAMa,+BAA+B,GAAIb,UAAD,IAAwB;AAC9D,SAAOA,UAAU,CACdG,WADI,GAEJC,KAFI,CAEE,GAFF,EAGJC,GAHI,CAGAH,CAAC,IAAIA,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BL,CAAC,CAACM,SAAF,CAAY,CAAZ,CAHjC,EAIJC,IAJI,CAIC,EAJD,CAAP;AAKD,CAND;AAQA;;;;;AAGA,MAAMK,iBAAiB,GAAIC,mBAAD,IAA6C,CACrE;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE,qEAFX;AAGEC,EAAAA,OAAO,EAAEH,mBAHX;AAIEI,EAAAA,QAAQ,EAAGC,MAAD,IAAoB;AAC5B,WAAO,CAACA,MAAM,CAACC,MAAR,GACH,6BADG,GAEH,QAAQC,IAAR,CAAaF,MAAb,IACA,sDADA,GAEA,KAAKE,IAAL,CAAUF,MAAV,IACA,4CADA,GAEA,IANJ;AAOD;AAZH,CADqE,EAerE;AACEJ,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,OAAO,EAAE,qEAFX;AAGEC,EAAAA,OAAO,EAAE,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAuBxB,2BAA2B,CAACwB,aAAD,CAH7D;AAIEJ,EAAAA,QAAQ,EAAGC,MAAD,IACR,CAACA,MAAM,CAACC,MAAR,GACI,+BADJ,GAEI,KAAKC,IAAL,CAAUF,MAAV,IACA,8CADA,GAEA;AATR,CAfqE,EA0BrE;AACEJ,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,OAAO,EAAE,2EAFX;AAGEC,EAAAA,OAAO,EAAE,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAuBZ,6BAA6B,CAACY,aAAD,CAH/D;AAIEJ,EAAAA,QAAQ,EAAGC,MAAD,IACR,CAACA,MAAM,CAACC,MAAR,GACI,mCADJ,GAEI,KAAKC,IAAL,CAAUF,MAAV,IACA,kDADA,GAEA;AATR,CA1BqE,EAqCrE;AACEJ,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,OAAO,EAAE,4EAFX;AAGEC,EAAAA,OAAO,EAAE,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAuBV,+BAA+B,CAACU,aAAD,CAHjE;AAIEJ,EAAAA,QAAQ,EAAGC,MAAD,IACR,CAACA,MAAM,CAACC,MAAR,GACI,6BADJ,GAEI,KAAKC,IAAL,CAAUF,MAAV,IACA,4CADA,GAEA;AATR,CArCqE,EAgDrE;AACEJ,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,OAAO,EAAE,+CAFX;AAGEC,EAAAA,OAAO,EAAE,KAHX;AAIEM,EAAAA,IAAI,EAAE;AAJR,CAhDqE,CAAvE;AAwDA;;;;;;AAIe,eAAeC,oBAAf,CACbV,mBADa,EAEiB;AAC9B,SAAQ,MAAM,uBAAOD,iBAAiB,CAACC,mBAAD,CAAxB,CAAd;AACD","sourcesContent":["import prompt, { Question } from '../../prompt';\nimport { ModuleConfiguration } from './ModuleConfiguration';\n\n/**\n * Generates CocoaPod name in format `Namepart1Namepart2Namepart3`.\n * For these with `expo` as `partname1` would generate `EXNamepart2...`.\n * @param {string} moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateCocoaPodDefaultName = (moduleName: string) => {\n  const wordsToUpperCase = (s: string) =>\n    s\n      .toLowerCase()\n      .split('-')\n      .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n      .join('');\n\n  if (moduleName.toLowerCase().startsWith('expo')) {\n    return `EX${wordsToUpperCase(moduleName.substring(4))}`;\n  }\n  return wordsToUpperCase(moduleName);\n};\n\n/**\n * Generates java package name in format `namepart1.namepart2.namepart3`.\n * @param moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateJavaModuleDefaultName = (moduleName: string) => {\n  const wordsToJavaModule = (s: string) => s.toLowerCase().split('-').join('');\n\n  if (moduleName.toLowerCase().startsWith('expo')) {\n    return `expo.modules.${wordsToJavaModule(moduleName.substring(4))}`;\n  }\n  return wordsToJavaModule(moduleName);\n};\n\n/**\n * Generates JS/TS module name in format `Namepart1Namepart2Namepart3`.\n * @param moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`\n */\nconst generateInCodeModuleDefaultName = (moduleName: string) => {\n  return moduleName\n    .toLowerCase()\n    .split('-')\n    .map(s => s.charAt(0).toUpperCase() + s.substring(1))\n    .join('');\n};\n\n/**\n * Generates questions\n */\nconst generateQuestions = (suggestedModuleName: string): Question[] => [\n  {\n    name: 'npmModuleName',\n    message: 'How would you like to call your module in JS/npm? (eg. expo-camera)',\n    default: suggestedModuleName,\n    validate: (answer: string) => {\n      return !answer.length\n        ? 'Module name cannot be empty'\n        : /[A-Z]/.test(answer)\n        ? 'Module name cannot contain any upper case characters'\n        : /\\s/.test(answer)\n        ? 'Module name cannot contain any whitespaces'\n        : true;\n    },\n  },\n  {\n    name: 'podName',\n    message: 'How would you like to call your module in CocoaPods? (eg. EXCamera)',\n    default: ({ npmModuleName }) => generateCocoaPodDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'CocoaPod name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'CocoaPod name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'javaPackage',\n    message: 'How would you like to call your module in Java? (eg. expo.modules.camera)',\n    default: ({ npmModuleName }) => generateJavaModuleDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'Java Package name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'Java Package name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'jsPackageName',\n    message: 'How would you like to call your module in JS/TS codebase (eg. ExpoCamera)?',\n    default: ({ npmModuleName }) => generateInCodeModuleDefaultName(npmModuleName),\n    validate: (answer: string) =>\n      !answer.length\n        ? 'Module name cannot be empty'\n        : /\\s/.test(answer)\n        ? 'Module name cannot contain any whitespaces'\n        : true,\n  },\n  {\n    name: 'viewManager',\n    message: 'Would you like to create a NativeViewManager?',\n    default: false,\n    type: 'confirm',\n  },\n];\n\n/**\n * Prompt user about new module namings.\n * @param suggestedModuleName - suggested module name that would be used to generate all suggestions for each question\n */\nexport default async function promptQuestionsAsync(\n  suggestedModuleName: string\n): Promise<ModuleConfiguration> {\n  return (await prompt(generateQuestions(suggestedModuleName))) as ModuleConfiguration;\n}\n"],"file":"promptQuestionsAsync.js"}