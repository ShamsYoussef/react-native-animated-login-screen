{"version":3,"sources":["../../../src/commands/generate-module/generateModuleAsync.ts"],"names":["generateModuleAsync","newModuleProjectDir","options","newModulePathFromArgv","path","resolve","newModuleName","basename","newModuleParentPath","dirname","process","cwd","configuration","newModulePath","npmModuleName","fse","existsSync","CommandError","template"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,eAAeA,mBAAf,CACbC,mBADa,EAEbC,OAFa,EAGb;AACA,QAAMC,qBAAqB,GAAGF,mBAAmB,IAAIG,gBAAKC,OAAL,CAAaJ,mBAAb,CAArD;;AACA,QAAMK,aAAa,GAAGH,qBAAqB,IAAIC,gBAAKG,QAAL,CAAcJ,qBAAd,CAA/C;;AACA,QAAMK,mBAAmB,GAAGL,qBAAqB,GAC7CC,gBAAKK,OAAL,CAAaN,qBAAb,CAD6C,GAE7CO,OAAO,CAACC,GAAR,EAFJ;AAIA,QAAMC,aAAa,GAAG,MAAM,qCAAqBN,aAArB,CAA5B;;AACA,QAAMO,aAAa,GAAGT,gBAAKC,OAAL,CAAaG,mBAAb,EAAkCI,aAAa,CAACE,aAAhD,CAAtB;;AACA,MAAIC,mBAAIC,UAAJ,CAAeH,aAAf,CAAJ,EAAmC;AACjC,UAAM,KAAII,uBAAJ,EAAiB,uBAAjB,EAA2C,WAAUJ,aAAc,mBAAnE,CAAN;AACD;;AAED,QAAM,8BAAcA,aAAd,EAA6BX,OAAO,CAACgB,QAArC,CAAN;AAEA,QAAM,gCAAgBL,aAAhB,EAA+BD,aAA/B,CAAN;AACD","sourcesContent":["import path from 'path';\nimport fse from 'fs-extra';\nimport { CommandOptions } from 'commander';\n\nimport CommandError from '../../CommandError';\n\nimport promptQuestionsAsync from './promptQuestionsAsync';\nimport configureModule from './configureModule';\nimport fetchTemplate from './fetchTemplate';\n\nexport default async function generateModuleAsync(\n  newModuleProjectDir: string,\n  options: CommandOptions & { template?: string }\n) {\n  const newModulePathFromArgv = newModuleProjectDir && path.resolve(newModuleProjectDir);\n  const newModuleName = newModulePathFromArgv && path.basename(newModulePathFromArgv);\n  const newModuleParentPath = newModulePathFromArgv\n    ? path.dirname(newModulePathFromArgv)\n    : process.cwd();\n\n  const configuration = await promptQuestionsAsync(newModuleName);\n  const newModulePath = path.resolve(newModuleParentPath, configuration.npmModuleName);\n  if (fse.existsSync(newModulePath)) {\n    throw new CommandError('MODULE_ALREADY_EXISTS', `Module '${newModulePath}' already exists!`);\n  }\n\n  await fetchTemplate(newModulePath, options.template);\n\n  await configureModule(newModulePath, configuration);\n}\n"],"file":"generateModuleAsync.js"}