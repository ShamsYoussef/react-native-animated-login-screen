{"version":3,"sources":["../../../src/commands/generate-module/fetchTemplate.ts"],"names":["DEFAULT_TEMPLATE","fetchTemplate","destinationPath","template","fse","existsSync","path","resolve","Logger","global","info","chalk","bold","copy","isNpmPackage","pacote","extract","pathExists","join","move","match","toLowerCase","test","split","slice"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,gBAAgB,GAAG,6BAAzB;AAEA;;;;;;AAKe,eAAeC,aAAf,CAA6BC,eAA7B,EAAsDC,QAAtD,EAAyE;AACtF,MAAIA,QAAQ,IAAIC,mBAAIC,UAAJ,CAAeC,gBAAKC,OAAL,CAAaJ,QAAb,CAAf,CAAhB,EAAwD;AACtD;AACAK,kBAAOC,MAAP,CAAcC,IAAd,CAAoB,yBAAwBC,iBAAMC,IAAN,CAAWN,gBAAKC,OAAL,CAAaJ,QAAb,CAAX,CAAmC,GAA/E;;AACA,UAAMC,mBAAIS,IAAJ,CAASP,gBAAKC,OAAL,CAAaJ,QAAb,CAAT,EAAiCD,eAAjC,CAAN;AACD,GAJD,MAIO,IAAIC,QAAQ,IAAIW,YAAY,CAACX,QAAD,CAA5B,EAAwC;AAC7C;AACAK,kBAAOC,MAAP,CAAcC,IAAd,CAAoB,kCAAiCC,iBAAMC,IAAN,CAAWT,QAAX,CAAqB,EAA1E;;AACA,UAAMY,kBAAOC,OAAP,CAAeb,QAAf,EAAyBD,eAAzB,CAAN;AACD,GAJM,MAIA;AACL;AACAM,kBAAOC,MAAP,CAAcC,IAAd,CAAoB,0CAAyCC,iBAAMC,IAAN,CAAWZ,gBAAX,CAA6B,EAA1F;;AACA,UAAMe,kBAAOC,OAAP,CAAehB,gBAAf,EAAiCE,eAAjC,CAAN;AACD;;AAED,MAAI,MAAME,mBAAIa,UAAJ,CAAeX,gBAAKY,IAAL,CAAUhB,eAAV,EAA2B,yBAA3B,CAAf,CAAV,EAAiF;AAC/E,UAAME,mBAAIe,IAAJ,CACJb,gBAAKY,IAAL,CAAUhB,eAAV,EAA2B,yBAA3B,CADI,EAEJI,gBAAKY,IAAL,CAAUhB,eAAV,EAA2B,gBAA3B,CAFI,CAAN;AAID;AACF;;AAED,SAASY,YAAT,CAAsBX,QAAtB,EAAwC;AACtC,SACE,CAACA,QAAQ,CAACiB,KAAT,CAAe,KAAf,CAAD,IAA0B;AAC1B,GAACjB,QAAQ,CAACiB,KAAT,CAAe,IAAf,CADD,IACyB;AACzBjB,EAAAA,QAAQ,CAACkB,WAAT,OAA2BlB,QAF3B,IAEuC;AACvC,GAAC,WAAWmB,IAAX,CAAgBnB,QAAQ,CAACoB,KAAT,CAAe,GAAf,EAAoBC,KAApB,CAA0B,CAAC,CAA3B,EAA8B,CAA9B,CAAhB,CAHD,IAGsD;AACtDrB,EAAAA,QAAQ,CAACiB,KAAT,CAAe,oDAAf,CALF,CAKuE;AALvE;AAOD","sourcesContent":["import path from 'path';\nimport fse from 'fs-extra';\nimport pacote from 'pacote';\nimport chalk from 'chalk';\nimport { Logger } from '@expo/xdl';\n\nconst DEFAULT_TEMPLATE = 'expo-module-template@latest';\n\n/**\n * Fetches directory from npm or given templateDirectory into destinationPath\n * @param destinationPath - destination for fetched template\n * @param template - optional template provided as npm package or local directory\n */\nexport default async function fetchTemplate(destinationPath: string, template?: string) {\n  if (template && fse.existsSync(path.resolve(template))) {\n    // local template\n    Logger.global.info(`Using local template: ${chalk.bold(path.resolve(template))}.`);\n    await fse.copy(path.resolve(template), destinationPath);\n  } else if (template && isNpmPackage(template)) {\n    // npm package\n    Logger.global.info(`Using NPM package as template: ${chalk.bold(template)}`);\n    await pacote.extract(template, destinationPath);\n  } else {\n    // default npm packge\n    Logger.global.info(`Using default NPM package as template: ${chalk.bold(DEFAULT_TEMPLATE)}`);\n    await pacote.extract(DEFAULT_TEMPLATE, destinationPath);\n  }\n\n  if (await fse.pathExists(path.join(destinationPath, 'template-unimodule.json'))) {\n    await fse.move(\n      path.join(destinationPath, 'template-unimodule.json'),\n      path.join(destinationPath, 'unimodule.json')\n    );\n  }\n}\n\nfunction isNpmPackage(template: string) {\n  return (\n    !template.match(/^\\./) && // don't start with .\n    !template.match(/^_/) && // don't start with _\n    template.toLowerCase() === template && // only lowercase\n    !/[~'!()*]/.test(template.split('/').slice(-1)[0]) && // don't contain any character from [~'!()*]\n    template.match(/^(@([^/]+?)\\/)?([^/@]+)(@(\\d\\.\\d\\.\\d)(-[^/@]+)?)?$/) // has shape (@scope/)?actual-package-name(@0.1.1(-tag.1)?)?\n  );\n}\n"],"file":"fetchTemplate.js"}