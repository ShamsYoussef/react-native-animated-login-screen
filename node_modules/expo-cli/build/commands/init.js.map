{"version":3,"sources":["../../src/commands/init.ts"],"names":["FEATURED_TEMPLATES","shortName","name","description","BARE_WORKFLOW_TEMPLATES","isMacOS","process","platform","action","projectDir","command","options","yes","yarn","npm","template","undefined","parentDir","dirName","root","path","resolve","dirname","basename","validationResult","validateName","CommandError","parent","nonInteractive","cwd","templateSpec","registry","escapedName","raw","descriptionColumn","Math","max","map","t","length","type","message","pageSize","choices","prompt","separator","value","chalk","bold","stdout","columns","short","nonInteractiveHelp","initialConfig","templateManifest","pacote","manifest","isBare","includes","promptForBareConfig","promptForManagedConfig","packageManager","PackageManager","shouldUseYarn","log","newLine","extractTemplateStep","logNewSection","projectPath","Exp","extractAndPrepareTemplateAppAsync","join","expo","slug","succeed","e","fail","initGitRepoAsync","silent","commit","installJsDepsStep","installDependenciesAsync","cdPath","relative","podsInstalled","installPodsAsync","_","showPublishBeforeBuildWarning","logProjectReadyAsync","workflow","nested","macOSComment","projectRoot","step","CocoaPodsPackageManager","getenv","boolish","isCLIInstalledAsync","text","render","installCLIAsync","stopAndPersist","symbol","red","installAsync","title","spinner","start","test","dir","isNonExistentOrEmptyDir","validateProjectName","fs","statSync","isDirectory","readdirSync","error","code","projectName","default","filter","trim","validate","program","alias","option","asyncAction"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport { Command } from 'commander';\nimport { AppJSONConfig, BareAppConfig, ExpoConfig } from '@expo/config';\nimport { Exp } from '@expo/xdl';\nimport padEnd from 'lodash/padEnd';\nimport npmPackageArg from 'npm-package-arg';\nimport pacote from 'pacote';\nimport ora from 'ora';\nimport trimStart from 'lodash/trimStart';\nimport wordwrap from 'wordwrap';\nimport * as PackageManager from '@expo/package-manager';\nimport path from 'path';\nimport getenv from 'getenv';\nimport terminalLink from 'terminal-link';\nimport prompt from '../prompt';\nimport log from '../log';\nimport CommandError from '../CommandError';\nimport { usesOldExpoUpdatesAsync } from './utils/ProjectUtils';\n\ntype Options = {\n  template?: string;\n  npm: boolean;\n  yarn: boolean;\n  yes: boolean;\n  name?: string;\n};\n\nconst FEATURED_TEMPLATES = [\n  '----- Managed workflow -----',\n  {\n    shortName: 'blank',\n    name: 'expo-template-blank',\n    description: 'a minimal app as clean as an empty canvas',\n  },\n  {\n    shortName: 'blank (TypeScript)',\n    name: 'expo-template-blank-typescript',\n    description: 'same as blank but with TypeScript configuration',\n  },\n  {\n    shortName: 'tabs',\n    name: 'expo-template-tabs',\n    description: 'several example screens and tabs using react-navigation',\n  },\n  '----- Bare workflow -----',\n  {\n    shortName: 'minimal',\n    name: 'expo-template-bare-minimum',\n    description: 'bare and minimal, just the essentials to get you started',\n  },\n  {\n    shortName: 'minimal (TypeScript)',\n    name: 'expo-template-bare-typescript',\n    description: 'same as minimal but with TypeScript configuration',\n  },\n];\n\nconst BARE_WORKFLOW_TEMPLATES = ['expo-template-bare-minimum', 'expo-template-bare-typescript'];\nconst isMacOS = process.platform === 'darwin';\n\nasync function action(projectDir: string, command: Command) {\n  const options: Options = {\n    yes: !!command.yes,\n    yarn: !!command.yarn,\n    npm: !!command.npm,\n    template: command.template,\n    /// XXX(ville): this is necessary because with Commander.js, when the --name\n    // option is not set, `command.name` will point to `Command.prototype.name`.\n    name: typeof command.name === 'string' ? ((command.name as unknown) as string) : undefined,\n  };\n  if (options.yes) {\n    projectDir = '.';\n    if (!options.template) {\n      options.template = 'blank';\n    }\n  }\n\n  let parentDir;\n  let dirName;\n\n  if (projectDir) {\n    let root = path.resolve(projectDir);\n    parentDir = path.dirname(root);\n    dirName = path.basename(root);\n    let validationResult = validateName(parentDir, dirName);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_DIR', validationResult);\n    }\n  } else if (command.parent && command.parent.nonInteractive) {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      'The project dir argument is required in non-interactive mode.'\n    );\n  } else {\n    parentDir = process.cwd();\n  }\n\n  let templateSpec;\n  if (options.template) {\n    templateSpec = npmPackageArg(options.template);\n\n    // For backwards compatibility, 'blank' and 'tabs' are aliases for\n    // 'expo-template-blank' and 'expo-template-tabs', respectively.\n    if (\n      (templateSpec.name === 'blank' ||\n        templateSpec.name === 'tabs' ||\n        templateSpec.name === 'bare-minimum') &&\n      templateSpec.registry\n    ) {\n      templateSpec.escapedName = `expo-template-${templateSpec.name}`;\n      templateSpec.name = templateSpec.escapedName;\n      templateSpec.raw = templateSpec.escapedName;\n    }\n  } else {\n    const descriptionColumn =\n      Math.max(...FEATURED_TEMPLATES.map(t => (typeof t === 'object' ? t.shortName.length : 0))) +\n      2;\n    const { template } = await prompt(\n      {\n        type: 'list',\n        name: 'template',\n        message: 'Choose a template:',\n        pageSize: 20,\n        choices: FEATURED_TEMPLATES.map(template => {\n          if (typeof template === 'string') {\n            return prompt.separator(template);\n          } else {\n            return {\n              value: template.name,\n              name:\n                chalk.bold(padEnd(template.shortName, descriptionColumn)) +\n                trimStart(\n                  wordwrap(\n                    descriptionColumn + 2,\n                    process.stdout.columns || 80\n                  )(template.description)\n                ),\n              short: template.name,\n            };\n          }\n        }),\n      },\n      {\n        nonInteractiveHelp:\n          '--template: argument is required in non-interactive mode. Valid choices are: \"blank\", \"tabs\", \"bare-minimum\" or any custom template (name of npm package).',\n      }\n    );\n    templateSpec = npmPackageArg(template);\n  }\n\n  let initialConfig;\n  let templateManifest = await pacote.manifest(templateSpec);\n  let isBare = BARE_WORKFLOW_TEMPLATES.includes(templateManifest.name);\n  if (isBare) {\n    initialConfig = await promptForBareConfig(parentDir, dirName, options);\n  } else {\n    initialConfig = await promptForManagedConfig(parentDir, dirName, options);\n  }\n\n  let packageManager: 'npm' | 'yarn' = 'npm';\n  if (options.yarn) {\n    packageManager = 'yarn';\n  } else if (options.npm) {\n    packageManager = 'npm';\n  } else if (PackageManager.shouldUseYarn()) {\n    packageManager = 'yarn';\n    log.newLine();\n    log('🧶 Using Yarn to install packages. You can pass --npm to use npm instead.');\n    log.newLine();\n  } else {\n    packageManager = 'npm';\n    log.newLine();\n    log('📦 Using npm to install packages. You can pass --yarn to use Yarn instead.');\n    log.newLine();\n  }\n\n  let extractTemplateStep = logNewSection('Downloading and extracting project files.');\n  let projectPath;\n  try {\n    projectPath = await Exp.extractAndPrepareTemplateAppAsync(\n      templateSpec,\n      path.join(\n        parentDir,\n        dirName || ('expo' in initialConfig ? initialConfig.expo.slug : initialConfig.name)\n      ),\n      initialConfig\n    );\n    extractTemplateStep.succeed('Downloaded and extracted project files.');\n  } catch (e) {\n    extractTemplateStep.fail(\n      'Something went wrong in downloading and extracting the project files.'\n    );\n    throw e;\n  }\n\n  // for now, we will just init a git repo if they have git installed and the\n  // project is not inside an existing git tree, and do it silently. we should\n  // at some point check if git is installed and actually bail out if not, because\n  // npm install will fail with a confusing error if so.\n  try {\n    // check if git is installed\n    // check if inside git repo\n    await Exp.initGitRepoAsync(projectPath, { silent: true, commit: true });\n  } catch {\n    // todo: check if git is installed, bail out\n  }\n\n  let installJsDepsStep = logNewSection('Installing JavaScript dependencies.');\n  try {\n    await Exp.installDependenciesAsync(projectPath, packageManager, { silent: true });\n    installJsDepsStep.succeed('Installed JavaScript dependencies.');\n  } catch {\n    installJsDepsStep.fail(\n      `Something when wrong installing JavaScript dependencies. Check your ${packageManager} logs. Continuing to initialize the app.`\n    );\n  }\n\n  let cdPath = path.relative(process.cwd(), projectPath);\n  if (cdPath.length > projectPath.length) {\n    cdPath = projectPath;\n  }\n  if (isBare) {\n    let podsInstalled = false;\n    try {\n      podsInstalled = await installPodsAsync(projectPath);\n    } catch (_) {}\n\n    log.newLine();\n    let showPublishBeforeBuildWarning = await usesOldExpoUpdatesAsync(projectPath);\n    await logProjectReadyAsync({\n      cdPath,\n      packageManager,\n      workflow: 'bare',\n      showPublishBeforeBuildWarning,\n    });\n    if (!podsInstalled && process.platform === 'darwin') {\n      log.newLine();\n      log.nested(\n        `⚠️  Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n      );\n      log.nested('');\n      log.nested(`  cd ${cdPath ?? '.'}/ios`);\n      log.nested(`  pod install`);\n      log.nested('');\n    }\n  } else {\n    log.newLine();\n    await logProjectReadyAsync({ cdPath, packageManager, workflow: 'managed' });\n  }\n}\n\nfunction logProjectReadyAsync({\n  cdPath,\n  packageManager,\n  workflow,\n  showPublishBeforeBuildWarning,\n}: {\n  cdPath: string;\n  packageManager: string;\n  workflow: 'managed' | 'bare';\n  showPublishBeforeBuildWarning?: boolean;\n}) {\n  log.nested(chalk.bold(`✅ Your project is ready!`));\n  log.newLine();\n\n  // empty string if project was created in current directory\n  if (cdPath) {\n    log.nested(\n      `To run your project, navigate to the directory and run one of the following ${packageManager} commands.`\n    );\n    log.newLine();\n    log.nested(`- ${chalk.bold('cd ' + cdPath)}`);\n  } else {\n    log.nested(`To run your project, run one of the following ${packageManager} commands.`);\n    log.newLine();\n  }\n\n  if (workflow === 'managed') {\n    log.nested(\n      `- ${chalk.bold(\n        `${packageManager} start`\n      )} # you can open iOS, Android, or web from here, or run them directly with the commands below.`\n    );\n  }\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);\n\n  let macOSComment = '';\n  if (!isMacOS && workflow === 'bare') {\n    macOSComment =\n      ' # you need to use macOS to build the iOS project - use managed workflow if you need to do iOS development without a Mac';\n  } else if (!isMacOS && workflow === 'managed') {\n    macOSComment = ' # requires an iOS device or macOS for access to an iOS simulator';\n  }\n  log.nested(\n    `- ${chalk.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}${macOSComment}`\n  );\n\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);\n\n  if (workflow === 'bare') {\n    log.newLine();\n    log.nested(\n      `💡 You can also open up the projects in the ${chalk.bold('ios')} and ${chalk.bold(\n        'android'\n      )} directories with their respective IDEs.`\n    );\n\n    if (showPublishBeforeBuildWarning) {\n      log.nested(\n        `- 🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. Before you do a release build, make sure you run ${chalk.bold(\n          'expo publish'\n        )}. ${terminalLink('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`\n      );\n    }\n    // TODO: add equivalent of this or some command to wrap it:\n    // # ios\n    // $ open -a Xcode ./ios/{PROJECT_NAME}.xcworkspace\n    // # android\n    // $ open -a /Applications/Android\\\\ Studio.app ./android\n  }\n}\n\nasync function installPodsAsync(projectRoot: string) {\n  let step = logNewSection('Installing CocoaPods.');\n  if (process.platform !== 'darwin') {\n    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');\n    return false;\n  }\n  const packageManager = new PackageManager.CocoaPodsPackageManager({\n    cwd: path.join(projectRoot, 'ios'),\n    log,\n    silent: getenv.boolish('EXPO_DEBUG', true),\n  });\n\n  if (!(await packageManager.isCLIInstalledAsync())) {\n    try {\n      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';\n      step.render();\n      await packageManager.installCLIAsync();\n      step.succeed('Installed CocoaPods CLI');\n      step = logNewSection('Running `pod install` in the `ios` directory.');\n    } catch (e) {\n      step.stopAndPersist({\n        symbol: '⚠️ ',\n        text: chalk.red(\n          'Unable to install the CocoaPods CLI. Continuing with initializing the project, you can install CocoaPods afterwards.'\n        ),\n      });\n      if (e.message) {\n        log(`- ${e.message}`);\n      }\n      return false;\n    }\n  }\n\n  try {\n    await packageManager.installAsync();\n    step.succeed('Installed pods and initialized Xcode workspace.');\n    return true;\n  } catch (e) {\n    step.stopAndPersist({\n      symbol: '⚠️ ',\n      text: chalk.red(\n        'Something when wrong running `pod install` in the `ios` directory. Continuing with initializing the project, you can debug this afterwards.'\n      ),\n    });\n    if (e.message) {\n      log(`- ${e.message}`);\n    }\n    return false;\n  }\n}\n\nfunction logNewSection(title: string) {\n  let spinner = ora(chalk.bold(title));\n  spinner.start();\n  return spinner;\n}\n\nfunction validateName(parentDir: string, name: string | undefined) {\n  if (typeof name !== 'string' || name === '') {\n    return 'The project name can not be empty.';\n  }\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters.';\n  }\n  let dir = path.join(parentDir, name);\n  if (!isNonExistentOrEmptyDir(dir)) {\n    return `The path \"${dir}\" already exists. Please choose a different parent directory or project name.`;\n  }\n  return true;\n}\n\nfunction validateProjectName(name: string) {\n  return (\n    /^[a-z0-9]+$/i.test(name) || 'Project name can only include ASCII characters A-Z, a-z and 0-9'\n  );\n}\n\nfunction isNonExistentOrEmptyDir(dir: string) {\n  try {\n    return fs.statSync(dir).isDirectory() && fs.readdirSync(dir).length === 0;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return true;\n    }\n    throw error;\n  }\n}\n\nasync function promptForBareConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<BareAppConfig> {\n  let projectName: string;\n  if (dirName) {\n    let validationResult = validateProjectName(dirName);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_NAME', validationResult);\n    }\n    projectName = dirName;\n  } else {\n    ({ projectName } = await prompt({\n      name: 'projectName',\n      message: 'What would you like to name your app?',\n      default: 'my-app',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateProjectName(name),\n    }));\n  }\n\n  return {\n    name: projectName,\n    expo: {\n      name: options.name || projectName,\n      slug: projectName,\n    },\n  };\n}\n\nasync function promptForManagedConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<{ expo: Pick<ExpoConfig, 'name' | 'slug'> }> {\n  let slug;\n  if (dirName) {\n    slug = dirName;\n  } else {\n    ({ slug } = await prompt({\n      name: 'slug',\n      message: 'What would you like to name your app?',\n      default: 'my-app',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateName(parentDir, name),\n    }));\n  }\n  const expo = { name: slug, slug };\n  if (options.name) {\n    expo.name = options.name;\n  }\n  return { expo };\n}\n\nexport default function (program: Command) {\n  program\n    .command('init [project-dir]')\n    .alias('i')\n    .description(\n      'Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.'\n    )\n    .option(\n      '-t, --template [name]',\n      'Specify which template to use. Valid options are \"blank\", \"tabs\", \"bare-minimum\" or a package on npm (e.g. \"expo-template-bare-typescript\") that includes an Expo project template.'\n    )\n    .option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)')\n    .option('--name [name]', 'The name of your app visible on the home screen.')\n    .option('--yes', 'Use default options. Same as \"expo init . --template blank')\n    .asyncAction(action);\n}\n"],"file":"init.js"}