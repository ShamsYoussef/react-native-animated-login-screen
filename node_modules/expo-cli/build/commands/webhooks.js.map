{"version":3,"sources":["../../src/commands/webhooks.ts"],"names":["WEBHOOK_TYPES","program","command","option","description","asyncActionProjectDir","projectDir","_options","options","_sanitizeOptions","secret","webhookData","args","remoteFullPackageName","experienceName","Exp","getPublishInfoAsync","event","Webhooks","setWebhookAsync","e","log","error","Error","webhooks","getWebhooksAsync","length","chalk","bold","webhook","url","_sanitizeEvent","deleteWebhooksAsync","_event","isValidUrl","validator","isURL","protocols","require_protocol","secretString","String","_askForSecret","required","includes","inquirer","prompt","type","name","message"],"mappings":"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","sourcesContent":["import { Command } from 'commander';\nimport { Exp, Webhooks } from '@expo/xdl';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport validator from 'validator';\n\nimport log from '../log';\n\ntype Options = { url?: string; secret?: string; event?: string };\n\nconst WEBHOOK_TYPES = ['build'];\n\nexport default function (program: Command) {\n  program\n    .command('webhooks:set [project-dir]')\n    .option('--url <webhook-url>', 'Webhook to be called after building the app.')\n    .option('--event <webhook-type>', 'Type of webhook: [build].')\n    .option(\n      '--secret <webhook-secret>',\n      'Secret to be used to calculate the webhook request payload signature (check docs for more details). It has to be at least 16 characters long.'\n    )\n    .description(`Set a webhook for the project.`)\n    .asyncActionProjectDir(async (projectDir: string, _options: Options) => {\n      const options = await _sanitizeOptions(_options);\n      const secret = options.secret;\n      const webhookData = { ...options, secret };\n      const {\n        args: { remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n      log(`Setting ${webhookData.event} webhook and secret for ${experienceName}`);\n      try {\n        await Webhooks.setWebhookAsync(experienceName, webhookData);\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to set webhook and secret for this project.');\n      }\n\n      log('All done!');\n    });\n\n  program\n    .command('webhooks:show [project-dir]')\n    .description(`Show webhooks for the project.`)\n    .asyncActionProjectDir(async (projectDir: string) => {\n      const {\n        args: { remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      log(`Fetching webhooks for ${experienceName}`);\n\n      try {\n        const webhooks = await Webhooks.getWebhooksAsync(experienceName);\n        if (!webhooks || webhooks.length === 0) {\n          log(chalk.bold(\"You don't have any webhook set for this project.\"));\n        } else {\n          for (const webhook of webhooks) {\n            const { event, url, secret } = webhook;\n            log();\n            log(`Webhook type: ${chalk.bold(event)}`);\n            log(`Webhook URL: ${chalk.bold(url)}`);\n            log(`Webhook secret: ${chalk.bold(secret)}`);\n          }\n        }\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to fetch webhooks for this project.');\n      }\n    });\n\n  program\n    .command('webhooks:clear [project-dir]')\n    .option('--event <webhook-type>', 'Type of webhook: [build].')\n    .description(`Clear a webhook associated with this project.`)\n    .asyncActionProjectDir(async (projectDir: string, options: { event?: string }) => {\n      const event = _sanitizeEvent(options.event);\n      const {\n        args: { remoteFullPackageName: experienceName },\n      } = await Exp.getPublishInfoAsync(projectDir);\n\n      log(`Clearing webhooks for ${experienceName}`);\n\n      try {\n        await Webhooks.deleteWebhooksAsync(experienceName, event);\n      } catch (e) {\n        log.error(e);\n        throw new Error('Unable to clear webhook and secret for this project.');\n      }\n      log('All done!');\n    });\n}\n\nasync function _sanitizeOptions(options: Options): Promise<Webhooks.WebhookData> {\n  let { url, secret, event: _event = 'build' } = options;\n\n  const event = _sanitizeEvent(_event);\n  if (!event) {\n    throw new Error('Webhook type has to be provided');\n  }\n\n  if (!url) {\n    throw new Error('You must provide --url parameter');\n  }\n  const isValidUrl = validator.isURL(url, {\n    protocols: ['http', 'https'],\n    require_protocol: true,\n  });\n  if (!isValidUrl) {\n    throw new Error(\n      'The provided webhook URL is invalid and must be an absolute URL, including a scheme.'\n    );\n  }\n\n  if (secret) {\n    const secretString = String(secret);\n    if (secretString.length < 16 || secretString.length > 1000) {\n      throw new Error('Webhook secret has be at least 16 and not more than 1000 characters long');\n    }\n  } else {\n    secret = await _askForSecret();\n  }\n\n  return { url, secret, event };\n}\n\nfunction _sanitizeEvent(event: string | undefined, required = false): string | undefined {\n  if (!event) {\n    // we don't have anything to sanitize here, continue\n    return event;\n  }\n\n  if (!WEBHOOK_TYPES.includes(event)) {\n    throw new Error(`Unsupported webhook type: ${event}`);\n  }\n\n  return event;\n}\n\nasync function _askForSecret(): Promise<string> {\n  const { secret } = await inquirer.prompt({\n    type: 'password',\n    name: 'secret',\n    message: 'Webhook secret (at least 16 and not more than 1000 characters):',\n  });\n  if (secret.length < 16 || secret.length > 1000) {\n    log.error('Webhook secret has be at least 16 and not more than 1000 characters long');\n    return await _askForSecret();\n  } else {\n    return secret;\n  }\n}\n"],"file":"webhooks.js"}