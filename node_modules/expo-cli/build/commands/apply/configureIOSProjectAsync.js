"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureIOSProjectAsync;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function configureIOSProjectAsync(projectRoot) {
  const {
    exp
  } = (0, _config().getConfig)(projectRoot, {
    skipSDKVersionRequirement: true
  });

  _config().IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectRoot, exp.ios.bundleIdentifier);

  _config().IOSConfig.Google.setGoogleServicesFile(exp, projectRoot);

  _config().IOSConfig.DeviceFamily.setDeviceFamily(exp, projectRoot); // Configure the Info.plist


  await modifyInfoPlistAsync(projectRoot, infoPlist => {
    infoPlist = _config().IOSConfig.CustomInfoPlistEntries.setCustomInfoPlistEntries(exp, infoPlist);
    infoPlist = _config().IOSConfig.Branch.setBranchApiKey(exp, infoPlist);
    infoPlist = _config().IOSConfig.Facebook.setFacebookConfig(exp, infoPlist);
    infoPlist = _config().IOSConfig.Google.setGoogleConfig(exp, infoPlist);
    infoPlist = _config().IOSConfig.Name.setDisplayName(exp, infoPlist);
    infoPlist = _config().IOSConfig.Orientation.setOrientation(exp, infoPlist);
    infoPlist = _config().IOSConfig.RequiresFullScreen.setRequiresFullScreen(exp, infoPlist);
    infoPlist = _config().IOSConfig.Scheme.setScheme(exp, infoPlist);
    infoPlist = _config().IOSConfig.UserInterfaceStyle.setUserInterfaceStyle(exp, infoPlist);
    infoPlist = _config().IOSConfig.UsesNonExemptEncryption.setUsesNonExemptEncryption(exp, infoPlist);
    infoPlist = _config().IOSConfig.Version.setBuildNumber(exp, infoPlist);
    infoPlist = _config().IOSConfig.Version.setVersion(exp, infoPlist);
    return infoPlist;
  }); // Configure entitlements/capabilities

  await modifyEntitlementsPlistAsync(projectRoot, entitlementsPlist => {
    // TODO: We don't have a mechanism for getting the apple team id here yet
    entitlementsPlist = _config().IOSConfig.Entitlements.setICloudEntitlement(exp, 'TODO-GET-APPLE-TEAM-ID', entitlementsPlist);
    entitlementsPlist = _config().IOSConfig.Entitlements.setAppleSignInEntitlement(exp, entitlementsPlist);
    entitlementsPlist = _config().IOSConfig.Entitlements.setAccessesContactNotes(exp, entitlementsPlist);
    entitlementsPlist = _config().IOSConfig.Entitlements.setAssociatedDomains(exp, entitlementsPlist);
    return entitlementsPlist;
  }); // Other

  await _config().IOSConfig.Icons.setIconsAsync(exp, projectRoot);
  await _config().IOSConfig.SplashScreen.setSplashScreenAsync(exp, projectRoot);
  await _config().IOSConfig.Locales.setLocalesAsync(exp, projectRoot);
}

async function modifyEntitlementsPlistAsync(projectRoot, callback) {
  let entitlementsPath = _config().IOSConfig.Entitlements.getEntitlementsPath(projectRoot);

  let directory = _path().default.dirname(entitlementsPath);

  let filename = _path().default.basename(entitlementsPath, 'plist');

  await _xdl().IosPlist.modifyAsync(directory, filename, callback);
  await _xdl().IosPlist.cleanBackupAsync(directory, filename, false);
}

async function modifyInfoPlistAsync(projectRoot, callback) {
  const {
    iosProjectDirectory
  } = getIOSPaths(projectRoot);
  await _xdl().IosPlist.modifyAsync(iosProjectDirectory, 'Info', callback);
  await _xdl().IosPlist.cleanBackupAsync(iosProjectDirectory, 'Info', false);
} // TODO: come up with a better solution for using app.json expo.name in various places


function sanitizedName(name) {
  return name.replace(/[\W_]+/g, '').normalize('NFD').replace(/[\u0300-\u036f]/g, '');
} // TODO: it's silly and kind of fragile that we look at app config to determine
// the ios project paths. Overall this function needs to be revamped, just a
// placeholder for now! Make this more robust when we support applying config
// at any time (currently it's only applied on eject).


function getIOSPaths(projectRoot) {
  const {
    exp
  } = (0, _config().getConfig)(projectRoot, {
    skipSDKVersionRequirement: true
  });
  let projectName = exp.name;

  if (!projectName) {
    throw new Error('Your project needs a name in app.json/app.config.js.');
  }

  const iosProjectDirectory = _path().default.join(projectRoot, 'ios', sanitizedName(projectName));

  const iconPath = _path().default.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');

  return {
    projectName,
    iosProjectDirectory,
    iconPath
  };
}
//# sourceMappingURL=configureIOSProjectAsync.js.map