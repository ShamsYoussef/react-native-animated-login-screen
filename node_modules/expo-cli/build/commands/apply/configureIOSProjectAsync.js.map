{"version":3,"sources":["../../../src/commands/apply/configureIOSProjectAsync.ts"],"names":["configureIOSProjectAsync","projectRoot","exp","skipSDKVersionRequirement","IOSConfig","BundleIdenitifer","setBundleIdentifierForPbxproj","ios","bundleIdentifier","Google","setGoogleServicesFile","DeviceFamily","setDeviceFamily","modifyInfoPlistAsync","infoPlist","CustomInfoPlistEntries","setCustomInfoPlistEntries","Branch","setBranchApiKey","Facebook","setFacebookConfig","setGoogleConfig","Name","setDisplayName","Orientation","setOrientation","RequiresFullScreen","setRequiresFullScreen","Scheme","setScheme","UserInterfaceStyle","setUserInterfaceStyle","UsesNonExemptEncryption","setUsesNonExemptEncryption","Version","setBuildNumber","setVersion","modifyEntitlementsPlistAsync","entitlementsPlist","Entitlements","setICloudEntitlement","setAppleSignInEntitlement","setAccessesContactNotes","setAssociatedDomains","Icons","setIconsAsync","SplashScreen","setSplashScreenAsync","Locales","setLocalesAsync","callback","entitlementsPath","getEntitlementsPath","directory","path","dirname","filename","basename","IosPlist","modifyAsync","cleanBackupAsync","iosProjectDirectory","getIOSPaths","sanitizedName","name","replace","normalize","projectName","Error","join","iconPath"],"mappings":"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","sourcesContent":["import { IosPlist } from '@expo/xdl';\nimport { IOSConfig, getConfig } from '@expo/config';\nimport path from 'path';\n\nexport default async function configureIOSProjectAsync(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectRoot, exp.ios!.bundleIdentifier!);\n  IOSConfig.Google.setGoogleServicesFile(exp, projectRoot);\n  IOSConfig.DeviceFamily.setDeviceFamily(exp, projectRoot);\n\n  // Configure the Info.plist\n  await modifyInfoPlistAsync(projectRoot, infoPlist => {\n    infoPlist = IOSConfig.CustomInfoPlistEntries.setCustomInfoPlistEntries(exp, infoPlist);\n    infoPlist = IOSConfig.Branch.setBranchApiKey(exp, infoPlist);\n    infoPlist = IOSConfig.Facebook.setFacebookConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Google.setGoogleConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Name.setDisplayName(exp, infoPlist);\n    infoPlist = IOSConfig.Orientation.setOrientation(exp, infoPlist);\n    infoPlist = IOSConfig.RequiresFullScreen.setRequiresFullScreen(exp, infoPlist);\n    infoPlist = IOSConfig.Scheme.setScheme(exp, infoPlist);\n    infoPlist = IOSConfig.UserInterfaceStyle.setUserInterfaceStyle(exp, infoPlist);\n    infoPlist = IOSConfig.UsesNonExemptEncryption.setUsesNonExemptEncryption(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setBuildNumber(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setVersion(exp, infoPlist);\n\n    return infoPlist;\n  });\n\n  // Configure entitlements/capabilities\n  await modifyEntitlementsPlistAsync(projectRoot, entitlementsPlist => {\n    // TODO: We don't have a mechanism for getting the apple team id here yet\n    entitlementsPlist = IOSConfig.Entitlements.setICloudEntitlement(\n      exp,\n      'TODO-GET-APPLE-TEAM-ID',\n      entitlementsPlist\n    );\n\n    entitlementsPlist = IOSConfig.Entitlements.setAppleSignInEntitlement(exp, entitlementsPlist);\n    entitlementsPlist = IOSConfig.Entitlements.setAccessesContactNotes(exp, entitlementsPlist);\n    entitlementsPlist = IOSConfig.Entitlements.setAssociatedDomains(exp, entitlementsPlist);\n    return entitlementsPlist;\n  });\n\n  // Other\n  await IOSConfig.Icons.setIconsAsync(exp, projectRoot);\n  await IOSConfig.SplashScreen.setSplashScreenAsync(exp, projectRoot);\n  await IOSConfig.Locales.setLocalesAsync(exp, projectRoot);\n}\n\nasync function modifyEntitlementsPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  let entitlementsPath = IOSConfig.Entitlements.getEntitlementsPath(projectRoot);\n  let directory = path.dirname(entitlementsPath);\n  let filename = path.basename(entitlementsPath, 'plist');\n  await IosPlist.modifyAsync(directory, filename, callback);\n  await IosPlist.cleanBackupAsync(directory, filename, false);\n}\n\nasync function modifyInfoPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const { iosProjectDirectory } = getIOSPaths(projectRoot);\n  await IosPlist.modifyAsync(iosProjectDirectory, 'Info', callback);\n  await IosPlist.cleanBackupAsync(iosProjectDirectory, 'Info', false);\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nfunction getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  let projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(projectRoot, 'ios', sanitizedName(projectName));\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iconPath,\n  };\n}\n"],"file":"configureIOSProjectAsync.js"}