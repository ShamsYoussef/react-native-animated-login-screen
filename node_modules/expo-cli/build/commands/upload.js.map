{"version":3,"sources":["../../src/commands/upload.ts"],"names":["SOURCE_OPTIONS","program","command","alias","option","description","asyncActionProjectDir","projectDir","options","useSubmissionService","checkRuntimePlatform","submissionMode","SubmissionMode","online","offline","ctx","AndroidSubmitCommand","createContext","runAsync","on","console","log","LANGUAGES","join","args","Object","keys","length","Error","IOSUploader","validateOptions","uploader","upload","err","error","targetPlatform","process","platform","chalk","bold","exit"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport pick from 'lodash/pick';\nimport { Command } from 'commander';\n\nimport IOSUploader, { IosPlatformOptions, LANGUAGES } from './upload/IOSUploader';\nimport AndroidSubmitCommand from './upload/submission-service/android/AndroidSubmitCommand';\nimport log from '../log';\nimport { SubmissionMode } from './upload/submission-service/types';\n\nconst SOURCE_OPTIONS = ['id', 'latest', 'path', 'url'];\n\nexport default function (program: Command) {\n  program\n    .command('upload:android [projectDir]')\n    .alias('ua')\n    .option('--latest', 'uploads the latest build (default)')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path <path>', 'path to the .apk/.aab file')\n    .option('--url <url>', 'app archive url')\n    .option('--key <key>', 'path to the JSON key used to authenticate with Google Play')\n    .option(\n      '--android-package <android-package>',\n      'Android package name (using expo.android.package from app.json by default)'\n    )\n    .option('--type <archive-type>', 'archive type: apk, aab', /^(apk|aab)$/i)\n    .option(\n      '--track <track>',\n      'the track of the application to use, choose from: production, beta, alpha, internal, rollout',\n      /^(production|beta|alpha|internal|rollout)$/i,\n      'internal'\n    )\n    .option(\n      '--release-status <release-status>',\n      'release status (used when uploading new apks/aabs), choose from: completed, draft, halted, inProgress',\n      /^(completed|draft|halted|inProgress)$/i,\n      'completed'\n    )\n    .option(\n      '--use-submission-service',\n      'Experimental: Use Submission Service for uploading your app. The upload process will happen on Expo servers.'\n    )\n    .option('--verbose', 'Always print logs from Submission Service')\n    .description('Uploads an Android standalone app to Google Play Store.')\n    // TODO: make this work outside the project directory (if someone passes all necessary options for upload)\n    .asyncActionProjectDir(async (projectDir: string, options: any) => {\n      // TODO: remove this once we verify `fastlane supply` works on linux / windows\n      if (!options.useSubmissionService) {\n        checkRuntimePlatform('android');\n      }\n\n      const submissionMode = options.useSubmissionService\n        ? SubmissionMode.online\n        : SubmissionMode.offline;\n      const ctx = AndroidSubmitCommand.createContext(submissionMode, projectDir, options);\n      const command = new AndroidSubmitCommand(ctx);\n      await command.runAsync();\n    });\n\n  program\n    .command('upload:ios [projectDir]')\n    .alias('ui')\n    .option('--latest', 'uploads the latest build (default)')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path <path>', 'path to the .ipa file')\n    .option('--url <url>', 'app archive url')\n    .option(\n      '--apple-id <apple-id>',\n      'your Apple ID username (you can also set EXPO_APPLE_ID env variable)'\n    )\n    // apple unified App Store Connect and Developer Portal teams, this is temporary solution until fastlane implements those changes\n    // https://github.com/fastlane/fastlane/issues/14229\n    // after updating fastlane this value will be unnecessary\n    .option(\n      '--itc-team-id <itc-team-id>',\n      'App Store Connect Team ID - this option is deprecated, the proper ID is resolved automatically'\n    )\n    .option(\n      '--apple-id-password <apple-id-password>',\n      'your Apple ID password (you can also set EXPO_APPLE_ID_PASSWORD env variable)'\n    )\n    .option(\n      '--app-name <app-name>',\n      `the name of your app as it will appear on the App Store, this can't be longer than 30 characters (default: expo.name from app.json)`\n    )\n    .option(\n      '--company-name <company-name>',\n      'the name of your company, needed only for the first upload of any app to App Store'\n    )\n    .option(\n      '--sku <sku>',\n      'a unique ID for your app that is not visible on the App Store, will be generated unless provided'\n    )\n    .option(\n      '--language <language>',\n      `primary language (e.g. English, German; run \\`expo upload:ios --help\\` to see the list of available languages)`,\n      'English'\n    )\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description(\n      'Uploads a standalone app to Apple TestFlight (works on macOS only). Uploads the latest build by default.'\n    )\n    .on('--help', function () {\n      console.log('Available languages:');\n      console.log(`  ${LANGUAGES.join(', ')}`);\n      console.log();\n    })\n    // TODO: make this work outside the project directory (if someone passes all necessary options for upload)\n    .asyncActionProjectDir(async (projectDir: string, options: IosPlatformOptions) => {\n      try {\n        // TODO: remove this once we verify `fastlane supply` works on linux / windows\n        checkRuntimePlatform('ios');\n\n        const args = pick(options, SOURCE_OPTIONS);\n        if (Object.keys(args).length > 1) {\n          throw new Error(`You have to choose only one of: --path, --id, --latest, --url`);\n        }\n        IOSUploader.validateOptions(options);\n        const uploader = new IOSUploader(projectDir, options);\n        await uploader.upload();\n      } catch (err) {\n        log.error('Failed to upload the standalone app to the app store.');\n        throw err;\n      }\n    });\n}\n\nfunction checkRuntimePlatform(targetPlatform: 'android' | 'ios'): void {\n  if (process.platform !== 'darwin') {\n    if (targetPlatform === 'android') {\n      log.error('Local Android uploads are only supported on macOS.');\n      log(\n        chalk.bold(\n          'Try the --use-submission-service flag to upload your app from Expo servers. This feature is behind a flag because it is experimental.'\n        )\n      );\n    } else {\n      log.error('Currently, iOS uploads are only supported on macOS, sorry :(');\n    }\n    process.exit(1);\n  }\n}\n"],"file":"upload.js"}