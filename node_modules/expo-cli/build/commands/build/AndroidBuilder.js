"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _credentials() {
  const data = require("../../credentials");

  _credentials = function () {
    return data;
  };

  return data;
}

function _route() {
  const data = require("../../credentials/route");

  _route = function () {
    return data;
  };

  return data;
}

function _AndroidKeystore() {
  const data = require("../../credentials/views/AndroidKeystore");

  _AndroidKeystore = function () {
    return data;
  };

  return data;
}

function _SetupAndroidKeystore() {
  const data = require("../../credentials/views/SetupAndroidKeystore");

  _SetupAndroidKeystore = function () {
    return data;
  };

  return data;
}

function _BuildError() {
  const data = _interopRequireDefault(require("./BuildError"));

  _BuildError = function () {
    return data;
  };

  return data;
}

function _BaseBuilder() {
  const data = _interopRequireDefault(require("./BaseBuilder"));

  _BaseBuilder = function () {
    return data;
  };

  return data;
}

function utils() {
  const data = _interopRequireWildcard(require("./utils"));

  utils = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("./constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  ANDROID
} = _constants().PLATFORMS;

class AndroidBuilder extends _BaseBuilder().default {
  async run() {
    // Validate project
    await this.validateProject(); // Check SplashScreen images sizes

    await _xdl().Android.checkSplashScreenImages(this.projectDir); // Check the status of any current builds

    await this.checkForBuildInProgress(); // Check for existing credentials, collect any missing credentials, and validate them

    await this.collectAndValidateCredentials(); // Publish the current experience, if necessary

    let publishedExpIds = this.options.publicUrl ? undefined : await this.ensureReleaseExists();

    if (!this.options.publicUrl) {
      await this.checkStatusBeforeBuild();
    } // Initiate a build


    await this.build(publishedExpIds);
  }

  async validateProject() {
    var _this$manifest$androi;

    await utils().checkIfSdkIsSupported(this.manifest.sdkVersion, ANDROID);
    const androidPackage = (_this$manifest$androi = this.manifest.android) === null || _this$manifest$androi === void 0 ? void 0 : _this$manifest$androi.package;

    if (!androidPackage) {
      throw new (_BuildError().default)(`Your project must have an Android package set in app.json
See https://docs.expo.io/distribution/building-standalone-apps/#2-configure-appjson`);
    }

    if (!/^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(androidPackage)) {
      throw new (_BuildError().default)("Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)");
    }
  }

  platform() {
    return ANDROID;
  }

  async collectAndValidateCredentials() {
    const ctx = new (_credentials().Context)();
    await ctx.init(this.projectDir);
    const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;

    if (this.options.clearCredentials) {
      var _this$options$parent;

      if ((_this$options$parent = this.options.parent) === null || _this$options$parent === void 0 ? void 0 : _this$options$parent.nonInteractive) {
        throw new (_BuildError().default)('Clearing your Android build credentials from our build servers is a PERMANENT and IRREVERSIBLE action, it\'s not supported when combined with the "--non-interactive" option');
      }

      await (0, _route().runCredentialsManager)(ctx, new (_AndroidKeystore().RemoveKeystore)(experienceName));
    }

    const paramKeystore = await (0, _AndroidKeystore().getKeystoreFromParams)(this.options);

    if (paramKeystore) {
      await (0, _AndroidKeystore().useKeystore)(ctx, experienceName, paramKeystore);
    } else {
      var _this$options$parent2;

      await (0, _route().runCredentialsManager)(ctx, new (_SetupAndroidKeystore().SetupAndroidKeystore)(experienceName, {
        nonInteractive: (_this$options$parent2 = this.options.parent) === null || _this$options$parent2 === void 0 ? void 0 : _this$options$parent2.nonInteractive,
        allowMissingKeystore: true
      }));
    }
  }

}

exports.default = AndroidBuilder;
//# sourceMappingURL=AndroidBuilder.js.map