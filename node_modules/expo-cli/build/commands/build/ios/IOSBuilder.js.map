{"version":3,"sources":["../../../../src/commands/build/ios/IOSBuilder.ts"],"names":["missingBundleIdentifierError","XDLError","IOSBuilder","BaseBuilder","run","validateProject","maybeWarnDamagedSimulator","log","addNewLineIfNone","checkForBuildInProgress","options","type","prepareCredentials","publishedExpIds","ensureProjectIsPublished","publicUrl","checkStatusBeforeBuild","build","bundleIdentifier","manifest","ios","sdkVersion","validateIcon","utils","checkIfSdkIsSupported","PLATFORMS","IOS","getAppleCtx","appleCtx","apple","setup","authenticate","bestEffortAppleCtx","ctx","hasAppleCtx","appleId","ensureAppleCtx","nonInteractive","parent","confirm","name","message","chalk","green","username","owner","user","experienceName","slug","context","Context","init","projectDir","clearAndRevokeCredentialsIfRequested","skipCredentialsCheck","produceCredentials","e","code","ErrorCodes","NON_INTERACTIVE","newLine","link","bold","red","CommandError","credentials","getAllCredentials","_setupDistCert","appCredentials","distCertFromParams","SetupIosDist","error","_setupPushCert","pushKeyFromParams","SetupIosPush","_setupProvisioningProfile","distributionCert","provisioningProfileFromParams","teamId","SetupIosProvisioningProfile","distCert","getAppCredentials","ensureAppExists","enablePushNotifications","getDistCert","projectMetadata","clearCredentials","clearDistCert","clearPushKey","clearPushCert","clearProvisioningProfile","shouldClearAnything","credsToClear","determineCredentialsToClear","shouldRevokeOnApple","revokeCredentials","RemoveIosDist","removeSpecific","pushKey","getPushKey","RemoveIosPush","provisioningProfile","getProvisioningProfile","RemoveProvisioningProfile","pushCert","getPushCert","deletePushCert","credsToClearAll","Boolean","undefined","ensureReleaseExists","platform","icon","err","isMacOsCatalinaOrLater","os","semver","satisfies","release","underline","grey"],"mappings":"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","sourcesContent":["import os from 'os';\nimport chalk from 'chalk';\nimport pickBy from 'lodash/pickBy';\nimport { XDLError } from '@expo/xdl';\n\nimport terminalLink from 'terminal-link';\nimport semver from 'semver';\nimport BaseBuilder from '../BaseBuilder';\nimport { PLATFORMS } from '../constants';\nimport * as utils from '../utils';\nimport * as apple from '../../../appleApi';\nimport prompt from '../../../prompt';\nimport { ensurePNGIsNotTransparent } from './utils/image';\nimport { runCredentialsManager } from '../../../credentials/route';\nimport { Context } from '../../../credentials/context';\nimport { displayProjectCredentials } from '../../../credentials/actions/list';\nimport { SetupIosDist } from '../../../credentials/views/SetupIosDist';\nimport { SetupIosPush } from '../../../credentials/views/SetupIosPush';\nimport { SetupIosProvisioningProfile } from '../../../credentials/views/SetupIosProvisioningProfile';\nimport CommandError, { ErrorCodes } from '../../../CommandError';\nimport log from '../../../log';\n\nimport {\n  RemoveIosDist,\n  getDistCertFromParams,\n  useDistCertFromParams,\n} from '../../../credentials/views/IosDistCert';\nimport {\n  RemoveIosPush,\n  getPushKeyFromParams,\n  usePushKeyFromParams,\n} from '../../../credentials/views/IosPushCredentials';\nimport {\n  RemoveProvisioningProfile,\n  getProvisioningProfileFromParams,\n  useProvisioningProfileFromParams,\n} from '../../../credentials/views/IosProvisioningProfile';\nimport { IosAppCredentials, IosDistCredentials } from '../../../credentials/credentials';\n\nfunction missingBundleIdentifierError() {\n  return new XDLError(\n    'INVALID_OPTIONS',\n    `Your project must have a bundleIdentifier set in app.json.\nSee https://docs.expo.io/distribution/building-standalone-apps/#2-configure-appjson`\n  );\n}\n\nclass IOSBuilder extends BaseBuilder {\n  appleCtx?: apple.AppleCtx;\n\n  async run(): Promise<void> {\n    await this.validateProject();\n    this.maybeWarnDamagedSimulator();\n    log.addNewLineIfNone();\n    await this.checkForBuildInProgress();\n    if (this.options.type === 'archive') {\n      await this.prepareCredentials();\n    }\n    const publishedExpIds = await this.ensureProjectIsPublished();\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n    await this.build(publishedExpIds);\n    this.maybeWarnDamagedSimulator();\n  }\n\n  async validateProject() {\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n    const sdkVersion = this.manifest.sdkVersion;\n\n    await this.validateIcon();\n\n    if (!bundleIdentifier) {\n      throw missingBundleIdentifierError();\n    }\n    await utils.checkIfSdkIsSupported(sdkVersion!, PLATFORMS.IOS);\n  }\n\n  async getAppleCtx(): Promise<apple.AppleCtx> {\n    if (!this.appleCtx) {\n      await apple.setup();\n      this.appleCtx = await apple.authenticate(this.options);\n    }\n    return this.appleCtx;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n    if (this.options.appleId) {\n      // skip prompts and auto authenticate if flags are passed\n      return await ctx.ensureAppleCtx(this.options);\n    }\n\n    const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n    if (nonInteractive) {\n      return;\n    }\n\n    const { confirm } = await prompt([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n      },\n    ]);\n    if (confirm) {\n      return await ctx.ensureAppleCtx(this.options);\n    } else {\n      log(\n        chalk.green(\n          'No problem! 👌 \\nWe can’t auto-generate credentials if you don’t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n\n  async prepareCredentials() {\n    // TODO: Fix forcing the username to be valid\n    const username = this.manifest.owner ?? this.user?.username!;\n    const experienceName = `@${username}/${this.manifest.slug}`;\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n    if (!bundleIdentifier) throw missingBundleIdentifierError();\n    const context = new Context();\n    await context.init(this.projectDir);\n\n    await this.clearAndRevokeCredentialsIfRequested(context, { experienceName, bundleIdentifier });\n\n    if (this.options.skipCredentialsCheck) {\n      log('Skipping credentials check...');\n      return;\n    }\n    await this.bestEffortAppleCtx(context);\n\n    try {\n      await this.produceCredentials(context, experienceName, bundleIdentifier);\n    } catch (e) {\n      if (e.code === ErrorCodes.NON_INTERACTIVE) {\n        log.newLine();\n        const link = terminalLink(\n          'expo.fyi/credentials-non-interactive',\n          'https://expo.fyi/credentials-non-interactive'\n        );\n        log(\n          chalk.bold.red(\n            `Additional information needed to setup credentials in non-interactive mode.`\n          )\n        );\n        log(chalk.bold.red(`Learn more about how to resolve this: ${link}.`));\n        log.newLine();\n\n        // We don't want to display project credentials when we bail out due to\n        // non-interactive mode error, because we are unable to recover without\n        // user input.\n        throw new CommandError(\n          ErrorCodes.NON_INTERACTIVE,\n          'Unable to proceed, see the above error message.'\n        );\n      }\n\n      log(\n        chalk.bold.red(\n          'Failed to prepare all credentials. \\nThe next time you build, we will automatically use the following configuration:'\n        )\n      );\n      throw e;\n    } finally {\n      const credentials = await context.ios.getAllCredentials();\n      displayProjectCredentials(experienceName, bundleIdentifier, credentials);\n    }\n  }\n\n  async _setupDistCert(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials\n  ): Promise<void> {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const distCertFromParams = await getDistCertFromParams(this.options);\n      if (distCertFromParams) {\n        await useDistCertFromParams(ctx, appCredentials, distCertFromParams);\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosDist({ experienceName, bundleIdentifier, nonInteractive })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Distribution Certificate');\n      throw e;\n    }\n  }\n\n  async _setupPushCert(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials\n  ): Promise<void> {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const pushKeyFromParams = await getPushKeyFromParams(this.options);\n      if (pushKeyFromParams) {\n        await usePushKeyFromParams(ctx, appCredentials, pushKeyFromParams);\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosPush({ experienceName, bundleIdentifier, nonInteractive })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Push Key');\n      throw e;\n    }\n  }\n\n  async _setupProvisioningProfile(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    appCredentials: IosAppCredentials,\n    distributionCert: IosDistCredentials\n  ) {\n    try {\n      const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n      const provisioningProfileFromParams = await getProvisioningProfileFromParams(this.options);\n      if (provisioningProfileFromParams) {\n        await useProvisioningProfileFromParams(\n          ctx,\n          appCredentials,\n          this.options.teamId!,\n          provisioningProfileFromParams,\n          distributionCert\n        );\n      } else {\n        await runCredentialsManager(\n          ctx,\n          new SetupIosProvisioningProfile({\n            experienceName,\n            bundleIdentifier,\n            distCert: distributionCert,\n            nonInteractive,\n          })\n        );\n      }\n    } catch (e) {\n      log.error('Failed to set up Provisioning Profile');\n      throw e;\n    }\n  }\n\n  async produceCredentials(ctx: Context, experienceName: string, bundleIdentifier: string) {\n    const appCredentials = await ctx.ios.getAppCredentials(experienceName, bundleIdentifier);\n\n    if (ctx.hasAppleCtx()) {\n      await apple.ensureAppExists(\n        ctx.appleCtx,\n        { experienceName, bundleIdentifier },\n        { enablePushNotifications: true }\n      );\n    }\n    await this._setupDistCert(ctx, experienceName, bundleIdentifier, appCredentials);\n\n    const distributionCert = await ctx.ios.getDistCert(experienceName, bundleIdentifier);\n    if (!distributionCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    await this._setupPushCert(ctx, experienceName, bundleIdentifier, appCredentials);\n\n    await this._setupProvisioningProfile(\n      ctx,\n      experienceName,\n      bundleIdentifier,\n      appCredentials,\n      distributionCert\n    );\n  }\n\n  async clearAndRevokeCredentialsIfRequested(ctx: Context, projectMetadata: any): Promise<void> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const shouldClearAnything =\n      clearCredentials ||\n      clearDistCert ||\n      clearPushKey ||\n      clearPushCert ||\n      clearProvisioningProfile;\n    if (shouldClearAnything) {\n      const { experienceName, bundleIdentifier } = projectMetadata;\n      const credsToClear = this.determineCredentialsToClear();\n      await this.clearCredentials(ctx, experienceName, bundleIdentifier, credsToClear);\n    }\n  }\n\n  async clearCredentials(\n    ctx: Context,\n    experienceName: string,\n    bundleIdentifier: string,\n    credsToClear: Record<string, boolean>\n  ): Promise<void> {\n    const shouldRevokeOnApple = this.options.revokeCredentials;\n    const nonInteractive = this.options.parent && this.options.parent.nonInteractive;\n    const distributionCert = await ctx.ios.getDistCert(experienceName, bundleIdentifier);\n    if (credsToClear.distributionCert && distributionCert) {\n      await new RemoveIosDist(shouldRevokeOnApple, nonInteractive).removeSpecific(\n        ctx,\n        distributionCert\n      );\n    }\n\n    const pushKey = await ctx.ios.getPushKey(experienceName, bundleIdentifier);\n    if (credsToClear.pushKey && pushKey) {\n      await new RemoveIosPush(shouldRevokeOnApple, nonInteractive).removeSpecific(ctx, pushKey);\n    }\n\n    const appCredentials = await ctx.ios.getAppCredentials(experienceName, bundleIdentifier);\n    const provisioningProfile = await ctx.ios.getProvisioningProfile(\n      experienceName,\n      bundleIdentifier\n    );\n    if (credsToClear.provisioningProfile && provisioningProfile) {\n      await new RemoveProvisioningProfile(shouldRevokeOnApple, nonInteractive).removeSpecific(\n        ctx,\n        appCredentials\n      );\n    }\n\n    const pushCert = await ctx.ios.getPushCert(experienceName, bundleIdentifier);\n    if (credsToClear.pushCert && pushCert) {\n      await ctx.ios.deletePushCert(experienceName, bundleIdentifier);\n    }\n  }\n\n  determineCredentialsToClear(): Record<string, boolean> {\n    const {\n      clearCredentials,\n      clearDistCert,\n      clearPushKey,\n      clearPushCert,\n      clearProvisioningProfile,\n    } = this.options;\n    const credsToClearAll = {\n      distributionCert: Boolean(clearCredentials || clearDistCert),\n      pushKey: Boolean(clearCredentials || clearPushKey),\n      // TODO: backward compatibility, remove when all users migrate to push keys\n      pushCert: Boolean(clearCredentials || clearPushCert),\n      provisioningProfile: Boolean(clearCredentials || clearProvisioningProfile),\n    };\n    return pickBy(credsToClearAll);\n  }\n\n  async ensureProjectIsPublished() {\n    if (this.options.publicUrl) {\n      return undefined;\n    } else {\n      return await this.ensureReleaseExists();\n    }\n  }\n\n  platform() {\n    return PLATFORMS.IOS;\n  }\n\n  // validates whether the icon doesn't have transparency\n  async validateIcon() {\n    try {\n      const icon = this.manifest.ios?.icon ?? this.manifest.icon;\n      if (!icon) {\n        // icon is optional\n        return;\n      }\n      await ensurePNGIsNotTransparent(icon);\n    } catch (err) {\n      if (err instanceof XDLError) {\n        throw err;\n      } else {\n        // something weird happened, let's assume the icon is correct\n      }\n    }\n  }\n\n  // warns for \"damaged\" builds when targeting simulator\n  // see: https://github.com/expo/expo-cli/issues/1197\n  maybeWarnDamagedSimulator() {\n    // see: https://en.wikipedia.org/wiki/Darwin_%28operating_system%29#Release_history\n    const isMacOsCatalinaOrLater =\n      os.platform() === 'darwin' && semver.satisfies(os.release(), '>=19.0.0');\n\n    if (isMacOsCatalinaOrLater && this.options.type === 'simulator') {\n      log.newLine();\n      log(\n        chalk.bold(\n          `🚨 If the build is not installable on your simulator because of \"${chalk.underline(\n            `... is damaged and can't be opened.`\n          )}\", please run:`\n        )\n      );\n      log(chalk.grey.bold('xattr -rd com.apple.quarantine /path/to/your.app'));\n    }\n  }\n}\n\nexport default IOSBuilder;\n"],"file":"IOSBuilder.js"}