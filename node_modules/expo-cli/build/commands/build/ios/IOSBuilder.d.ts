import BaseBuilder from '../BaseBuilder';
import * as apple from '../../../appleApi';
import { Context } from '../../../credentials/context';
import { IosAppCredentials, IosDistCredentials } from '../../../credentials/credentials';
declare class IOSBuilder extends BaseBuilder {
    appleCtx?: apple.AppleCtx;
    run(): Promise<void>;
    validateProject(): Promise<void>;
    getAppleCtx(): Promise<apple.AppleCtx>;
    bestEffortAppleCtx(ctx: Context): Promise<void>;
    prepareCredentials(): Promise<void>;
    _setupDistCert(ctx: Context, experienceName: string, bundleIdentifier: string, appCredentials: IosAppCredentials): Promise<void>;
    _setupPushCert(ctx: Context, experienceName: string, bundleIdentifier: string, appCredentials: IosAppCredentials): Promise<void>;
    _setupProvisioningProfile(ctx: Context, experienceName: string, bundleIdentifier: string, appCredentials: IosAppCredentials, distributionCert: IosDistCredentials): Promise<void>;
    produceCredentials(ctx: Context, experienceName: string, bundleIdentifier: string): Promise<void>;
    clearAndRevokeCredentialsIfRequested(ctx: Context, projectMetadata: any): Promise<void>;
    clearCredentials(ctx: Context, experienceName: string, bundleIdentifier: string, credsToClear: Record<string, boolean>): Promise<void>;
    determineCredentialsToClear(): Record<string, boolean>;
    ensureProjectIsPublished(): Promise<string[] | undefined>;
    platform(): "ios";
    validateIcon(): Promise<void>;
    maybeWarnDamagedSimulator(): void;
}
export default IOSBuilder;
