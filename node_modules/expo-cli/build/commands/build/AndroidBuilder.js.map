{"version":3,"sources":["../../../src/commands/build/AndroidBuilder.ts"],"names":["ANDROID","PLATFORMS","AndroidBuilder","BaseBuilder","run","validateProject","Android","checkSplashScreenImages","projectDir","checkForBuildInProgress","collectAndValidateCredentials","publishedExpIds","options","publicUrl","undefined","ensureReleaseExists","checkStatusBeforeBuild","build","utils","checkIfSdkIsSupported","manifest","sdkVersion","androidPackage","android","package","BuildError","test","platform","ctx","Context","init","experienceName","owner","user","username","slug","clearCredentials","parent","nonInteractive","RemoveKeystore","paramKeystore","SetupAndroidKeystore","allowMissingKeystore"],"mappings":"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","sourcesContent":["import { Android } from '@expo/xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport {\n  RemoveKeystore,\n  getKeystoreFromParams,\n  useKeystore,\n} from '../../credentials/views/AndroidKeystore';\nimport { SetupAndroidKeystore } from '../../credentials/views/SetupAndroidKeystore';\nimport BuildError from './BuildError';\nimport BaseBuilder from './BaseBuilder';\nimport * as utils from './utils';\nimport { PLATFORMS, Platform } from './constants';\n\nconst { ANDROID } = PLATFORMS;\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run(): Promise<void> {\n    // Validate project\n    await this.validateProject();\n\n    // Check SplashScreen images sizes\n    await Android.checkSplashScreenImages(this.projectDir);\n\n    // Check the status of any current builds\n    await this.checkForBuildInProgress();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    let publishedExpIds = this.options.publicUrl ? undefined : await this.ensureReleaseExists();\n\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n\n    // Initiate a build\n    await this.build(publishedExpIds);\n  }\n\n  async validateProject() {\n    await utils.checkIfSdkIsSupported(this.manifest.sdkVersion!, ANDROID);\n    const androidPackage = this.manifest.android?.package;\n    if (!androidPackage) {\n      throw new BuildError(`Your project must have an Android package set in app.json\nSee https://docs.expo.io/distribution/building-standalone-apps/#2-configure-appjson`);\n    }\n    if (!/^[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(androidPackage)) {\n      throw new BuildError(\n        \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\"\n      );\n    }\n  }\n\n  platform(): Platform {\n    return ANDROID;\n  }\n\n  async collectAndValidateCredentials(): Promise<void> {\n    const ctx = new Context();\n    await ctx.init(this.projectDir);\n\n    const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;\n\n    if (this.options.clearCredentials) {\n      if (this.options.parent?.nonInteractive) {\n        throw new BuildError(\n          'Clearing your Android build credentials from our build servers is a PERMANENT and IRREVERSIBLE action, it\\'s not supported when combined with the \"--non-interactive\" option'\n        );\n      }\n      await runCredentialsManager(ctx, new RemoveKeystore(experienceName));\n    }\n\n    const paramKeystore = await getKeystoreFromParams(this.options);\n    if (paramKeystore) {\n      await useKeystore(ctx, experienceName, paramKeystore);\n    } else {\n      await runCredentialsManager(\n        ctx,\n        new SetupAndroidKeystore(experienceName, {\n          nonInteractive: this.options.parent?.nonInteractive,\n          allowMissingKeystore: true,\n        })\n      );\n    }\n  }\n}\n"],"file":"AndroidBuilder.js"}