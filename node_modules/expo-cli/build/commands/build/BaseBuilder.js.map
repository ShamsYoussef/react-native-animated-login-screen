{"version":3,"sources":["../../../src/commands/build/BaseBuilder.ts"],"names":["secondsToMilliseconds","seconds","BaseBuilder","constructor","projectDir","options","exp","command","prepareProjectInfo","run","e","BuildError","log","error","message","process","exit","Error","commandCheckStatus","checkStatus","user","UserManager","ensureLoggedInAsync","checkProjectConfig","manifest","isDetached","platform","oldestSupportedMajorVersion","Versions","oldestSupportedMajorVersionAsync","semver","major","sdkVersion","version","newestReleasedSdkVersionAsync","warn","chalk","bold","checkForBuildInProgress","buildStatus","Project","getBuildStatusAsync","current","releaseChannel","publicUrl","jobs","length","err","logBuildStatuses","canPurchasePriorityBuilds","numberOfRemainingPriorityBuilds","hasUnlimitedPriorityBuilds","checkStatusBeforeBuild","reuseStatus","findReusableBuildAsync","slug","canReuse","underline","downloadUrl","username","owner","getCurrentUsernameAsync","forEach","job","i","packageExtension","UrlUtils","constructBuildLogsUrl","id","hasPriorityBuilds","shouldShowUpgradeInfo","priority","status","constructTurtleStatusUrl","artifacts","url","ensureReleaseExists","publish","ids","duringBuild","release","getLatestReleaseAsync","channel","publicationId","publishedTime","wait","buildId","interval","spinner","start","result","filter","succeed","text","fail","build","expIds","bundleIdentifier","ios","opts","PLATFORMS","IOS","type","ANDROID","startBuildAsync","undefined","waitOpts","completedJob","artifactUrl","artifactId","constructArtifactUrl","green","ALL"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { Project, User, UserManager, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport delayAsync from 'delay-async';\nimport ora from 'ora';\nimport semver from 'semver';\n\nimport * as UrlUtils from '../utils/url';\nimport log from '../../log';\nimport { action as publishAction } from '../publish';\nimport BuildError from './BuildError';\nimport { PLATFORMS, Platform } from './constants';\n\nimport { BuilderOptions } from './BaseBuilder.types';\n\nconst secondsToMilliseconds = (seconds: number): number => seconds * 1000;\n\nexport default class BaseBuilder {\n  manifest: ExpoConfig = getConfig(this.projectDir).exp;\n  user?: User;\n\n  constructor(public projectDir: string, public options: BuilderOptions = {}) {}\n\n  async command() {\n    try {\n      await this.prepareProjectInfo();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    throw new Error('`run()` should be overridden');\n  }\n\n  async commandCheckStatus() {\n    try {\n      await this.prepareProjectInfo();\n      await this.checkStatus();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async prepareProjectInfo(): Promise<void> {\n    this.user = await UserManager.ensureLoggedInAsync();\n\n    await this.checkProjectConfig();\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    if (this.manifest.isDetached) {\n      log.error(`'expo build:${this.platform()}' is not supported for detached projects.`);\n      process.exit(1);\n    }\n\n    // Warn user if building a project using the next deprecated SDK version\n    let oldestSupportedMajorVersion = await Versions.oldestSupportedMajorVersionAsync();\n    if (semver.major(this.manifest.sdkVersion!) === oldestSupportedMajorVersion) {\n      let { version } = await Versions.newestReleasedSdkVersionAsync();\n      log.warn(\n        `\\nSDK${oldestSupportedMajorVersion} will be ${chalk.bold(\n          'deprecated'\n        )} next! We recommend upgrading versions, ideally to the latest (SDK${semver.major(\n          version\n        )}), so you can continue to build new binaries of your app and develop in the Expo client.\\n`\n      );\n    }\n  }\n\n  async checkForBuildInProgress() {\n    log('Checking if there is a build in progress...\\n');\n    const buildStatus = await Project.getBuildStatusAsync(this.projectDir, {\n      platform: this.platform(),\n      current: true,\n      releaseChannel: this.options.releaseChannel,\n      publicUrl: this.options.publicUrl,\n      sdkVersion: this.manifest.sdkVersion,\n    } as any);\n\n    if ('jobs' in buildStatus && buildStatus.jobs?.length > 0) {\n      throw new BuildError('Cannot start a new build, as there is already an in-progress build.');\n    }\n  }\n\n  async checkStatus(platform: 'all' | 'ios' | 'android' = 'all'): Promise<void> {\n    log('Fetching build history...\\n');\n\n    const buildStatus = await Project.getBuildStatusAsync(this.projectDir, {\n      platform,\n      current: false,\n      releaseChannel: this.options.releaseChannel,\n    });\n\n    if ('err' in buildStatus && buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    await this.logBuildStatuses({\n      jobs: buildStatus.jobs,\n      canPurchasePriorityBuilds: buildStatus.canPurchasePriorityBuilds,\n      numberOfRemainingPriorityBuilds: buildStatus.numberOfRemainingPriorityBuilds,\n      hasUnlimitedPriorityBuilds: buildStatus.hasUnlimitedPriorityBuilds,\n    });\n  }\n\n  async checkStatusBeforeBuild(): Promise<void> {\n    log('Checking if this build already exists...\\n');\n\n    const reuseStatus = await Project.findReusableBuildAsync(\n      this.options.releaseChannel!,\n      this.platform(),\n      this.manifest.sdkVersion!,\n      this.manifest.slug!\n    );\n    if (reuseStatus.canReuse) {\n      log.warn(`Did you know that Expo provides over-the-air updates?\nPlease see the docs (${chalk.underline(\n        'https://docs.expo.io/guides/configuring-ota-updates/'\n      )}) and check if you can use them instead of building your app binaries again.`);\n\n      log.warn(\n        `There were no new changes from the last build, you can download that build from here: ${chalk.underline(\n          reuseStatus.downloadUrl!\n        )}`\n      );\n    }\n  }\n\n  async logBuildStatuses(buildStatus: {\n    jobs: Array<Record<string, any>>;\n    canPurchasePriorityBuilds: boolean;\n    numberOfRemainingPriorityBuilds: number;\n    hasUnlimitedPriorityBuilds?: boolean;\n  }) {\n    log('=================');\n    log(' Builds Statuses ');\n    log('=================\\n');\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      log(`### ${i} | ${platform} | ${UrlUtils.constructBuildLogsUrl(job.id, username!)} ###`);\n\n      const hasPriorityBuilds =\n        buildStatus.numberOfRemainingPriorityBuilds > 0 || buildStatus.hasUnlimitedPriorityBuilds;\n      const shouldShowUpgradeInfo =\n        !hasPriorityBuilds &&\n        i === 0 &&\n        job.priority === 'normal' &&\n        buildStatus.canPurchasePriorityBuilds;\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = `Build waiting in queue...\\nQueue length: ${chalk.underline(\n            UrlUtils.constructTurtleStatusUrl()\n          )}`;\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nLooks like this build could have been faster.\\nRead more about priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (job.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${job.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      log();\n    });\n  }\n\n  async ensureReleaseExists() {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        duringBuild: true,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      log('Looking for releases...');\n      const release = await Project.getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel!,\n        platform: this.platform(),\n        owner: this.manifest.owner,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `expo publish` first.');\n      }\n      log(\n        `Using existing release on channel \"${release.channel}\":\\n` +\n          `publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(\n    buildId: string,\n    { interval = 30, publicUrl }: { interval?: number; publicUrl?: string } = {}\n  ): Promise<any> {\n    log(\n      `Waiting for build to complete.\\nYou can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL.`\n    );\n    let spinner = ora().start();\n    while (true) {\n      const result = await Project.getBuildStatusAsync(this.projectDir, {\n        current: false,\n        ...(publicUrl ? { publicUrl } : {}),\n      });\n\n      const job = result.jobs?.filter((job: Project.BuildJobFields) => job.id === buildId)[0];\n\n      switch (job.status) {\n        case 'finished':\n          spinner.succeed('Build finished.');\n          return job;\n        case 'pending':\n        case 'sent-to-queue':\n          spinner.text = 'Build queued...';\n          break;\n        case 'started':\n        case 'in-progress':\n          spinner.text = 'Build in progress...';\n          break;\n        case 'errored':\n          spinner.fail('Build failed.');\n          throw new BuildError(`Standalone build failed!`);\n        default:\n          spinner.warn('Unknown status.');\n          throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n      }\n      await delayAsync(secondsToMilliseconds(interval));\n    }\n  }\n\n  async build(expIds?: Array<string>) {\n    const { publicUrl } = this.options;\n    const platform = this.platform();\n    const bundleIdentifier = this.manifest.ios?.bundleIdentifier;\n\n    let opts: Record<string, any> = {\n      expIds,\n      platform,\n      releaseChannel: this.options.releaseChannel,\n      ...(publicUrl ? { publicUrl } : {}),\n    };\n\n    if (platform === PLATFORMS.IOS) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n        bundleIdentifier,\n      };\n    } else if (platform === PLATFORMS.ANDROID) {\n      opts = {\n        ...opts,\n        type: this.options.type,\n      };\n    }\n\n    // call out to build api here with url\n    const result = await Project.startBuildAsync(this.projectDir, opts);\n\n    const { id: buildId, priority, canPurchasePriorityBuilds } = result;\n\n    log('Build started, it may take a few minutes to complete.');\n    log(\n      `You can check the queue length at ${chalk.underline(UrlUtils.constructTurtleStatusUrl())}\\n`\n    );\n    if (priority === 'normal' && canPurchasePriorityBuilds) {\n      log(\n        'You can make this faster. 🐢\\nGet priority builds at: https://expo.io/settings/billing\\n'\n      );\n    }\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    if (buildId) {\n      log(\n        `You can monitor the build at\\n\\n ${chalk.underline(\n          UrlUtils.constructBuildLogsUrl(buildId, username ?? undefined)\n        )}\\n`\n      );\n    }\n\n    if (this.options.wait) {\n      const waitOpts = publicUrl ? { publicUrl } : {};\n      const completedJob = await this.wait(buildId, waitOpts);\n      const artifactUrl = completedJob.artifactId\n        ? UrlUtils.constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      log(`${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`);\n    } else {\n      log('Alternatively, run `expo build:status` to monitor it from the command line.');\n    }\n  }\n\n  platform(): Platform {\n    return PLATFORMS.ALL;\n  }\n}\n"],"file":"BaseBuilder.js"}