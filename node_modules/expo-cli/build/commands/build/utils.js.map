{"version":3,"sources":["../../../src/commands/build/utils.ts"],"names":["checkIfSdkIsSupported","sdkVersion","platform","isSupported","Versions","canTurtleBuildSdkVersion","minimumSdkVersionSupported","oldestSupportedMajorVersionAsync","majorSdkVersion","Number","split","version","latestSDKVersion","newestReleasedSdkVersionAsync","log","error","chalk","red","Error","askBuildType","typeFromFlag","availableTypes","allowedTypes","Object","keys","typeIsInvalid","undefined","includes","join","program","nonInteractive","process","exit","answer","type","name","message","choices","map","title","value","description"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,qBAAf,CACLC,UADK,EAELC,QAFK,EAGU;AACf,QAAMC,WAAW,GAAG,MAAMC,gBAASC,wBAAT,CAAkCJ,UAAlC,EAA8CC,QAA9C,CAA1B;AACA,QAAMI,0BAA0B,GAAG,MAAMF,gBAASG,gCAAT,EAAzC;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACR,UAAU,CAACS,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAA9B;AACA,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAAgC,MAAMR,gBAASS,6BAAT,EAA5C;;AAEA,MAAI,CAACV,WAAL,EAAkB;AAChBW,mBAAIC,KAAJ,CACEC,iBAAMC,GAAN,CACE,gDACGT,eAAe,GAAGF,0BAAlB,GACI,iCAAgCE,eAAgB,oCAAmCF,0BAA2B,mCAAkCM,gBAAiB,IADrK,GAEI,8BAA6BJ,eAAgB,oCAAmCI,gBAAiB,GAHxG,CADF,CADF;;AAQA,UAAM,IAAIM,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF;;AAEM,eAAeC,YAAf,CACLC,YADK,EAELC,cAFK,EAGL;AACA,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,cAAZ,CAArB;AACA,QAAMI,aAAa,GAAGL,YAAY,KAAKM,SAAjB,IAA8B,CAACJ,YAAY,CAACK,QAAb,CAAsBP,YAAtB,CAArD;;AAEA,MAAIA,YAAY,IAAI,CAACK,aAArB,EAAoC;AAClC,WAAOL,YAAP;AACD;;AAED,MAAIK,aAAJ,EAAmB;AACjBX,mBAAIC,KAAJ,CAAW,8BAA6BO,YAAY,CAACM,IAAb,CAAkB,IAAlB,CAAwB,GAAhE;;AAEA,QAAIC,qBAAQC,cAAZ,EAA4B;AAC1BC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF;;AAED,MAAI,CAACZ,YAAD,IAAiBS,qBAAQC,cAA7B,EAA6C;AAC3C,WAAOR,YAAY,CAAC,CAAD,CAAnB;AACD;;AAED,QAAM;AAAEW,IAAAA;AAAF,MAAa,MAAM,wBAAQ;AAC/BC,IAAAA,IAAI,EAAE,QADyB;AAE/BC,IAAAA,IAAI,EAAE,QAFyB;AAG/BC,IAAAA,OAAO,EAAE,uCAHsB;AAI/BC,IAAAA,OAAO,EAAEf,YAAY,CAACgB,GAAb,CAAiBJ,IAAI,KAAK;AACjCK,MAAAA,KAAK,EAAEL,IAD0B;AAEjCM,MAAAA,KAAK,EAAEN,IAF0B;AAGjCO,MAAAA,WAAW,EAAEpB,cAAc,CAACa,IAAD;AAHM,KAAL,CAArB;AAJsB,GAAR,CAAzB;AAWA,SAAOD,MAAP;AACD","sourcesContent":["import { Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program from 'commander';\n\nimport log from '../../log';\nimport prompts from '../../prompts';\n\nexport async function checkIfSdkIsSupported(\n  sdkVersion: string,\n  platform: 'android' | 'ios'\n): Promise<void> {\n  const isSupported = await Versions.canTurtleBuildSdkVersion(sdkVersion, platform);\n  const minimumSdkVersionSupported = await Versions.oldestSupportedMajorVersionAsync();\n  const majorSdkVersion = Number(sdkVersion.split('.')[0]);\n  const { version: latestSDKVersion } = await Versions.newestReleasedSdkVersionAsync();\n\n  if (!isSupported) {\n    log.error(\n      chalk.red(\n        'Unsupported SDK version: our app builders ' +\n          (majorSdkVersion < minimumSdkVersionSupported\n            ? `no longer support SDK version ${majorSdkVersion}. Please upgrade to at least SDK ${minimumSdkVersionSupported}, or to the latest SDK version (${latestSDKVersion}).`\n            : `do not support SDK version ${majorSdkVersion}, yet. The latest SDK version is ${latestSDKVersion}.`)\n      )\n    );\n    throw new Error('Unsupported SDK version');\n  }\n}\n\nexport async function askBuildType<T extends string>(\n  typeFromFlag: T,\n  availableTypes: Record<T, string>\n) {\n  const allowedTypes = Object.keys(availableTypes) as T[];\n  const typeIsInvalid = typeFromFlag !== undefined && !allowedTypes.includes(typeFromFlag);\n\n  if (typeFromFlag && !typeIsInvalid) {\n    return typeFromFlag;\n  }\n\n  if (typeIsInvalid) {\n    log.error(`Build type must be one of (${allowedTypes.join(', ')})`);\n\n    if (program.nonInteractive) {\n      process.exit(1);\n    }\n  }\n\n  if (!typeFromFlag && program.nonInteractive) {\n    return allowedTypes[0];\n  }\n\n  const { answer } = await prompts({\n    type: 'select',\n    name: 'answer',\n    message: 'Choose the build type you would like:',\n    choices: allowedTypes.map(type => ({\n      title: type,\n      value: type,\n      description: availableTypes[type],\n    })),\n  });\n\n  return answer as T;\n}\n"],"file":"utils.js"}