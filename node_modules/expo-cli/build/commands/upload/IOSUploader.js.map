{"version":3,"sources":["../../../src/commands/upload/IOSUploader.ts"],"names":["PLATFORM","APPLE_CREDS_QUESTIONS","type","name","message","validate","nonEmptyInput","APP_NAME_TOO_LONG_MSG","APP_NAME_QUESTION","appName","length","LANGUAGES","IOSUploader","BaseUploader","validateOptions","options","language","includes","Error","publicUrl","UrlUtils","isHttps","CommandError","constructor","projectDir","_ensureExperienceIsValid","exp","ios","bundleIdentifier","_getPlatformSpecificOptions","appleIdCrentials","_getAppleIdCredentials","appleTeamId","_getAppleTeamId","_getAppName","otherOptions","credentialMetadata","Credentials","getCredentialMetadataAsync","credential","getCredentialsForPlatform","teamId","team","id","appleCredsKeys","result","process","env","EXPO_APPLE_ID","appleId","EXPO_APPLE_ID_PASSWORD","appleIdPassword","credsPresent","Object","keys","questions","filter","answers","_exp","log","error","_askForAppName","_uploadToTheStore","platformData","buildPath","fastlane","companyName","appleCreds","itc_team_id","itcTeamId","resolveItcTeamId","updatedAppleCreds","appProduce","err","match","pilotUpload","chalk","underline"],"mappings":"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","sourcesContent":["import { Credentials, UrlUtils } from '@expo/xdl';\nimport { ExpoConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport pick from 'lodash/pick';\nimport intersection from 'lodash/intersection';\n\nimport BaseUploader, { PlatformOptions } from './BaseUploader';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\nimport { runFastlaneAsync } from './utils';\nimport CommandError from '../../CommandError';\nimport { nonEmptyInput } from '../../validators';\nimport { authenticate } from '../../appleApi';\n\nconst PLATFORM = 'ios';\n\nconst APPLE_CREDS_QUESTIONS: Question[] = [\n  {\n    type: 'input',\n    name: 'appleId',\n    message: `What's your Apple ID?`,\n    validate: nonEmptyInput,\n  },\n  {\n    type: 'password',\n    name: 'appleIdPassword',\n    message: 'Password?',\n    validate: nonEmptyInput,\n  },\n];\n\nconst APP_NAME_TOO_LONG_MSG = `An app name can't be longer than 30 characters.`;\nconst APP_NAME_QUESTION: Question = {\n  type: 'input',\n  name: 'appName',\n  message: 'How would you like to name your app?',\n  validate(appName: string): string | true {\n    if (!appName) {\n      return 'Empty app name is not valid.';\n    } else if (appName.length > 30) {\n      return APP_NAME_TOO_LONG_MSG;\n    } else {\n      return true;\n    }\n  },\n};\n\nexport const LANGUAGES = [\n  'Brazilian Portuguese',\n  'Danish',\n  'Dutch',\n  'English',\n  'English_Australian',\n  'English_CA',\n  'English_UK',\n  'Finnish',\n  'French',\n  'French_CA',\n  'German',\n  'Greek',\n  'Indonesian',\n  'Italian',\n  'Japanese',\n  'Korean',\n  'Malay',\n  'Norwegian',\n  'Portuguese',\n  'Russian',\n  'Simplified Chinese',\n  'Spanish',\n  'Spanish_MX',\n  'Swedish',\n  'Thai',\n  'Traditional Chinese',\n  'Turkish',\n  'Vietnamese',\n];\n\nexport type IosPlatformOptions = PlatformOptions & {\n  appleId?: string;\n  appleIdPassword?: string;\n  appName: string;\n  language?: string;\n  appleTeamId?: string;\n  publicUrl?: string;\n  companyName?: string;\n};\n\ntype AppleCreds = Pick<IosPlatformOptions, 'appleId' | 'appleIdPassword'>;\n\ninterface AppleIdCredentials {\n  appleId: string;\n  appleIdPassword: string;\n}\n\nexport default class IOSUploader extends BaseUploader {\n  static validateOptions(options: IosPlatformOptions): void {\n    if (options.language && !LANGUAGES.includes(options.language)) {\n      throw new Error(\n        `You must specify a supported language. Run expo upload:ios --help to see the list of supported languages.`\n      );\n    }\n    if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n      throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n    }\n  }\n\n  constructor(projectDir: string, public options: IosPlatformOptions) {\n    super(PLATFORM, projectDir, options);\n  }\n\n  _ensureExperienceIsValid(exp: ExpoConfig): void {\n    if (!exp.ios?.bundleIdentifier) {\n      throw new Error(`You must specify an iOS bundle identifier in app.json.`);\n    }\n  }\n\n  async _getPlatformSpecificOptions(): Promise<{ [key: string]: any }> {\n    const appleIdCrentials = await this._getAppleIdCredentials();\n    const appleTeamId = await this._getAppleTeamId(appleIdCrentials);\n    const appName = await this._getAppName();\n    const otherOptions = pick(this.options, ['language', 'sku', 'companyName']);\n    return {\n      ...appleIdCrentials,\n      appName,\n      ...otherOptions,\n      appleTeamId,\n    };\n  }\n\n  async _getAppleTeamId(appleIdCrentials: AppleIdCredentials): Promise<string | undefined> {\n    const credentialMetadata = await Credentials.getCredentialMetadataAsync(this.projectDir, 'ios');\n    const credential = await Credentials.getCredentialsForPlatform(credentialMetadata);\n    let teamId = credential?.teamId;\n    if (teamId) {\n      return teamId;\n    } else {\n      const { team } = await authenticate(appleIdCrentials);\n      return team.id;\n    }\n  }\n\n  async _getAppleIdCredentials(): Promise<AppleIdCredentials> {\n    const appleCredsKeys = ['appleId', 'appleIdPassword'];\n    const result: AppleCreds = pick(this.options, appleCredsKeys);\n\n    if (process.env.EXPO_APPLE_ID) {\n      result.appleId = process.env.EXPO_APPLE_ID;\n    }\n    if (process.env.EXPO_APPLE_ID_PASSWORD) {\n      result.appleIdPassword = process.env.EXPO_APPLE_ID_PASSWORD;\n    }\n\n    const { appleId, appleIdPassword } = result;\n    if (appleId && appleIdPassword) {\n      return {\n        appleId,\n        appleIdPassword,\n      };\n    }\n    const credsPresent = intersection(Object.keys(result), appleCredsKeys);\n\n    const questions = APPLE_CREDS_QUESTIONS.filter(({ name }) => {\n      return name && !credsPresent.includes(name);\n    });\n    const answers = await prompt(questions);\n    return {\n      appleId: appleId || answers.appleId,\n      appleIdPassword: appleIdPassword || answers.appleIdPassword,\n    };\n  }\n\n  async _getAppName(): Promise<string> {\n    const appName = this.options.appName || (this._exp && this._exp.name);\n    if (!appName || appName.length > 30) {\n      if (appName && appName.length > 30) {\n        log.error(APP_NAME_TOO_LONG_MSG);\n      }\n      return await this._askForAppName();\n    } else {\n      return appName;\n    }\n  }\n\n  async _askForAppName(): Promise<string> {\n    const { appName } = await prompt(APP_NAME_QUESTION);\n    return appName;\n  }\n\n  async _uploadToTheStore(platformData: IosPlatformOptions, buildPath: string): Promise<void> {\n    const { fastlane } = this;\n    const { appleId, appleIdPassword, appName, language, appleTeamId, companyName } = platformData;\n\n    const appleCreds = { appleId, appleIdPassword, appleTeamId, companyName };\n\n    log('Resolving the ITC team ID...');\n    const { itc_team_id: itcTeamId } = await runFastlaneAsync(\n      fastlane.resolveItcTeamId,\n      [],\n      appleCreds\n    );\n    log(`ITC team ID is ${itcTeamId}`);\n    const updatedAppleCreds = {\n      ...appleCreds,\n      itcTeamId,\n    };\n\n    log('Ensuring the app exists on App Store Connect, this may take a while...');\n    try {\n      await runFastlaneAsync(\n        fastlane.appProduce,\n        [this._exp?.ios?.bundleIdentifier, appName, appleId, language],\n        updatedAppleCreds\n      );\n    } catch (err) {\n      if (err.message.match(/You must provide a company name to use on the App Store/)) {\n        log.error(\n          'You haven\\'t uploaded any app to App Store yet. Please provide your company name with --company-name \"COMPANY NAME\"'\n        );\n      }\n      throw err;\n    }\n\n    log('Uploading the app to Testflight, hold tight...');\n    await runFastlaneAsync(fastlane.pilotUpload, [buildPath, appleId], updatedAppleCreds);\n\n    log(\n      `All done! You may want to go to App Store Connect (${chalk.underline(\n        'https://appstoreconnect.apple.com'\n      )}) and share your build with your testers.`\n    );\n  }\n}\n"],"file":"IOSUploader.js"}