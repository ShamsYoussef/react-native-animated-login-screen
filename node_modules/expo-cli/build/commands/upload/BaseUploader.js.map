{"version":3,"sources":["../../../src/commands/upload/BaseUploader.ts"],"names":["BaseUploader","constructor","platform","projectDir","options","fastlane","require","upload","_getProjectConfig","platformData","_getPlatformSpecificOptions","buildPath","_getBinaryFilePath","_uploadToTheStore","_removeBuildFileIfDownloaded","chalk","underline","exp","skipSDKVersionRequirement","_ensureExperienceIsValid","_exp","path","id","url","_downloadBuildById","_downloadBuild","_downloadLastestBuild","slug","_getSlug","owner","_getOwner","build","StandaloneBuild","getStandaloneBuildById","Error","artifacts","undefined","builds","getStandaloneBuilds","length","urlOrPath","filename","basename","destinationPath","fs","pathExists","remove","startsWith","copy"],"mappings":"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","sourcesContent":["import { ExpoConfig, Platform, getConfig } from '@expo/config';\nimport { StandaloneBuild } from '@expo/xdl';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport log from '../../log';\nimport { downloadFile } from './utils';\n\nexport type PlatformOptions = {\n  id?: string;\n  path?: string;\n  url?: string;\n};\n\nexport default class BaseUploader {\n  _exp?: ExpoConfig;\n  fastlane: { [key: string]: string };\n\n  constructor(\n    public platform: Platform,\n    public projectDir: string,\n    public options: PlatformOptions\n  ) {\n    // it has to happen in constructor because we don't want to load this module on a different platform than darwin\n    this.fastlane = require('@expo/traveling-fastlane-darwin')();\n  }\n\n  async upload(): Promise<void> {\n    await this._getProjectConfig();\n    const platformData = await this._getPlatformSpecificOptions();\n    const buildPath = await this._getBinaryFilePath();\n    await this._uploadToTheStore(platformData, buildPath);\n    await this._removeBuildFileIfDownloaded(buildPath);\n    log(\n      `Please also see our docs (${chalk.underline(\n        'https://docs.expo.io/distribution/uploading-apps/'\n      )}) to learn more about the upload process.`\n    );\n  }\n\n  async _getProjectConfig(): Promise<void> {\n    const { exp } = getConfig(this.projectDir, {\n      skipSDKVersionRequirement: true,\n    });\n    this._ensureExperienceIsValid(exp);\n    this._exp = exp;\n  }\n\n  async _getBinaryFilePath(): Promise<string> {\n    const { path, id, url } = this.options;\n    if (path) {\n      return path;\n    } else if (id) {\n      return this._downloadBuildById(id);\n    } else if (url) {\n      return this._downloadBuild(url);\n    } else {\n      return this._downloadLastestBuild();\n    }\n  }\n\n  async _downloadBuildById(id: string): Promise<string> {\n    const { platform } = this;\n    const slug = this._getSlug();\n    const owner = this._getOwner();\n    const build = await StandaloneBuild.getStandaloneBuildById({ id, slug, platform, owner });\n    if (!build) {\n      throw new Error(`We couldn't find build with id ${id}`);\n    }\n    return this._downloadBuild(build.artifacts.url);\n  }\n\n  _getSlug(): string {\n    if (!this._exp || !this._exp.slug) {\n      throw new Error(`slug doesn't exist`);\n    }\n    return this._exp.slug;\n  }\n\n  _getOwner(): string | undefined {\n    if (!this._exp || !this._exp.owner) {\n      return undefined;\n    }\n    return this._exp.owner;\n  }\n\n  async _downloadLastestBuild() {\n    const { platform } = this;\n\n    const slug = this._getSlug();\n    const owner = this._getOwner();\n    const builds = await StandaloneBuild.getStandaloneBuilds(\n      {\n        slug,\n        owner,\n        platform,\n      },\n      1\n    );\n    if (builds.length === 0) {\n      throw new Error(\n        `There are no builds on the Expo servers, please run 'expo build:${platform}' first`\n      );\n    }\n    return this._downloadBuild(builds[0].artifacts.url);\n  }\n\n  async _downloadBuild(urlOrPath: string): Promise<string> {\n    const filename = path.basename(urlOrPath);\n    const destinationPath = `/tmp/${filename}`;\n    if (await fs.pathExists(destinationPath)) {\n      await fs.remove(destinationPath);\n    }\n    if (urlOrPath.startsWith('/')) {\n      await fs.copy(urlOrPath, destinationPath);\n      return destinationPath;\n    } else {\n      log(`Downloading build from ${urlOrPath}`);\n      return await downloadFile(urlOrPath, destinationPath);\n    }\n  }\n\n  async _removeBuildFileIfDownloaded(buildPath: string): Promise<void> {\n    if (!this.options.path) {\n      await fs.remove(buildPath);\n    }\n  }\n\n  _ensureExperienceIsValid(exp: ExpoConfig): void {\n    throw new Error('Not implemented');\n  }\n\n  async _getPlatformSpecificOptions(): Promise<{ [key: string]: any }> {\n    throw new Error('Not implemented');\n  }\n\n  async _uploadToTheStore(platformData: PlatformOptions, buildPath: string): Promise<void> {\n    throw new Error('Not implemented');\n  }\n}\n"],"file":"BaseUploader.js"}