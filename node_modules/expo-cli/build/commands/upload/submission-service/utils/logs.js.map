{"version":3,"sources":["../../../../../src/commands/upload/submission-service/utils/logs.ts"],"names":["displayLogs","submission","status","verbose","printedUnknownError","SubmissionStatus","ERRORED","submissionInfo","error","downloadAndPrintSubmissionLogs","logsUrl","body","data","got","get","logs","parseLogs","log","addNewLineIfNone","prefix","chalk","blueBright","level","msg","msgWithPrefix","warn","lines","split","result","line","parsedLine","JSON","parse","levelNumber","push"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,WAAf,CACEC,UADF,EAEEC,MAFF,EAGEC,OAHF,EAIiB;AAAA;;AACf,MAAIC,mBAAmB,GAAG,KAA1B;;AACA,MAAIF,MAAM,KAAKG,sCAAiBC,OAA5B,KAAuCL,UAAvC,aAAuCA,UAAvC,gDAAuCA,UAAU,CAAEM,cAAnD,0DAAuC,sBAA4BC,KAAnE,CAAJ,EAA8E;AAC5EJ,IAAAA,mBAAmB,GAAG,oCAAqBH,UAAU,CAACM,cAAX,CAA0BC,KAA/C,CAAtB;AACD;;AACD,MAAI,CAACJ,mBAAmB,IAAID,OAAxB,KAAoCF,UAAxC,EAAoD;AAClD,UAAMQ,8BAA8B,CAACR,UAAD,CAApC;AACD;AACF;;AAED,eAAeQ,8BAAf,CAA8CR,UAA9C,EAAqF;AAAA;;AACnF,MAAI,4BAACA,UAAU,CAACM,cAAZ,2DAAC,uBAA2BG,OAA5B,CAAJ,EAAyC;AACvC;AACD;;AACD,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiB,MAAMC,eAAIC,GAAJ,CAAQb,UAAU,CAACM,cAAX,CAA0BG,OAAlC,CAA7B;AACA,QAAMK,IAAI,GAAGC,SAAS,CAACJ,IAAD,CAAtB;;AACAK,iBAAIC,gBAAJ;;AACA,QAAMC,MAAM,GAAGF,eAAIG,KAAJ,CAAUC,UAAV,CAAqB,SAArB,CAAf;;AACA,OAAK,MAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAX,IAA6BR,IAA7B,EAAmC;AACjC,UAAMS,aAAa,GAAI,GAAEL,MAAO,GAAEI,GAAI,EAAtC;;AACA,QAAID,KAAK,KAAK,OAAd,EAAuB;AACrBL,qBAAIT,KAAJ,CAAUgB,aAAV;AACD,KAFD,MAEO,IAAIF,KAAK,KAAK,MAAd,EAAsB;AAC3BL,qBAAIQ,IAAJ,CAASD,aAAT;AACD,KAFM,MAEA;AACL,0BAAIA,aAAJ;AACD;AACF;AACF;;AAOD,SAASR,SAAT,CAAmBD,IAAnB,EAAwC;AACtC,QAAMW,KAAK,GAAGX,IAAI,CAACY,KAAL,CAAW,IAAX,CAAd;AACA,QAAMC,MAAa,GAAG,EAAtB;;AACA,OAAK,MAAMC,IAAX,IAAmBH,KAAnB,EAA0B;AACxB,QAAII,UAAJ;;AACA,QAAI;AACFA,MAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAb;AACD,KAFD,CAEE,OAAOrB,KAAP,EAAc;AACd;AACD;;AACD,QAAIc,KAAJ;AACA,UAAM;AAAEA,MAAAA,KAAK,EAAEW,WAAT;AAAsBV,MAAAA;AAAtB,QAA8BO,UAApC;;AACA,QAAIG,WAAW,IAAI,EAAnB,EAAuB;AACrBX,MAAAA,KAAK,GAAG,OAAR;AACD,KAFD,MAEO,IAAIW,WAAW,IAAI,EAAnB,EAAuB;AAC5BX,MAAAA,KAAK,GAAG,MAAR;AACD,KAFM,MAEA;AACLA,MAAAA,KAAK,GAAG,MAAR;AACD;;AACDM,IAAAA,MAAM,CAACM,IAAP,CAAY;AAAEZ,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAZ;AACD;;AACD,SAAOK,MAAP;AACD","sourcesContent":["import got from 'got';\n\nimport log from '../../../../log';\nimport { Submission, SubmissionStatus } from '../SubmissionService.types';\nimport { printSubmissionError } from './errors';\n\nasync function displayLogs(\n  submission: Submission | null,\n  status: SubmissionStatus | null,\n  verbose: boolean\n): Promise<void> {\n  let printedUnknownError = false;\n  if (status === SubmissionStatus.ERRORED && submission?.submissionInfo?.error) {\n    printedUnknownError = printSubmissionError(submission.submissionInfo.error);\n  }\n  if ((printedUnknownError || verbose) && submission) {\n    await downloadAndPrintSubmissionLogs(submission);\n  }\n}\n\nasync function downloadAndPrintSubmissionLogs(submission: Submission): Promise<void> {\n  if (!submission.submissionInfo?.logsUrl) {\n    return;\n  }\n  const { body: data } = await got.get(submission.submissionInfo.logsUrl);\n  const logs = parseLogs(data);\n  log.addNewLineIfNone();\n  const prefix = log.chalk.blueBright('[logs] ');\n  for (const { level, msg } of logs) {\n    const msgWithPrefix = `${prefix}${msg}`;\n    if (level === 'error') {\n      log.error(msgWithPrefix);\n    } else if (level === 'warn') {\n      log.warn(msgWithPrefix);\n    } else {\n      log(msgWithPrefix);\n    }\n  }\n}\n\ninterface Log {\n  level: 'error' | 'warn' | 'info';\n  msg: string;\n}\n\nfunction parseLogs(logs: string): Log[] {\n  const lines = logs.split('\\n');\n  const result: Log[] = [];\n  for (const line of lines) {\n    let parsedLine;\n    try {\n      parsedLine = JSON.parse(line);\n    } catch (error) {\n      continue;\n    }\n    let level: Log['level'];\n    const { level: levelNumber, msg } = parsedLine;\n    if (levelNumber >= 50) {\n      level = 'error';\n    } else if (levelNumber >= 40) {\n      level = 'warn';\n    } else {\n      level = 'info';\n    }\n    result.push({ level, msg });\n  }\n  return result;\n}\n\nexport { displayLogs };\n"],"file":"logs.js"}