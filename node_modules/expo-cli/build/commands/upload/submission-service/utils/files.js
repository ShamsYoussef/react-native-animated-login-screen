"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadAppArchiveAsync = downloadAppArchiveAsync;
exports.uploadAppArchiveAsync = uploadAppArchiveAsync;

function _stream() {
  const data = _interopRequireDefault(require("stream"));

  _stream = function () {
    return data;
  };

  return data;
}

function _util() {
  const data = require("util");

  _util = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _got() {
  const data = _interopRequireDefault(require("got"));

  _got = function () {
    return data;
  };

  return data;
}

function _uploads() {
  const data = require("../../../../uploads");

  _uploads = function () {
    return data;
  };

  return data;
}

function _progress() {
  const data = require("../../../utils/progress");

  _progress = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const pipeline = (0, _util().promisify)(_stream().default.pipeline);

async function downloadAppArchiveAsync(url, dest) {
  const downloadStream = _got().default.stream(url).on('downloadProgress', (0, _progress().createProgressTracker)());

  await pipeline(downloadStream, _fsExtra().default.createWriteStream(dest));
  return dest;
}

async function uploadAppArchiveAsync(path) {
  const fileSize = (await _fsExtra().default.stat(path)).size;
  return await (0, _uploads().uploadAsync)(_uploads().UploadType.SUBMISSION_APP_ARCHIVE, path, (0, _progress().createProgressTracker)(fileSize));
}
//# sourceMappingURL=files.js.map