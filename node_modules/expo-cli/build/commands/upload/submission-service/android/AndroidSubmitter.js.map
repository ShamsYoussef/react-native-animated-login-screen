{"version":3,"sources":["../../../../../src/commands/upload/submission-service/android/AndroidSubmitter.ts"],"names":["AndroidSubmitter","constructor","ctx","options","submitAsync","resolvedSourceOptions","resolveSourceOptions","mode","SubmissionMode","online","submitOnlineAsync","submitOfflineAsync","user","UserManager","ensureLoggedInAsync","exp","projectDir","projectId","accountName","owner","username","projectName","slug","submissionConfig","AndroidOnlineSubmitter","formatSubmissionConfigAndPrintSummary","onlineSubmitter","commandOptions","verbose","AndroidOfflineSubmitter","offlineSubmitter","androidPackage","androidPackageSource","archive","archiveSource","serviceAccountPath","serviceAccountSource","archivePath","location","archiveType","type","printSummary","offline","track","releaseStatus","travelingFastlanePkgName","resolveTravelingFastlanePkgName","travelingFastlane","require","args","push","supplyAndroid","startsWith","os","tmpdir","fs","remove","osPlatform","platform","serviceAccount","readFile","archiveUrl","scheduleSpinner","start","submissionId","SubmissionService","startSubmissionAsync","Platform","ANDROID","succeed","err","fail","submissionCompleted","submissionStatus","submission","submissionSpinner","DEFAULT_CHECK_INTERVAL_MS","getSubmissionAsync","text","getStatusText","status","SubmissionStatus","ERRORED","FINISHED","IN_QUEUE","IN_PROGRESS","Error","SummaryHumanReadableKeys","SummaryHumanReadableValues","path","breakWord","url","word","chars","map","arr","join","summary","table","Table","colWidths","wordWrap","colSpan","content","log","chalk","bold","hAlign","key","value","Object","entries","displayKey","displayValue","console","info","toString"],"mappings":"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","sourcesContent":["import os from 'os';\n\nimport { UserManager } from '@expo/xdl';\nimport Table from 'cli-table3';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport chunk from 'lodash/chunk';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\n\nimport {\n  AndroidSubmissionConfig,\n  ArchiveType,\n  ReleaseStatus,\n  ReleaseTrack,\n} from './AndroidSubmissionConfig';\nimport { ServiceAccountSource, getServiceAccountAsync } from './ServiceAccountSource';\nimport { AndroidPackageSource, getAndroidPackageAsync } from './AndroidPackageSource';\nimport { AndroidSubmissionContext } from './types';\n\nimport SubmissionService, { DEFAULT_CHECK_INTERVAL_MS } from '../SubmissionService';\nimport { Platform, Submission, SubmissionStatus } from '../SubmissionService.types';\nimport { Archive, ArchiveSource, getArchiveAsync } from '../archive-source';\nimport { displayLogs } from '../utils/logs';\nimport { runTravelingFastlaneAsync } from '../utils/travelingFastlane';\nimport { SubmissionMode } from '../types';\nimport { getExpoConfig } from '../utils/config';\nimport { sleep } from '../../../utils/promise';\nimport log from '../../../../log';\nimport { ensureProjectExistsAsync } from '../../../../projects';\n\nexport interface AndroidSubmissionOptions\n  extends Pick<AndroidSubmissionConfig, 'track' | 'releaseStatus'> {\n  androidPackageSource: AndroidPackageSource;\n  archiveSource: ArchiveSource;\n  serviceAccountSource: ServiceAccountSource;\n}\n\ninterface ResolvedSourceOptions {\n  androidPackage: string;\n  archive: Archive;\n  serviceAccountPath: string;\n}\n\nclass AndroidSubmitter {\n  constructor(private ctx: AndroidSubmissionContext, private options: AndroidSubmissionOptions) {}\n\n  async submitAsync(): Promise<void> {\n    const resolvedSourceOptions = await this.resolveSourceOptions();\n    if (this.ctx.mode === SubmissionMode.online) {\n      await this.submitOnlineAsync(resolvedSourceOptions);\n    } else {\n      await this.submitOfflineAsync(resolvedSourceOptions);\n    }\n  }\n\n  private async submitOnlineAsync(resolvedSourceOptions: ResolvedSourceOptions): Promise<void> {\n    let user = await UserManager.ensureLoggedInAsync();\n    const exp = getExpoConfig(this.ctx.projectDir);\n    const projectId = await ensureProjectExistsAsync(user, {\n      accountName: exp.owner || user.username,\n      projectName: exp.slug,\n    });\n    const submissionConfig = await AndroidOnlineSubmitter.formatSubmissionConfigAndPrintSummary(\n      { ...this.options, projectId },\n      resolvedSourceOptions\n    );\n    const onlineSubmitter = new AndroidOnlineSubmitter(\n      submissionConfig,\n      this.ctx.commandOptions.verbose ?? false\n    );\n    await onlineSubmitter.submitAsync();\n  }\n\n  private async submitOfflineAsync(resolvedSourceOptions: ResolvedSourceOptions) {\n    const submissionConfig = await AndroidOfflineSubmitter.formatSubmissionConfigAndPrintSummary(\n      this.options,\n      resolvedSourceOptions\n    );\n    const offlineSubmitter = new AndroidOfflineSubmitter(submissionConfig);\n    await offlineSubmitter.submitAsync();\n  }\n\n  private async resolveSourceOptions(): Promise<ResolvedSourceOptions> {\n    const androidPackage = await getAndroidPackageAsync(this.options.androidPackageSource);\n    const archive = await getArchiveAsync(this.ctx.mode, this.options.archiveSource);\n    const serviceAccountPath = await getServiceAccountAsync(this.options.serviceAccountSource);\n    return {\n      androidPackage,\n      archive,\n      serviceAccountPath,\n    };\n  }\n}\n\ninterface AndroidOfflineSubmissionConfig\n  extends Pick<\n    AndroidSubmissionConfig,\n    'archiveType' | 'track' | 'releaseStatus' | 'androidPackage'\n  > {\n  archivePath: string;\n  serviceAccountPath: string;\n}\n\nclass AndroidOfflineSubmitter {\n  static async formatSubmissionConfigAndPrintSummary(\n    options: AndroidSubmissionOptions,\n    { archive, androidPackage, serviceAccountPath }: ResolvedSourceOptions\n  ): Promise<AndroidOfflineSubmissionConfig> {\n    const submissionConfig = {\n      androidPackage,\n      archivePath: archive.location,\n      archiveType: archive.type,\n      serviceAccountPath,\n      ...pick(options, 'track', 'releaseStatus'),\n    };\n    printSummary({\n      ...omit(submissionConfig, 'serviceAccount'),\n      mode: SubmissionMode.offline,\n    });\n    return submissionConfig;\n  }\n\n  constructor(private submissionConfig: AndroidOfflineSubmissionConfig) {}\n\n  async submitAsync(): Promise<void> {\n    const {\n      archivePath,\n      archiveType,\n      androidPackage,\n      serviceAccountPath,\n      track,\n      releaseStatus,\n    } = this.submissionConfig;\n\n    const travelingFastlanePkgName = this.resolveTravelingFastlanePkgName();\n    const travelingFastlane = require(travelingFastlanePkgName)();\n    const args = [archivePath, androidPackage, serviceAccountPath, track, archiveType];\n    if (releaseStatus) {\n      args.push(releaseStatus);\n    }\n    try {\n      await runTravelingFastlaneAsync(travelingFastlane.supplyAndroid, args);\n    } finally {\n      if (archivePath.startsWith(os.tmpdir())) {\n        await fs.remove(archivePath);\n      }\n    }\n  }\n\n  private resolveTravelingFastlanePkgName(): string {\n    const osPlatform = os.platform();\n    if (osPlatform === 'darwin') {\n      return '@expo/traveling-fastlane-darwin';\n    } else {\n      return '@expo/traveling-fastlane-linux';\n    }\n  }\n}\n\nexport type AndroidOnlineSubmissionConfig = AndroidSubmissionConfig & { projectId: string };\ninterface AndroidOnlineSubmissionOptions extends AndroidSubmissionOptions {\n  projectId: string;\n}\n\nclass AndroidOnlineSubmitter {\n  static async formatSubmissionConfigAndPrintSummary(\n    options: AndroidOnlineSubmissionOptions,\n    { archive, androidPackage, serviceAccountPath }: ResolvedSourceOptions\n  ): Promise<AndroidOnlineSubmissionConfig> {\n    const serviceAccount = await fs.readFile(serviceAccountPath, 'utf-8');\n    const submissionConfig = {\n      androidPackage,\n      archiveUrl: archive.location,\n      archiveType: archive.type,\n      serviceAccount,\n      ...pick(options, 'track', 'releaseStatus', 'projectId'),\n    };\n    printSummary({\n      ...omit(submissionConfig, 'serviceAccount'),\n      serviceAccountPath,\n      mode: SubmissionMode.online,\n    });\n    return submissionConfig;\n  }\n\n  constructor(\n    private submissionConfig: AndroidOnlineSubmissionConfig,\n    private verbose: boolean = false\n  ) {}\n\n  async submitAsync(): Promise<void> {\n    const scheduleSpinner = ora('Scheduling submission').start();\n    let submissionId: string;\n    try {\n      submissionId = await SubmissionService.startSubmissionAsync(\n        Platform.ANDROID,\n        this.submissionConfig.projectId,\n        this.submissionConfig\n      );\n      scheduleSpinner.succeed();\n    } catch (err) {\n      scheduleSpinner.fail('Failed to schedule submission');\n      throw err;\n    }\n\n    let submissionCompleted = false;\n    let submissionStatus: SubmissionStatus | null = null;\n    let submission: Submission | null = null;\n    const submissionSpinner = ora('Submitting your app to Google Play Store').start();\n    try {\n      while (!submissionCompleted) {\n        await sleep(DEFAULT_CHECK_INTERVAL_MS);\n        submission = await SubmissionService.getSubmissionAsync(\n          this.submissionConfig.projectId,\n          submissionId\n        );\n        submissionSpinner.text = AndroidOnlineSubmitter.getStatusText(submission.status);\n        submissionStatus = submission.status;\n        if (submissionStatus === SubmissionStatus.ERRORED) {\n          submissionCompleted = true;\n          submissionSpinner.fail();\n        } else if (submissionStatus === SubmissionStatus.FINISHED) {\n          submissionCompleted = true;\n          submissionSpinner.succeed();\n        }\n      }\n    } catch (err) {\n      submissionSpinner.fail(AndroidOnlineSubmitter.getStatusText(SubmissionStatus.ERRORED));\n      throw err;\n    }\n\n    await displayLogs(submission, submissionStatus, this.verbose);\n  }\n\n  private static getStatusText(status: SubmissionStatus): string {\n    if (status === SubmissionStatus.IN_QUEUE) {\n      return 'Submitting your app to Google Play Store: waiting for an available submitter';\n    } else if (status === SubmissionStatus.IN_PROGRESS) {\n      return 'Submitting your app to Google Play Store: submission in progress';\n    } else if (status === SubmissionStatus.FINISHED) {\n      return 'Successfully submitted your app to Google Play Store!';\n    } else if (status === SubmissionStatus.ERRORED) {\n      return 'Something went wrong when submitting your app to Google Play Store.';\n    } else {\n      throw new Error('This should never happen');\n    }\n  }\n}\n\ninterface Summary {\n  androidPackage: string;\n  archivePath?: string;\n  archiveUrl?: string;\n  archiveType: ArchiveType;\n  serviceAccountPath: string;\n  track: ReleaseTrack;\n  releaseStatus?: ReleaseStatus;\n  mode: SubmissionMode;\n  projectId?: string;\n}\n\nconst SummaryHumanReadableKeys: Record<keyof Summary, string> = {\n  androidPackage: 'Android package',\n  archivePath: 'Archive path',\n  archiveUrl: 'Archive URL',\n  archiveType: 'Archive type',\n  serviceAccountPath: 'Google Service Account',\n  track: 'Release track',\n  releaseStatus: 'Release status',\n  mode: 'Submission mode',\n  projectId: 'Project ID',\n};\n\nconst SummaryHumanReadableValues: Partial<Record<keyof Summary, Function>> = {\n  mode: (mode: SubmissionMode): string => {\n    if (mode === SubmissionMode.online) {\n      return 'Using Expo Submission Service';\n    } else {\n      return 'Submitting the app from this computer';\n    }\n  },\n  archivePath: (path: string) => breakWord(path, 50),\n  archiveUrl: (url: string) => breakWord(url, 50),\n};\n\nfunction breakWord(word: string, chars: number): string {\n  return chunk(word, chars)\n    .map(arr => arr.join(''))\n    .join('\\n');\n}\n\nfunction printSummary(summary: Summary): void {\n  const table = new Table({\n    colWidths: [25, 55],\n    wordWrap: true,\n  });\n  table.push([\n    {\n      colSpan: 2,\n      content: log.chalk.bold('Android Submission Summary'),\n      hAlign: 'center',\n    },\n  ]);\n  for (const [key, value] of Object.entries(summary)) {\n    const displayKey = SummaryHumanReadableKeys[key as keyof Summary];\n    const displayValue = SummaryHumanReadableValues[key as keyof Summary]?.(value) ?? value;\n    table.push([displayKey, displayValue]);\n  }\n  console.info(table.toString());\n}\n\nexport default AndroidSubmitter;\n"],"file":"AndroidSubmitter.js"}