{"version":3,"sources":["../../../../../src/commands/upload/submission-service/android/AndroidSubmitCommand.ts"],"names":["AndroidSubmitCommand","createContext","mode","projectDir","commandOptions","constructor","ctx","runAsync","SubmissionMode","online","UserManager","getCurrentUserAsync","ensureLoggedInAsync","log","addNewLineIfNone","submissionOptions","getAndroidSubmissionOptions","submitter","AndroidSubmitter","submitAsync","androidPackageSource","resolveAndroidPackageSource","track","resolveTrack","releaseStatus","resolveReleaseStatus","archiveSource","resolveArchiveSource","serviceAccountSource","resolveServiceAccountSource","errored","filter","r","ok","length","message","map","err","reason","join","error","Error","enforceValue","androidPackage","exp","android","package","sourceType","AndroidPackageSourceType","userDefined","prompt","ReleaseTrack","production","Object","keys","ReleaseStatus","completed","archiveFile","resolveArchiveFileSource","archiveType","resolveArchiveTypeSource","url","path","id","latest","chosenOptions","opt","ArchiveFileSourceType","platform","validator","isUUID","buildId","rawArchiveType","ArchiveType","ArchiveTypeSourceType","parameter","infer","key","ServiceAccountSourceType"],"mappings":"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","sourcesContent":["import { Result, result } from '@expo/results';\nimport { UserManager } from '@expo/xdl';\nimport validator from 'validator';\n\nimport AndroidSubmitter, { AndroidSubmissionOptions } from './AndroidSubmitter';\nimport { ArchiveType, ReleaseStatus, ReleaseTrack } from './AndroidSubmissionConfig';\nimport { ServiceAccountSource, ServiceAccountSourceType } from './ServiceAccountSource';\nimport { AndroidPackageSource, AndroidPackageSourceType } from './AndroidPackageSource';\nimport { AndroidSubmissionContext, AndroidSubmitCommandOptions } from './types';\n\nimport {\n  ArchiveFileSource,\n  ArchiveFileSourceType,\n  ArchiveSource,\n  ArchiveTypeSource,\n  ArchiveTypeSourceType,\n} from '../archive-source';\nimport { SubmissionMode } from '../types';\nimport { getExpoConfig } from '../utils/config';\nimport log from '../../../../log';\n\nclass AndroidSubmitCommand {\n  static createContext(\n    mode: SubmissionMode,\n    projectDir: string,\n    commandOptions: AndroidSubmitCommandOptions\n  ): AndroidSubmissionContext {\n    return {\n      mode,\n      projectDir,\n      commandOptions,\n    };\n  }\n\n  constructor(private ctx: AndroidSubmissionContext) {}\n\n  async runAsync(): Promise<void> {\n    if (this.ctx.mode === SubmissionMode.online && !(await UserManager.getCurrentUserAsync())) {\n      await UserManager.ensureLoggedInAsync();\n      log.addNewLineIfNone();\n    }\n\n    const submissionOptions = this.getAndroidSubmissionOptions();\n    const submitter = new AndroidSubmitter(this.ctx, submissionOptions);\n    await submitter.submitAsync();\n  }\n\n  private getAndroidSubmissionOptions(): AndroidSubmissionOptions {\n    const androidPackageSource = this.resolveAndroidPackageSource();\n    const track = this.resolveTrack();\n    const releaseStatus = this.resolveReleaseStatus();\n    const archiveSource = this.resolveArchiveSource();\n    const serviceAccountSource = this.resolveServiceAccountSource();\n\n    const errored = [\n      androidPackageSource,\n      track,\n      releaseStatus,\n      archiveSource,\n      serviceAccountSource,\n    ].filter(r => !r.ok);\n    if (errored.length > 0) {\n      const message = errored.map(err => err.reason?.message).join('\\n');\n      log.error(message);\n      throw new Error('Failed to submit the app');\n    }\n\n    return {\n      androidPackageSource: androidPackageSource.enforceValue(),\n      track: track.enforceValue(),\n      releaseStatus: releaseStatus.enforceValue(),\n      archiveSource: archiveSource.enforceValue(),\n      serviceAccountSource: serviceAccountSource.enforceValue(),\n    };\n  }\n\n  private resolveAndroidPackageSource(): Result<AndroidPackageSource> {\n    let androidPackage: string | undefined;\n    if (this.ctx.commandOptions.androidPackage) {\n      androidPackage = this.ctx.commandOptions.androidPackage;\n    }\n    const exp = getExpoConfig(this.ctx.projectDir);\n    if (exp.android?.package) {\n      androidPackage = exp.android.package;\n    }\n    if (androidPackage) {\n      return result({\n        sourceType: AndroidPackageSourceType.userDefined,\n        androidPackage,\n      });\n    } else {\n      return result({\n        sourceType: AndroidPackageSourceType.prompt,\n      });\n    }\n  }\n\n  private resolveTrack(): Result<ReleaseTrack> {\n    const { track } = this.ctx.commandOptions;\n    if (!track) {\n      return result(ReleaseTrack.production);\n    }\n    if (track in ReleaseTrack) {\n      return result(ReleaseTrack[track as keyof typeof ReleaseTrack]);\n    } else {\n      return result(\n        new Error(\n          `Unsupported track: ${track} (valid options: ${Object.keys(ReleaseTrack).join(', ')})`\n        )\n      );\n    }\n  }\n\n  private resolveReleaseStatus(): Result<ReleaseStatus> {\n    const { releaseStatus } = this.ctx.commandOptions;\n    if (!releaseStatus) {\n      return result(ReleaseStatus.completed);\n    }\n    if (releaseStatus in ReleaseStatus) {\n      return result(ReleaseStatus[releaseStatus as keyof typeof ReleaseStatus]);\n    } else {\n      return result(\n        new Error(\n          `Unsupported release status: ${releaseStatus} (valid options: ${Object.keys(\n            ReleaseStatus\n          ).join(', ')})`\n        )\n      );\n    }\n  }\n\n  private resolveArchiveSource(): Result<ArchiveSource> {\n    return result({\n      archiveFile: this.resolveArchiveFileSource(),\n      archiveType: this.resolveArchiveTypeSource(),\n    });\n  }\n\n  private resolveArchiveFileSource(): ArchiveFileSource {\n    const { url, path, id, latest } = this.ctx.commandOptions;\n    const chosenOptions = [url, path, id, latest];\n    if (chosenOptions.filter(opt => opt).length > 1) {\n      throw new Error(`Pass only one of: --url, --path, --id, --latest`);\n    }\n\n    if (url) {\n      return {\n        sourceType: ArchiveFileSourceType.url,\n        url,\n        platform: 'android',\n        projectDir: this.ctx.projectDir,\n      };\n    } else if (path) {\n      return {\n        sourceType: ArchiveFileSourceType.path,\n        path,\n        platform: 'android',\n        projectDir: this.ctx.projectDir,\n      };\n    } else if (id) {\n      if (!validator.isUUID(id)) {\n        throw new Error(`${id} is not a id`);\n      }\n      return {\n        sourceType: ArchiveFileSourceType.buildId,\n        id,\n        platform: 'android',\n        projectDir: this.ctx.projectDir,\n      };\n    } else if (latest) {\n      return {\n        sourceType: ArchiveFileSourceType.latest,\n        platform: 'android',\n        projectDir: this.ctx.projectDir,\n      };\n    } else {\n      return {\n        sourceType: ArchiveFileSourceType.prompt,\n        platform: 'android',\n        projectDir: this.ctx.projectDir,\n      };\n    }\n  }\n\n  private resolveArchiveTypeSource(): ArchiveTypeSource {\n    const { archiveType: rawArchiveType } = this.ctx.commandOptions;\n    if (rawArchiveType) {\n      if (!(rawArchiveType in ArchiveType)) {\n        throw new Error(\n          `Unsupported archive type: ${rawArchiveType} (valid options: ${Object.keys(\n            ArchiveType\n          ).join(', ')})`\n        );\n      }\n      const archiveType = rawArchiveType as ArchiveType;\n      return {\n        sourceType: ArchiveTypeSourceType.parameter,\n        archiveType,\n      };\n    } else {\n      return {\n        sourceType: ArchiveTypeSourceType.infer,\n      };\n    }\n  }\n\n  private resolveServiceAccountSource(): Result<ServiceAccountSource> {\n    const { key } = this.ctx.commandOptions;\n    if (key) {\n      return result({\n        sourceType: ServiceAccountSourceType.path,\n        path: key,\n      });\n    } else {\n      return result({\n        sourceType: ServiceAccountSourceType.prompt,\n      });\n    }\n  }\n}\n\nexport default AndroidSubmitCommand;\n"],"file":"AndroidSubmitCommand.js"}