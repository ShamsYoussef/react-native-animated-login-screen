{"version":3,"sources":["../../../src/commands/upload/utils.ts"],"names":["spawnAsyncThrowError","ExponentTools","pipeline","stream","downloadFile","url","dest","bar","transferredSoFar","downloadStream","got","on","progress","ProgressBar","complete","incomplete","total","tick","transferred","fs","createWriteStream","runFastlaneAsync","program","args","appleId","appleIdPassword","appleTeamId","itcTeamId","companyName","pipeToLogger","pipeToLoggerOptions","stdout","stdio","fastlaneData","FASTLANE_USER","FASTLANE_PASSWORD","FASTLANE_DONT_STORE_PASSWORD","FASTLANE_TEAM_ID","FASTLANE_ITC_TEAM_ID","PRODUCE_COMPANY_NAME","env","process","spawnOptions","stderr","res","JSON","parse","result","message","reason","rawDump","backtrace","map","i","join","Error"],"mappings":"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","sourcesContent":["import stream from 'stream';\nimport { promisify } from 'util';\n\nimport { ExponentTools } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport got from 'got';\nimport ProgressBar from 'progress';\n\nconst { spawnAsyncThrowError } = ExponentTools;\nconst pipeline = promisify(stream.pipeline);\n\nexport async function downloadFile(url: string, dest: string): Promise<string> {\n  let bar: ProgressBar | null;\n  let transferredSoFar = 0;\n  const downloadStream = got.stream(url).on('downloadProgress', progress => {\n    if (!bar) {\n      bar = new ProgressBar('Downloading [:bar] :percent :etas', {\n        complete: '=',\n        incomplete: ' ',\n        total: progress.total,\n      });\n    }\n    bar.tick(progress.transferred - transferredSoFar);\n    transferredSoFar = progress.transferred;\n  });\n  await pipeline(downloadStream, fs.createWriteStream(dest));\n  return dest;\n}\n\nexport async function runFastlaneAsync(\n  program: string,\n  args: any,\n  {\n    appleId,\n    appleIdPassword,\n    appleTeamId,\n    itcTeamId,\n    companyName,\n  }: {\n    appleId?: string;\n    appleIdPassword?: string;\n    appleTeamId?: string;\n    itcTeamId?: string;\n    companyName?: string;\n  },\n  pipeToLogger = false\n): Promise<{ [key: string]: any }> {\n  const pipeToLoggerOptions: any = pipeToLogger\n    ? { pipeToLogger: { stdout: true } }\n    : { stdio: [0, 1, 'pipe'] };\n\n  const fastlaneData =\n    appleId && appleIdPassword\n      ? {\n          FASTLANE_USER: appleId,\n          FASTLANE_PASSWORD: appleIdPassword,\n          FASTLANE_DONT_STORE_PASSWORD: '1',\n          FASTLANE_TEAM_ID: appleTeamId,\n          ...(itcTeamId && { FASTLANE_ITC_TEAM_ID: itcTeamId }),\n          ...(companyName && { PRODUCE_COMPANY_NAME: companyName }),\n        }\n      : {};\n\n  const env = {\n    ...process.env,\n    ...fastlaneData,\n  };\n\n  const spawnOptions: ExponentTools.AsyncSpawnOptions = {\n    ...pipeToLoggerOptions,\n    env,\n  };\n\n  const { stderr } = await spawnAsyncThrowError(program, args, spawnOptions);\n\n  const res = JSON.parse(stderr);\n  if (res.result !== 'failure') {\n    return res;\n  } else {\n    let message =\n      res.reason !== 'Unknown reason'\n        ? res.reason\n        : res.rawDump?.message ?? 'Unknown error when running fastlane';\n    message = `${message}${\n      res?.rawDump?.backtrace\n        ? `\\n${res.rawDump.backtrace.map((i: string) => `    ${i}`).join('\\n')}`\n        : ''\n    }`;\n    throw new Error(message);\n  }\n}\n"],"file":"utils.js"}