{"version":3,"sources":["../../src/commands/publish-modify.ts"],"names":["program","command","alias","description","option","asyncActionProjectDir","projectDir","options","releaseChannel","Error","publishId","result","tableString","table","printTableJson","queryResult","console","log","e","error","checkConfig","channelId","sdkVersion","usage","getUsageAsync","platform","_getUsageAsync","warn","_getGenericUsage","allPlatforms","publishesResult","count","length","publishes","uniquePlatforms","publish","details","Promise","all","map","publication","detailOptions","publicationId","uniqueRevisionIds","detail","revisionId","channel","publishedTime","timeDifferenceString","_getTimeDifferenceString","Date","t0","t1","minutesInMs","hourInMs","dayInMs","diffMs","Math","abs","getTime","diffDays","round","diffHours","diffMinutes"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AASe,kBAAUA,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,2BADX,EAEGC,KAFH,CAES,IAFT,EAGGC,WAHH,CAGe,gEAHf,EAIGC,MAJH,CAKI,sCALJ,EAMI,sDANJ,EAQGA,MARH,CASI,+BATJ,EAUI,uEAVJ,EAYGC,qBAZH,CAaI,OACEC,UADF,EAEEC,OAFF,KAGoB;AAClB,QAAI,CAACA,OAAO,CAACC,cAAb,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AACD,QAAI,CAACF,OAAO,CAACG,SAAb,EAAwB;AACtB,YAAM,IAAID,KAAJ,CAAU,wEAAV,CAAN;AACD;;AACD,QAAI;AACF,YAAME,MAAM,GAAG,MAAM,8CACnBL,UADmB,EAEnBC,OAFmB,CAArB;AAIA,UAAIK,WAAW,GAAGC,KAAK,GAACC,cAAN,CAChBH,MAAM,CAACI,WADS,EAEhB,qBAFgB,EAGhB,SAHgB,CAAlB;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACD,KAXD,CAWE,OAAOM,CAAP,EAAU;AACVD,qBAAIE,KAAJ,CAAUD,CAAV;AACD;AACF,GArCL,EAsCI;AAAEE,IAAAA,WAAW,EAAE;AAAf,GAtCJ;AAwCApB,EAAAA,OAAO,CACJC,OADH,CACW,gCADX,EAEGC,KAFH,CAES,IAFT,EAGGC,WAHH,CAGe,kCAHf,EAIGC,MAJH,CAIU,2BAJV,EAIuC,0BAJvC,EAKGA,MALH,CAKU,sCALV,EAKkD,0CALlD,EAMGA,MANH,CAMU,6BANV,EAMyC,yCANzC,EAOGA,MAPH,CAOU,8BAPV,EAO0C,2BAP1C,EAQGC,qBARH,CASI,OACEC,UADF,EAEEC,OAFF,KAQoB;AAClB,QAAIA,OAAO,CAACc,SAAZ,EAAuB;AACrB,YAAM,IAAIZ,KAAJ,CACJ,2GADI,CAAN;AAGD;;AACD,QAAI,CAACF,OAAO,CAACC,cAAT,IAA2B,CAACD,OAAO,CAACe,UAAxC,EAAoD;AAClD,YAAMC,KAAK,GAAG,MAAMC,aAAa,CAAClB,UAAD,CAAjC;AACA,YAAM,IAAIG,KAAJ,CAAUc,KAAV,CAAN;AACD;;AACD,QAAIhB,OAAO,CAACkB,QAAZ,EAAsB;AACpB,UAAIlB,OAAO,CAACkB,QAAR,KAAqB,SAArB,IAAkClB,OAAO,CAACkB,QAAR,KAAqB,KAA3D,EAAkE;AAChE,cAAM,IAAIhB,KAAJ,CACJ,+FADI,CAAN;AAGD;AACF;;AACD,UAAM,yDAAoCH,UAApC,EAAgDC,OAAhD,CAAN;AACD,GAnCL,EAoCI;AAAEa,IAAAA,WAAW,EAAE;AAAf,GApCJ;AAsCD;;AACD,eAAeI,aAAf,CAA6BlB,UAA7B,EAAkE;AAChE,MAAI;AACF,WAAO,MAAMoB,cAAc,CAACpB,UAAD,CAA3B;AACD,GAFD,CAEE,OAAOY,CAAP,EAAU;AACVD,mBAAIU,IAAJ,CAAST,CAAT,EADU,CAEV;;;AACA,WAAOU,gBAAgB,EAAvB;AACD;AACF;;AAED,eAAeF,cAAf,CAA8BpB,UAA9B,EAAmE;AACjE,QAAMuB,YAAY,GAAG,CAAC,KAAD,EAAQ,SAAR,CAArB;AACA,QAAMC,eAAe,GAAG,MAAM,4CAAuBxB,UAAvB,EAAmC;AAC/DE,IAAAA,cAAc,EAAE,SAD+C;AACpC;AAC3BuB,IAAAA,KAAK,EAAEF,YAAY,CAACG;AAF2C,GAAnC,CAA9B;AAIA,QAAMC,SAAS,GAAGH,eAAe,CAACf,WAAlC,CANiE,CAQjE;;AACA,QAAMmB,eAAe,GAAG,uBAAOD,SAAP,EAAkBE,OAAO,IAAIA,OAAO,CAACV,QAArC,CAAxB;;AACA,MAAIS,eAAe,CAACF,MAAhB,KAA2BH,YAAY,CAACG,MAA5C,EAAoD;AAClD;AACA,WAAOJ,gBAAgB,EAAvB;AACD;;AAED,QAAMQ,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpBL,SAAS,CAACM,GAAV,CAAc,MAAMC,WAAN,IAAqB;AACjC,UAAMC,aAAa,GAAG;AACpB/B,MAAAA,SAAS,EAAE8B,WAAW,CAACE;AADH,KAAtB;AAGA,WAAO,MAAM,+CAA0BpC,UAA1B,EAAsCmC,aAAtC,CAAb;AACD,GALD,CADoB,CAAtB;AASA,QAAME,iBAAiB,GAAG,uBAAOP,OAAP,EAAgBQ,MAAM,IAAIA,MAAM,CAACC,UAAjC,CAA1B;;AACA,MAAIF,iBAAiB,CAACX,MAAlB,KAA6B,CAAjC,EAAoC;AAClC;AACA,WAAOJ,gBAAgB,EAAvB;AACD;;AAED,QAAM;AAAEkB,IAAAA;AAAF,MAAcb,SAAS,CAAC,CAAD,CAA7B;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcE,IAAAA,aAAd;AAA6BzB,IAAAA;AAA7B,MAA4Cc,OAAO,CAAC,CAAD,CAAzD;;AACA,QAAMY,oBAAoB,GAAGC,wBAAwB,CAAC,IAAIC,IAAJ,EAAD,EAAa,IAAIA,IAAJ,CAASH,aAAT,CAAb,CAArD;;AAEA,SACG,gEAAD,GACC,2CAA0CF,UAAW,yBAAwBC,OAAQ,gBAAeE,oBAAqB,OAD1H,GAEC,gDAA+CF,OAAQ,kBAAiBxB,UAAW,EAHtF;AAKD;;AAED,SAAS2B,wBAAT,CAAkCE,EAAlC,EAA4CC,EAA5C,EAA8D;AAC5D,QAAMC,WAAW,GAAG,KAAK,IAAzB;AACA,QAAMC,QAAQ,GAAG,KAAKD,WAAtB;AACA,QAAME,OAAO,GAAG,KAAKD,QAArB,CAH4D,CAG7B;;AAC/B,QAAME,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASN,EAAE,CAACO,OAAH,KAAeR,EAAE,CAACQ,OAAH,EAAxB,CAAf;AAEA,QAAMC,QAAQ,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAM,GAAGD,OAApB,CAAjB;;AACA,MAAIK,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAQ,GAAEA,QAAS,OAAMA,QAAQ,KAAK,CAAb,GAAiB,EAAjB,GAAsB,GAAI,MAAnD;AACD;;AAED,QAAME,SAAS,GAAGL,IAAI,CAACI,KAAL,CAAWL,MAAM,GAAGF,QAApB,CAAlB;;AACA,MAAIQ,SAAS,GAAG,CAAhB,EAAmB;AACjB,WAAQ,GAAEA,SAAU,QAAOA,SAAS,KAAK,CAAd,GAAkB,EAAlB,GAAuB,GAAI,MAAtD;AACD;;AAED,QAAMC,WAAW,GAAGN,IAAI,CAACI,KAAL,CAAWL,MAAM,GAAGH,WAApB,CAApB;;AACA,MAAIU,WAAW,GAAG,CAAlB,EAAqB;AACnB,WAAQ,GAAEA,WAAY,UAASA,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyB,GAAI,MAA5D;AACD;;AAED,SAAO,UAAP;AACD;;AAED,SAASnC,gBAAT,GAAoC;AAClC,SACG,gEAAD,GACC,0FADD,GAEC,6EAFD,GAGC,2DAJH;AAMD","sourcesContent":["import { Command } from 'commander';\nimport uniqBy from 'lodash/uniqBy';\nimport log from '../log';\nimport * as table from '../commands/utils/cli-table';\nimport {\n  Publication,\n  RollbackOptions,\n  getPublicationDetailAsync,\n  getPublishHistoryAsync,\n  rollbackPublicationFromChannelAsync,\n  setPublishToChannelAsync,\n} from './utils/PublishUtils';\n\nexport default function (program: Command) {\n  program\n    .command('publish:set [project-dir]')\n    .alias('ps')\n    .description('Set a published release to be served from a specified channel.')\n    .option(\n      '-c, --release-channel <channel-name>',\n      'The channel to set the published release. (Required)'\n    )\n    .option(\n      '-p, --publish-id <publish-id>',\n      'The id of the published release to serve from the channel. (Required)'\n    )\n    .asyncActionProjectDir(\n      async (\n        projectDir: string,\n        options: { releaseChannel?: string; publishId?: string }\n      ): Promise<void> => {\n        if (!options.releaseChannel) {\n          throw new Error('You must specify a release channel.');\n        }\n        if (!options.publishId) {\n          throw new Error('You must specify a publish id. You can find ids using publish:history.');\n        }\n        try {\n          const result = await setPublishToChannelAsync(\n            projectDir,\n            options as { releaseChannel: string; publishId: string }\n          );\n          let tableString = table.printTableJson(\n            result.queryResult,\n            'Channel Set Status ',\n            'SUCCESS'\n          );\n          console.log(tableString);\n        } catch (e) {\n          log.error(e);\n        }\n      },\n      { checkConfig: true }\n    );\n  program\n    .command('publish:rollback [project-dir]')\n    .alias('pr')\n    .description('Rollback an update to a channel.')\n    .option('--channel-id <channel-id>', 'This flag is deprecated.')\n    .option('-c, --release-channel <channel-name>', 'The channel to rollback from. (Required)')\n    .option('-s, --sdk-version <version>', 'The sdk version to rollback. (Required)')\n    .option('-p, --platform <ios|android>', 'The platform to rollback.')\n    .asyncActionProjectDir(\n      async (\n        projectDir: string,\n        options: {\n          releaseChannel?: string;\n          sdkVersion?: string;\n          platform?: string;\n          channelId?: string;\n        }\n      ): Promise<void> => {\n        if (options.channelId) {\n          throw new Error(\n            'This flag is deprecated and does not do anything. Please use --release-channel and --sdk-version instead.'\n          );\n        }\n        if (!options.releaseChannel || !options.sdkVersion) {\n          const usage = await getUsageAsync(projectDir);\n          throw new Error(usage);\n        }\n        if (options.platform) {\n          if (options.platform !== 'android' && options.platform !== 'ios') {\n            throw new Error(\n              'Platform must be either android or ios. Leave out the platform flag to target both platforms.'\n            );\n          }\n        }\n        await rollbackPublicationFromChannelAsync(projectDir, options as RollbackOptions);\n      },\n      { checkConfig: true }\n    );\n}\nasync function getUsageAsync(projectDir: string): Promise<string> {\n  try {\n    return await _getUsageAsync(projectDir);\n  } catch (e) {\n    log.warn(e);\n    // couldn't print out warning for some reason\n    return _getGenericUsage();\n  }\n}\n\nasync function _getUsageAsync(projectDir: string): Promise<string> {\n  const allPlatforms = ['ios', 'android'];\n  const publishesResult = await getPublishHistoryAsync(projectDir, {\n    releaseChannel: 'default', // not specifying a channel will return most recent publishes but this is not neccesarily the most recent entry in a channel (user could have set an older publish to top of the channel)\n    count: allPlatforms.length,\n  });\n  const publishes = publishesResult.queryResult as Publication[];\n\n  // If the user published normally, there would be a publish for each platform with the same revisionId\n  const uniquePlatforms = uniqBy(publishes, publish => publish.platform);\n  if (uniquePlatforms.length !== allPlatforms.length) {\n    // User probably applied some custom `publish:set` or `publish:rollback` command\n    return _getGenericUsage();\n  }\n\n  const details = await Promise.all(\n    publishes.map(async publication => {\n      const detailOptions = {\n        publishId: publication.publicationId,\n      };\n      return await getPublicationDetailAsync(projectDir, detailOptions);\n    })\n  );\n\n  const uniqueRevisionIds = uniqBy(details, detail => detail.revisionId);\n  if (uniqueRevisionIds.length !== 1) {\n    // User probably applied some custom `publish:set` or `publish:rollback` command\n    return _getGenericUsage();\n  }\n\n  const { channel } = publishes[0];\n  const { revisionId, publishedTime, sdkVersion } = details[0];\n  const timeDifferenceString = _getTimeDifferenceString(new Date(), new Date(publishedTime));\n\n  return (\n    `--release-channel and --sdk-version arguments are required. \\n` +\n    `For example, to roll back the revision [${revisionId}] on release channel [${channel}] (published ${timeDifferenceString}), \\n` +\n    `run: expo publish:rollback --release-channel ${channel} --sdk-version ${sdkVersion}`\n  );\n}\n\nfunction _getTimeDifferenceString(t0: Date, t1: Date): string {\n  const minutesInMs = 60 * 1000;\n  const hourInMs = 60 * minutesInMs;\n  const dayInMs = 24 * hourInMs; // hours*minutes*seconds*milliseconds\n  const diffMs = Math.abs(t1.getTime() - t0.getTime());\n\n  const diffDays = Math.round(diffMs / dayInMs);\n  if (diffDays > 0) {\n    return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;\n  }\n\n  const diffHours = Math.round(diffMs / hourInMs);\n  if (diffHours > 0) {\n    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;\n  }\n\n  const diffMinutes = Math.round(diffMs / minutesInMs);\n  if (diffMinutes > 0) {\n    return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n  }\n\n  return 'recently';\n}\n\nfunction _getGenericUsage(): string {\n  return (\n    `--release-channel and --sdk-version arguments are required. \\n` +\n    `For example, to roll back the latest publishes on the default channel for sdk 37.0.0, \\n` +\n    `run: expo publish:rollback --release-channel defaul --sdk-version 37.0.0 \\n` +\n    `To rollback a specific platform, use the --platform flag.`\n  );\n}\n"],"file":"publish-modify.js"}