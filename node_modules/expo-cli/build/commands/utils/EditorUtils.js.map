{"version":3,"sources":["../../../src/commands/utils/EditorUtils.ts"],"names":["guessEditor","process","env","EXPO_EDITOR","editors","getEditor","defaultEditor","startProjectInEditorAsync","path","options","FileSystem","openProjectInEditorAsync","editor","log","error","stdio","isTerminalEditor","editorProcess","binary","detached","child","unref"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,WAAT,GAAuB;AAC5B,MAAIC,OAAO,CAACC,GAAR,CAAYC,WAAhB,EAA6B;AAC3B,WAAOC,qBAAQC,SAAR,CAAkBJ,OAAO,CAACC,GAAR,CAAYC,WAA9B,CAAP;AACD;;AAED,MAAI;AACF,WAAOC,qBAAQE,aAAR,EAAP;AACD,GAFD,CAEE,gBAAM;AACN,WAAOF,qBAAQC,SAAR,CAAkB,QAAlB,CAAP;AACD;AACF;;AAEM,eAAeE,yBAAf,CAAyCC,IAAzC,EAAuDC,OAA4B,GAAG,EAAtF,EAA0F;AAC/F,MAAI;AACF,WAAO,MAAMC,kBAAWC,wBAAX,CAAoCH,IAApC,CAAb;AACD,GAFD,CAEE,iBAAM,CAAE;;AAEV,QAAMI,MAAM,GAAGH,OAAO,CAACG,MAAR,GAAiBR,qBAAQC,SAAR,CAAkBI,OAAO,CAACG,MAA1B,CAAjB,GAAqDZ,WAAW,EAA/E;;AAEA,MAAI,CAACY,MAAL,EAAa;AACXC,mBAAIC,KAAJ,CACE,kHADF;;AAGA;AACD;;AAED,QAAMC,KAAK,GAAGH,MAAM,CAACI,gBAAP,GAA0B,SAA1B,GAAsC,QAApD;AACA,QAAMC,aAAa,GAAG,2BAAWL,MAAM,CAACM,MAAlB,EAA0B,CAACV,IAAD,CAA1B,EAAkC;AAAEO,IAAAA,KAAF;AAASI,IAAAA,QAAQ,EAAE;AAAnB,GAAlC,CAAtB;AACAF,EAAAA,aAAa,CAACG,KAAd,CAAoBC,KAApB;AACA,SAAOJ,aAAP;AACD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { FileSystem } from '@expo/xdl';\nimport editors from 'env-editor';\nimport log from '../../log';\n\nexport function guessEditor() {\n  if (process.env.EXPO_EDITOR) {\n    return editors.getEditor(process.env.EXPO_EDITOR);\n  }\n\n  try {\n    return editors.defaultEditor();\n  } catch {\n    return editors.getEditor('vscode');\n  }\n}\n\nexport async function startProjectInEditorAsync(path: string, options: { editor?: string } = {}) {\n  try {\n    return await FileSystem.openProjectInEditorAsync(path);\n  } catch {}\n\n  const editor = options.editor ? editors.getEditor(options.editor) : guessEditor();\n\n  if (!editor) {\n    log.error(\n      'Could not find your editor, you can set it by defining $EXPO_EDITOR environment variable (e.g. \"code\" or \"atom\")'\n    );\n    return;\n  }\n\n  const stdio = editor.isTerminalEditor ? 'inherit' : 'ignore';\n  const editorProcess = spawnAsync(editor.binary, [path], { stdio, detached: true });\n  editorProcess.child.unref();\n  return editorProcess;\n}\n"],"file":"EditorUtils.js"}