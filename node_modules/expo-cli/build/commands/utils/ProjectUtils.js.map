{"version":3,"sources":["../../../src/commands/utils/ProjectUtils.ts"],"names":["findProjectRootAsync","base","previous","dir","pkg","dynamicConfigPath","staticConfigPath","skipSDKVersionRequirement","dirIncludesAppConfig","isManaged","dependencies","hasOwnProperty","workflow","projectRoot","path","dirname","CommandError","usesOldExpoUpdatesAsync","pkgPath","join","pkgExists","fs","existsSync","JsonFile","getAsync","version","coercedVersion","semver","coerce","satisfies","validateGitStatusAsync","workingTreeStatus","result","stdout","e","log","nested","chalk","green","bold","red"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport { getConfig } from '@expo/config';\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport CommandError from '../../CommandError';\nimport log from '../../log';\n\nexport async function findProjectRootAsync(\n  base: string\n): Promise<{ projectRoot: string; workflow: 'managed' | 'bare' }> {\n  let previous = null;\n  let dir = base;\n\n  do {\n    try {\n      // This will throw if there is no package.json in the directory\n      const { pkg, dynamicConfigPath, staticConfigPath } = getConfig(dir, {\n        skipSDKVersionRequirement: true,\n      });\n\n      const dirIncludesAppConfig = dynamicConfigPath || staticConfigPath;\n      const isManaged =\n        dirIncludesAppConfig && !pkg.dependencies.hasOwnProperty('react-native-unimodules');\n      const workflow = isManaged ? 'managed' : 'bare';\n\n      return { projectRoot: dir, workflow };\n    } catch {\n      // Expected to throw if no package.json is present\n    } finally {\n      previous = dir;\n      dir = path.dirname(dir);\n    }\n  } while (dir !== previous);\n\n  throw new CommandError(\n    'NO_PROJECT',\n    'No managed or bare projects found. Please make sure you are inside a project folder.'\n  );\n}\n\n// If we get here and can't find expo-updates or package.json we just assume\n// that we are not using the old expo-updates\nexport async function usesOldExpoUpdatesAsync(projectRoot: string): Promise<boolean> {\n  let pkgPath = path.join(projectRoot, 'package.json');\n  let pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  let dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  if (!dependencies['expo-updates']) {\n    return false;\n  }\n\n  let version = dependencies['expo-updates'] as string;\n  let coercedVersion = semver.coerce(version);\n  if (coercedVersion && semver.satisfies(coercedVersion, '~0.1.0')) {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    let result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch (e) {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    log.nested(`Your git working tree is ${chalk.green('clean')}`);\n    log.nested('To revert the changes after this command completes, you can run the following:');\n    log.nested('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    log.nested(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    log.nested(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    log.nested(\"We couldn't find a git repository in your project directory.\");\n    log.nested(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"file":"ProjectUtils.js"}