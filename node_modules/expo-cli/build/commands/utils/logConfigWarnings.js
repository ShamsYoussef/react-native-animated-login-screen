"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logConfigWarningsIOS = logConfigWarningsIOS;
exports.logConfigWarningsAndroid = logConfigWarningsAndroid;

function _terminalLink() {
  const data = _interopRequireDefault(require("terminal-link"));

  _terminalLink = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function logConfigWarningsIOS() {
  let warningsIOS = _config().WarningAggregator.flushWarningsIOS();

  if (warningsIOS.length) {
    warningsIOS.forEach(([property, warning, link]) => {
      _log().default.nested(formatOutput(property, warning, link));
    });
  }

  return !!warningsIOS;
}

function logConfigWarningsAndroid() {
  let warningsAndroid = _config().WarningAggregator.flushWarningsAndroid();

  if (warningsAndroid.length) {
    warningsAndroid.forEach(([property, warning, link]) => {
      _log().default.nested(formatOutput(property, warning, link));
    });
  }

  return !!warningsAndroid;
}

function formatOutput(property, warning, link) {
  return `- ${_chalk().default.bold(property)}: ${warning}${link ? getSpacer(warning) + (0, _terminalLink().default)('Details.', link) : ''}`;
}

function getSpacer(text) {
  if (text.endsWith('.')) {
    return ' ';
  } else {
    return '. ';
  }
}
//# sourceMappingURL=logConfigWarnings.js.map