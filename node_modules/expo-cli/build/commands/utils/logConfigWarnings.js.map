{"version":3,"sources":["../../../src/commands/utils/logConfigWarnings.ts"],"names":["logConfigWarningsIOS","warningsIOS","WarningAggregator","flushWarningsIOS","length","forEach","property","warning","link","log","nested","formatOutput","logConfigWarningsAndroid","warningsAndroid","flushWarningsAndroid","chalk","bold","getSpacer","text","endsWith"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,SAASA,oBAAT,GAAgC;AACrC,MAAIC,WAAW,GAAGC,4BAAkBC,gBAAlB,EAAlB;;AACA,MAAIF,WAAW,CAACG,MAAhB,EAAwB;AACtBH,IAAAA,WAAW,CAACI,OAAZ,CAAoB,CAAC,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAD,KAA+B;AACjDC,qBAAIC,MAAJ,CAAWC,YAAY,CAACL,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAvB;AACD,KAFD;AAGD;;AAED,SAAO,CAAC,CAACP,WAAT;AACD;;AAEM,SAASW,wBAAT,GAAoC;AACzC,MAAIC,eAAe,GAAGX,4BAAkBY,oBAAlB,EAAtB;;AACA,MAAID,eAAe,CAACT,MAApB,EAA4B;AAC1BS,IAAAA,eAAe,CAACR,OAAhB,CAAwB,CAAC,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAD,KAA+B;AACrDC,qBAAIC,MAAJ,CAAWC,YAAY,CAACL,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAvB;AACD,KAFD;AAGD;;AAED,SAAO,CAAC,CAACK,eAAT;AACD;;AAED,SAASF,YAAT,CAAsBL,QAAtB,EAAwCC,OAAxC,EAAyDC,IAAzD,EAAmF;AACjF,SAAQ,KAAIO,iBAAMC,IAAN,CAAWV,QAAX,CAAqB,KAAIC,OAAQ,GAC3CC,IAAI,GAAGS,SAAS,CAACV,OAAD,CAAT,GAAqB,6BAAa,UAAb,EAAyBC,IAAzB,CAAxB,GAAyD,EAC9D,EAFD;AAGD;;AAED,SAASS,SAAT,CAAmBC,IAAnB,EAAiC;AAC/B,MAAIA,IAAI,CAACC,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtB,WAAO,GAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF","sourcesContent":["import terminalLink from 'terminal-link';\nimport { WarningAggregator } from '@expo/config';\nimport chalk from 'chalk';\nimport log from '../../log';\n\nexport function logConfigWarningsIOS() {\n  let warningsIOS = WarningAggregator.flushWarningsIOS();\n  if (warningsIOS.length) {\n    warningsIOS.forEach(([property, warning, link]) => {\n      log.nested(formatOutput(property, warning, link));\n    });\n  }\n\n  return !!warningsIOS;\n}\n\nexport function logConfigWarningsAndroid() {\n  let warningsAndroid = WarningAggregator.flushWarningsAndroid();\n  if (warningsAndroid.length) {\n    warningsAndroid.forEach(([property, warning, link]) => {\n      log.nested(formatOutput(property, warning, link));\n    });\n  }\n\n  return !!warningsAndroid;\n}\n\nfunction formatOutput(property: string, warning: string, link: string | undefined) {\n  return `- ${chalk.bold(property)}: ${warning}${\n    link ? getSpacer(warning) + terminalLink('Details.', link) : ''\n  }`;\n}\n\nfunction getSpacer(text: string) {\n  if (text.endsWith('.')) {\n    return ' ';\n  } else {\n    return '. ';\n  }\n}\n"],"file":"logConfigWarnings.js"}