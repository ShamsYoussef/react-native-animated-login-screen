{"version":3,"sources":["../../src/commands/start.ts"],"names":["hasBooleanArg","rawArgs","argName","includes","getBooleanArg","isWebOnly","projectRoot","exp","skipSDKVersionRequirement","Array","isArray","platforms","length","normalizeOptionsAsync","projectDir","options","opts","webOnly","nonInteractive","parent","dev","minify","https","android","ios","web","localhost","lan","tunnel","cacheOptionsAsync","ProjectSettings","setAsync","parseStartOptions","startOpts","clear","reset","maxWorkers","startWebAction","rootPath","configureProjectAsync","Project","startAsync","urlOpts","handleMobileOptsAsync","isDetached","TerminalUI","action","pkg","validateDependenciesVersions","url","UrlUtils","constructManifestUrlAsync","recipient","sendTo","getRecipient","sendUrlAsync","log","newLine","printQRCode","chalk","underline","nested","green","Versions","gteSdkVersion","bundleNativeModulesPath","warn","bundledNativeModules","JsonFile","readAsync","bundledNativeModulesNames","Object","keys","projectDependencies","dependencies","modulesToCheck","incorrectDeps","moduleName","expectedRange","actualRange","semver","valid","validRange","intersects","push","forEach","inverse","tryOpeningDevToolsAsync","devToolsUrl","DevToolsServer","UserSettings","getAsync","bold","stopWebOnlyAsync","optsAsync","gray","projectConfig","path","resolve","program","command","alias","description","option","allowOffline","asyncActionProjectDir","normalizedOptions"],"mappings":"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","sourcesContent":["import { ExpoConfig, PackageJSONConfig, getConfig, projectHasModule } from '@expo/config';\n// @ts-ignore: not typed\nimport { DevToolsServer } from '@expo/dev-tools';\nimport JsonFile from '@expo/json-file';\nimport { Project, ProjectSettings, UrlUtils, UserSettings, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport intersection from 'lodash/intersection';\nimport path from 'path';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport semver from 'semver';\n\nimport { installExitHooks } from '../exit';\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport urlOpts, { URLOptions } from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\n\ntype NormalizedOptions = URLOptions & {\n  webOnly?: boolean;\n  dev?: boolean;\n  minify?: boolean;\n  https?: boolean;\n  nonInteractive?: boolean;\n  clear?: boolean;\n  maxWorkers?: number;\n  sendTo?: string;\n  host?: string;\n  lan?: boolean;\n  localhost?: boolean;\n  tunnel?: boolean;\n};\n\ntype Options = NormalizedOptions & {\n  parent?: { nonInteractive: boolean; rawArgs: string[] };\n};\n\ntype OpenDevToolsOptions = {\n  rootPath: string;\n  exp: ExpoConfig;\n  options: NormalizedOptions;\n};\n\nfunction hasBooleanArg(rawArgs: string[], argName: string): boolean {\n  return rawArgs.includes('--' + argName) || rawArgs.includes('--no-' + argName);\n}\n\nfunction getBooleanArg(rawArgs: string[], argName: string): boolean {\n  if (rawArgs.includes('--' + argName)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * If the project config `platforms` only contains the \"web\" field.\n * If no `platforms` array is defined this could still resolve true because platforms\n * will be inferred from the existence of `react-native-web` and `react-native`.\n *\n * @param projectRoot\n */\nfunction isWebOnly(projectRoot: string): boolean {\n  // TODO(Bacon): Limit the amount of times that the config is evaluated\n  // currently we read it the first time without the SDK version then later read it with the SDK version if react-native is installed.\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n\n// The main purpose of this function is to take existing options object and\n// support boolean args with as defined in the hasBooleanArg and getBooleanArg\n// functions.\nasync function normalizeOptionsAsync(\n  projectDir: string,\n  options: Options\n): Promise<NormalizedOptions> {\n  const opts: NormalizedOptions = {\n    ...options, // This is necessary to ensure we don't drop any options\n    webOnly: options.webOnly ?? isWebOnly(projectDir),\n    nonInteractive: options.parent?.nonInteractive,\n  };\n\n  const rawArgs = options.parent?.rawArgs || [];\n\n  if (hasBooleanArg(rawArgs, 'dev')) {\n    opts.dev = getBooleanArg(rawArgs, 'dev');\n  } else {\n    opts.dev = true;\n  }\n  if (hasBooleanArg(rawArgs, 'minify')) {\n    opts.minify = getBooleanArg(rawArgs, 'minify');\n  } else {\n    opts.minify = false;\n  }\n  if (hasBooleanArg(rawArgs, 'https')) {\n    opts.https = getBooleanArg(rawArgs, 'https');\n  } else {\n    opts.https = false;\n  }\n\n  if (hasBooleanArg(rawArgs, 'android')) {\n    opts.android = getBooleanArg(rawArgs, 'android');\n  }\n\n  if (hasBooleanArg(rawArgs, 'ios')) {\n    opts.ios = getBooleanArg(rawArgs, 'ios');\n  }\n\n  if (hasBooleanArg(rawArgs, 'web')) {\n    opts.web = getBooleanArg(rawArgs, 'web');\n  }\n\n  if (hasBooleanArg(rawArgs, 'localhost')) {\n    opts.localhost = getBooleanArg(rawArgs, 'localhost');\n  }\n\n  if (hasBooleanArg(rawArgs, 'lan')) {\n    opts.lan = getBooleanArg(rawArgs, 'lan');\n  }\n\n  if (hasBooleanArg(rawArgs, 'tunnel')) {\n    opts.tunnel = getBooleanArg(rawArgs, 'tunnel');\n  }\n\n  await cacheOptionsAsync(projectDir, opts);\n  return opts;\n}\n\nasync function cacheOptionsAsync(projectDir: string, options: NormalizedOptions): Promise<void> {\n  await ProjectSettings.setAsync(projectDir, {\n    dev: options.dev,\n    minify: options.minify,\n    https: options.https,\n  });\n}\n\nfunction parseStartOptions(options: NormalizedOptions): Project.StartOptions {\n  const startOpts: Project.StartOptions = {};\n\n  if (options.clear) {\n    startOpts.reset = true;\n  }\n\n  if (options.nonInteractive) {\n    startOpts.nonInteractive = true;\n  }\n\n  if (options.webOnly) {\n    startOpts.webOnly = true;\n  }\n\n  if (options.maxWorkers) {\n    startOpts.maxWorkers = options.maxWorkers;\n  }\n\n  return startOpts;\n}\n\nasync function startWebAction(projectDir: string, options: NormalizedOptions): Promise<void> {\n  const { exp, rootPath } = await configureProjectAsync(projectDir, options);\n  const startOpts = parseStartOptions(options);\n  await Project.startAsync(rootPath, startOpts);\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  if (!options.nonInteractive && !exp.isDetached) {\n    await TerminalUI.startAsync(projectDir, startOpts);\n  }\n}\n\nasync function action(projectDir: string, options: NormalizedOptions): Promise<void> {\n  const { exp, pkg, rootPath } = await configureProjectAsync(projectDir, options);\n\n  await validateDependenciesVersions(projectDir, exp, pkg);\n\n  const startOpts = parseStartOptions(options);\n\n  await Project.startAsync(rootPath, startOpts);\n\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  await urlOpts.handleMobileOptsAsync(projectDir, options);\n\n  if (!startOpts.nonInteractive && !exp.isDetached) {\n    await TerminalUI.startAsync(projectDir, startOpts);\n  } else {\n    if (!exp.isDetached) {\n      log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    log(`Your native app is running at ${chalk.underline(url)}`);\n  }\n  log.nested(chalk.green('Logs for your project will appear below. Press Ctrl+C to exit.'));\n}\n\nasync function validateDependenciesVersions(\n  projectDir: string,\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig\n): Promise<void> {\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const bundleNativeModulesPath = projectHasModule(\n    'expo/bundledNativeModules.json',\n    projectDir,\n    exp\n  );\n  if (!bundleNativeModulesPath) {\n    log.warn(\n      `Your project is in SDK version >= 33.0.0, but the ${chalk.underline(\n        'expo'\n      )} package version seems to be older.`\n    );\n    return;\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(bundleNativeModulesPath);\n  const bundledNativeModulesNames = Object.keys(bundledNativeModules);\n  const projectDependencies = Object.keys(pkg.dependencies);\n\n  const modulesToCheck = intersection(bundledNativeModulesNames, projectDependencies);\n  const incorrectDeps = [];\n  for (const moduleName of modulesToCheck) {\n    const expectedRange = bundledNativeModules[moduleName];\n    const actualRange = pkg.dependencies[moduleName];\n    if (\n      (semver.valid(actualRange) || semver.validRange(actualRange)) &&\n      typeof expectedRange === 'string' &&\n      !semver.intersects(expectedRange, actualRange)\n    ) {\n      incorrectDeps.push({\n        moduleName,\n        expectedRange,\n        actualRange,\n      });\n    }\n  }\n  if (incorrectDeps.length > 0) {\n    log.warn(\n      \"Some of your project's dependencies are not compatible with currently installed expo package version:\"\n    );\n    incorrectDeps.forEach(({ moduleName, expectedRange, actualRange }) => {\n      log.warn(\n        ` - ${chalk.underline(moduleName)} - expected version range: ${chalk.underline(\n          expectedRange\n        )} - actual version installed: ${chalk.underline(actualRange)}`\n      );\n    });\n    log.warn(\n      'Your project may not work correctly until you install the correct versions of the packages.\\n' +\n        `To install the correct versions of these packages, please run: ${chalk.inverse(\n          'expo install [package-name ...]'\n        )}`\n    );\n  }\n}\n\nasync function tryOpeningDevToolsAsync({\n  rootPath,\n  exp,\n  options,\n}: OpenDevToolsOptions): Promise<void> {\n  const devToolsUrl = await DevToolsServer.startAsync(rootPath);\n  log(`Expo DevTools is running at ${chalk.underline(devToolsUrl)}`);\n\n  if (!options.nonInteractive && !exp.isDetached) {\n    if (await UserSettings.getAsync('openDevToolsAtStartup', true)) {\n      log(`Opening DevTools in the browser... (press ${chalk.bold`shift-d`} to disable)`);\n      openBrowser(devToolsUrl);\n    } else {\n      log(\n        `Press ${chalk.bold`d`} to open DevTools now, or ${chalk.bold`shift-d`} to always open it automatically.`\n      );\n    }\n  }\n}\n\nasync function configureProjectAsync(\n  projectDir: string,\n  options: NormalizedOptions\n): Promise<{ rootPath: string; exp: ExpoConfig; pkg: PackageJSONConfig }> {\n  if (options.webOnly) {\n    installExitHooks(projectDir, Project.stopWebOnlyAsync);\n  } else {\n    installExitHooks(projectDir);\n  }\n  await urlOpts.optsAsync(projectDir, options);\n\n  log(chalk.gray(`Starting project at ${projectDir}`));\n\n  const projectConfig = getConfig(projectDir, {\n    skipSDKVersionRequirement: options.webOnly,\n  });\n  const { exp, pkg } = projectConfig;\n\n  // TODO: move this function over to CLI\n  // const message = getProjectConfigDescription(projectDir, projectConfig);\n  // if (message) {\n  //   log(chalk.magenta(`\\u203A ${message}`));\n  // }\n\n  const rootPath = path.resolve(projectDir);\n\n  await tryOpeningDevToolsAsync({\n    rootPath,\n    exp,\n    options,\n  });\n\n  return {\n    rootPath,\n    exp,\n    pkg,\n  };\n}\n\nexport default (program: any) => {\n  program\n    .command('start [project-dir]')\n    .alias('r')\n    .description('Starts or restarts a local server for your app and gives you a URL to it')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    .option(\n      '--web-only',\n      'Only start the Webpack dev server for web. [Deprecated]: use `expo start:web`'\n    )\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectDir: string, options: Options): Promise<void> => {\n        const normalizedOptions = await normalizeOptionsAsync(projectDir, options);\n        if (normalizedOptions.webOnly) {\n          return await startWebAction(projectDir, normalizedOptions);\n        }\n        return await action(projectDir, normalizedOptions);\n      }\n    );\n\n  program\n    .command('start:web [project-dir]')\n    .alias('web')\n    .description('Starts the Webpack dev server for web projects')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectDir: string, options: Options): Promise<void> => {\n        return startWebAction(\n          projectDir,\n          await normalizeOptionsAsync(projectDir, { ...options, webOnly: true })\n        );\n      }\n    );\n};\n"],"file":"start.js"}