{"version":3,"sources":["../../../src/commands/client/generateBundleIdentifier.ts"],"names":["generateBundleIdentifier","teamId","base32","sha","data","hash","crypto","createHash","update","digest","buffer","encoder","Base32Encoder","type","lc","write","finalize"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AADA;AAGe,SAASA,wBAAT,CAAkCC,MAAlC,EAA0D;AACvE,SAAQ,mBAAkBC,MAAM,CAACC,GAAG,CAACF,MAAD,CAAJ,CAAc,EAA9C;AACD;;AAED,SAASE,GAAT,CAAaC,IAAb,EAA8C;AAC5C,QAAMC,IAAI,GAAGC,kBAAOC,UAAP,CAAkB,QAAlB,CAAb;;AACA,SAAOF,IAAI,CAACG,MAAL,CAAYJ,IAAZ,EAAkBK,MAAlB,EAAP;AACD;;AAED,SAASP,MAAT,CAAgBQ,MAAhB,EAA0C;AACxC,QAAMC,OAAO,GAAG,KAAIC,eAAJ,EAAkB;AAChCC,IAAAA,IAAI,EAAE,SAD0B;AAEhCC,IAAAA,EAAE,EAAE;AAAK;;AAFuB,GAAlB,CAAhB;AAIA,SAAOH,OAAO,CAACI,KAAR,CAAcL,MAAd,EAAsBM,QAAtB,EAAP;AACD","sourcesContent":["import crypto from 'crypto';\n// @ts-ignore: Not typed\nimport { Encoder as Base32Encoder } from 'base32.js';\n\nexport default function generateBundleIdentifier(teamId: string): string {\n  return `dev.expo.client.${base32(sha(teamId))}`;\n}\n\nfunction sha(data: crypto.BinaryLike): Buffer {\n  const hash = crypto.createHash('sha224');\n  return hash.update(data).digest();\n}\n\nfunction base32(buffer: Buffer): number[] {\n  const encoder = new Base32Encoder({\n    type: 'rfc4648',\n    lc: true /* lowercase */,\n  });\n  return encoder.write(buffer).finalize();\n}\n"],"file":"generateBundleIdentifier.js"}