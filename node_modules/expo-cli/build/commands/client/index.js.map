{"version":3,"sources":["../../../src/commands/client/index.ts"],"names":["program","command","option","description","asyncActionProjectDir","projectDir","options","disabledServices","pushNotifications","name","reason","spinner","start","config","exp","skipSDKVersionRequirement","succeed","warn","ios","facebookAppId","facebookScheme","disabledReason","facebookLogin","googleMapsApiKey","googleMaps","googleServicesFile","contents","fs","readFile","path","resolve","user","UserManager","getCurrentUserAsync","context","Context","init","allowAnonymous","ensureAppleCtx","appleContext","appleCtx","getAllCredentials","isAllowed","errorMessage","appleTeamId","team","id","CommandError","bundleIdentifier","experienceName","appleApi","ensureAppExists","enablePushNotifications","devices","travelingFastlane","listDevices","appleId","appleIdPassword","udids","map","device","deviceNumber","distributionCert","SetupIosDist","getDistCert","CreateIosDist","provideOrGenerate","pushKey","SetupIosPush","getPushKey","provisioningProfile","createOrReuseProfile","CreateOrReuseProvisioningProfileAdhoc","distCertSerialNumber","getProvisioningProfile","createOrReuse","Object","keys","length","log","newLine","table","CliTable","head","style","push","serviceKey","service","toString","email","message","default","filter","value","trim","validate","test","addUdid","udidPrompt","type","result","customAppConfig","urlOpts","printQRCode","registrationUrl","chalk","green","statusUrl","asyncAction","currentSdkConfig","ClientUpgradeUtils","getExpoSdkConfig","process","cwd","currentSdkVersion","sdkVersion","undefined","sdkVersions","Versions","sdkVersionsAsync","latestSdk","newestReleasedSdkVersionAsync","currentSdk","recommendedClient","getClient","recommendedClientVersion","version","answer","upgradeToRecommended","Simulator","upgradeExpoAsync","url","upgradeToLatest","availableClients","getAvailableClients","project","platform","updateToAClient","targetClient","askClientToInstall","latestSdkVersion","clients","clientUrl","Android"],"mappings":"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","sourcesContent":["import { Android, Simulator, UserManager, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport CliTable from 'cli-table3';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport path from 'path';\nimport { Command } from 'commander';\n\nimport { getConfig, setCustomConfigPath } from '@expo/config';\nimport CommandError from '../../CommandError';\nimport log from '../../log';\nimport prompt from '../../prompt';\nimport urlOpts from '../../urlOpts';\nimport * as appleApi from '../../appleApi';\nimport { runAction, travelingFastlane } from '../../appleApi/fastlane';\nimport * as ClientUpgradeUtils from '../utils/ClientUpgradeUtils';\nimport { createClientBuildRequest, getExperienceName, isAllowedToBuild } from './clientBuildApi';\nimport generateBundleIdentifier from './generateBundleIdentifier';\nimport { SetupIosDist } from '../../credentials/views/SetupIosDist';\nimport { SetupIosPush } from '../../credentials/views/SetupIosPush';\nimport { Context } from '../../credentials/context';\nimport { CreateIosDist } from '../../credentials/views/IosDistCert';\nimport { CreateOrReuseProvisioningProfileAdhoc } from '../../credentials/views/IosProvisioningProfileAdhoc';\nimport { runCredentialsManager } from '../../credentials/route';\n\nexport default function (program: Command) {\n  program\n    .command('client:ios [project-dir]')\n    .option(\n      '--apple-id <login>',\n      'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).'\n    )\n    .description(\n      'Build a custom version of the Expo client for iOS using your own Apple credentials and install it on your mobile device using Safari.'\n    )\n    .asyncActionProjectDir(\n      async (projectDir: string, options: { appleId?: string; config?: string }) => {\n        const disabledServices: { [key: string]: { name: string; reason: string } } = {\n          pushNotifications: {\n            name: 'Push Notifications',\n            reason:\n              'not yet available until API tokens are supported for the Push Notification system',\n          },\n        };\n\n        // get custom project manifest if it exists\n        // Note: this is the current developer's project, NOT the Expo client's manifest\n        const spinner = ora(`Finding custom configuration for the Expo client...`).start();\n        if (options.config) {\n          setCustomConfigPath(projectDir, options.config);\n        }\n        const { exp } = getConfig(projectDir, {\n          skipSDKVersionRequirement: true,\n        });\n\n        if (exp) {\n          spinner.succeed(`Found custom configuration for the Expo client`);\n        } else {\n          spinner.warn(`Unable to find custom configuration for the Expo client`);\n        }\n        if (!exp.ios) exp.ios = {};\n\n        if (!exp.facebookAppId || !exp.facebookScheme) {\n          const disabledReason = exp\n            ? `facebookAppId or facebookScheme are missing from app configuration. `\n            : 'No custom configuration file could be found. You will need to provide a json file with valid facebookAppId and facebookScheme fields.';\n          disabledServices.facebookLogin = { name: 'Facebook Login', reason: disabledReason };\n        }\n        if (!exp.ios.config?.googleMapsApiKey) {\n          const disabledReason = exp\n            ? `ios.config.googleMapsApiKey does not exist in the app configuration.`\n            : 'No custom configuration file could be found. You will need to provide a json file with a valid ios.config.googleMapsApiKey field.';\n          disabledServices.googleMaps = { name: 'Google Maps', reason: disabledReason };\n        }\n        if (exp.ios.googleServicesFile) {\n          const contents = await fs.readFile(\n            path.resolve(projectDir, exp.ios.googleServicesFile!),\n            'base64'\n          );\n          exp.ios.googleServicesFile = contents;\n        }\n\n        const user = await UserManager.getCurrentUserAsync();\n        const context = new Context();\n        await context.init(projectDir, { allowAnonymous: true });\n        await context.ensureAppleCtx(options);\n        const appleContext = context.appleCtx;\n        if (user) {\n          await context.ios.getAllCredentials(); // initialize credentials\n        }\n\n        // check if any builds are in flight\n        const { isAllowed, errorMessage } = await isAllowedToBuild({\n          user,\n          appleTeamId: appleContext.team.id,\n        });\n\n        if (!isAllowed) {\n          throw new CommandError(\n            'CLIENT_BUILD_REQUEST_NOT_ALLOWED',\n            `New Expo client build request disallowed. Reason: ${errorMessage}`\n          );\n        }\n\n        const bundleIdentifier = generateBundleIdentifier(appleContext.team.id);\n        const experienceName = await getExperienceName({ user, appleTeamId: appleContext.team.id });\n\n        await appleApi.ensureAppExists(\n          appleContext,\n          { bundleIdentifier, experienceName },\n          { enablePushNotifications: true }\n        );\n\n        const { devices } = await runAction(travelingFastlane.listDevices, [\n          '--all-ios-profile-devices',\n          appleContext.appleId,\n          appleContext.appleIdPassword,\n          appleContext.team.id,\n        ]);\n        const udids = devices.map((device: { deviceNumber?: string }) => device.deviceNumber);\n\n        let distributionCert;\n        if (user) {\n          await runCredentialsManager(\n            context,\n            new SetupIosDist({ experienceName, bundleIdentifier })\n          );\n          distributionCert = await context.ios.getDistCert(experienceName, bundleIdentifier);\n        } else {\n          distributionCert = await new CreateIosDist().provideOrGenerate(context);\n        }\n        if (!distributionCert) {\n          throw new CommandError(\n            'INSUFFICIENT_CREDENTIALS',\n            `This build request requires a valid distribution certificate.`\n          );\n        }\n\n        let pushKey;\n        if (user) {\n          await runCredentialsManager(\n            context,\n            new SetupIosPush({ experienceName, bundleIdentifier })\n          );\n          pushKey = await context.ios.getPushKey(experienceName, bundleIdentifier);\n        }\n\n        let provisioningProfile;\n        const createOrReuseProfile = new CreateOrReuseProvisioningProfileAdhoc({\n          experienceName,\n          bundleIdentifier,\n          distCertSerialNumber: distributionCert.distCertSerialNumber!,\n          udids,\n        });\n        if (user) {\n          await runCredentialsManager(context, createOrReuseProfile);\n          provisioningProfile = await context.ios.getProvisioningProfile(\n            experienceName,\n            bundleIdentifier\n          );\n        } else {\n          provisioningProfile = await createOrReuseProfile.createOrReuse(context);\n        }\n        if (!provisioningProfile) {\n          throw new CommandError(\n            'INSUFFICIENT_CREDENTIALS',\n            `This build request requires a valid provisioning profile.`\n          );\n        }\n\n        // push notifications won't work if we dont have any push creds\n        // we also dont store anonymous creds, so user needs to be logged in\n        if (pushKey === null || !user) {\n          const disabledReason =\n            pushKey === null\n              ? 'you did not upload your push credentials'\n              : 'we require you to be logged in to store push credentials';\n          // TODO(quin): remove this when we fix push notifications\n          // keep the default push notification reason if we haven't implemented API tokens\n          disabledServices.pushNotifications.reason =\n            disabledServices.pushNotifications.reason || disabledReason;\n        }\n\n        if (Object.keys(disabledServices).length > 0) {\n          log.newLine();\n          log.warn('These services will be disabled in your custom Expo client:');\n          const table = new CliTable({ head: ['Service', 'Reason'], style: { head: ['cyan'] } });\n          table.push(\n            ...Object.keys(disabledServices).map(serviceKey => {\n              const service = disabledServices[serviceKey];\n              return [service.name, service.reason];\n            })\n          );\n          log(table.toString());\n          log(\n            'See https://docs.expo.io/guides/adhoc-builds/#optional-additional-configuration-steps for more details.'\n          );\n        }\n\n        let email;\n        if (user) {\n          email = user.email;\n        } else {\n          ({ email } = await prompt({\n            name: 'email',\n            message: 'Please enter an email address to notify, when the build is completed:',\n            default: context.user.email,\n            filter: value => value.trim(),\n            validate: (value: string) =>\n              /.+@.+/.test(value) ? true : \"That doesn't look like a valid email.\",\n          }));\n        }\n        log.newLine();\n\n        let addUdid;\n        if (udids.length === 0) {\n          log(\n            'There are no devices registered to your Apple Developer account. Please follow the instructions below to register an iOS device.'\n          );\n          addUdid = true;\n        } else {\n          log(\n            'Custom builds of the Expo client can only be installed on devices which have been registered with Apple at build-time.'\n          );\n          log('These devices are currently registered on your Apple Developer account:');\n          const table = new CliTable({ head: ['Name', 'Identifier'], style: { head: ['cyan'] } });\n          table.push(\n            ...devices.map((device: { name: string; deviceNumber: string | number }) => [\n              device.name,\n              device.deviceNumber,\n            ])\n          );\n          log(table.toString());\n\n          const udidPrompt = await prompt({\n            name: 'addUdid',\n            message: 'Would you like to register a new device to use the Expo client with?',\n            type: 'confirm',\n            default: true,\n          });\n          addUdid = udidPrompt.addUdid;\n        }\n\n        const result = await createClientBuildRequest({\n          user,\n          appleContext,\n          distributionCert,\n          provisioningProfile,\n          pushKey,\n          udids,\n          addUdid,\n          email,\n          bundleIdentifier,\n          customAppConfig: exp,\n        });\n\n        log.newLine();\n        if (addUdid) {\n          urlOpts.printQRCode(result.registrationUrl);\n          log(\n            'Open the following link on your iOS device (or scan the QR code) and follow the instructions to install the development profile:'\n          );\n          log.newLine();\n          log(chalk.green(`${result.registrationUrl}`));\n          log.newLine();\n          log('Please note that you can only register one iOS device per request.');\n          log(\n            \"After you register your device, we'll start building your client, and you'll receive an email when it's ready to install.\"\n          );\n        } else {\n          urlOpts.printQRCode(result.statusUrl);\n          log('Your custom Expo client is being built! 🛠');\n          log(\n            'Open this link on your iOS device (or scan the QR code) to view build logs and install the client:'\n          );\n          log.newLine();\n          log(chalk.green(`${result.statusUrl}`));\n        }\n        log.newLine();\n      }\n    );\n\n  program\n    .command('client:install:ios')\n    .description('Install the Expo client for iOS on the simulator')\n    .asyncAction(async () => {\n      const currentSdkConfig = await ClientUpgradeUtils.getExpoSdkConfig(process.cwd());\n      const currentSdkVersion = currentSdkConfig ? currentSdkConfig.sdkVersion : undefined;\n\n      if (!currentSdkVersion) {\n        log(\n          'Could not find your Expo project. If you run this from a project, we can help pick the right Expo client version!'\n        );\n      }\n\n      const sdkVersions = await Versions.sdkVersionsAsync();\n      const latestSdk = await Versions.newestReleasedSdkVersionAsync();\n      const currentSdk = sdkVersions[currentSdkVersion!];\n      const recommendedClient = currentSdk\n        ? ClientUpgradeUtils.getClient(currentSdk, 'ios')\n        : undefined;\n\n      if (currentSdk && !recommendedClient) {\n        log(\n          `You are currently using SDK ${currentSdkVersion}. Unfortunately, we couldn't detect the proper client version for this SDK.`\n        );\n      }\n\n      if (currentSdk && recommendedClient) {\n        const recommendedClientVersion = recommendedClient.version || 'version unknown';\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'upgradeToRecommended',\n          message: `You are currently using SDK ${currentSdkVersion}. Would you like to install client ${recommendedClientVersion} released for this SDK?`,\n        });\n        if (answer.upgradeToRecommended) {\n          await Simulator.upgradeExpoAsync(recommendedClient.url);\n          log('Done!');\n          return;\n        }\n      } else {\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'upgradeToLatest',\n          message: 'Do you want to install the latest client?',\n        });\n        if (answer.upgradeToLatest) {\n          await Simulator.upgradeExpoAsync();\n          log('Done!');\n          return;\n        }\n      }\n\n      const availableClients = ClientUpgradeUtils.getAvailableClients({\n        sdkVersions,\n        project: currentSdkConfig,\n        platform: 'ios',\n      });\n\n      if (availableClients.length === 0) {\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'updateToAClient',\n          message: currentSdk\n            ? `We don't have a compatible client for SDK ${currentSdkVersion}. Do you want to try the latest client?`\n            : \"It looks like we don't have a compatible client. Do you want to try the latest client?\",\n        });\n        if (answer.updateToAClient) {\n          await Simulator.upgradeExpoAsync();\n          log('Done!');\n        } else {\n          log('No client to install');\n        }\n        return;\n      }\n\n      const targetClient = await ClientUpgradeUtils.askClientToInstall({\n        currentSdkVersion,\n        latestSdkVersion: latestSdk.version,\n        clients: availableClients,\n      });\n\n      if (await Simulator.upgradeExpoAsync(targetClient.clientUrl)) {\n        log('Done!');\n      }\n    });\n\n  program\n    .command('client:install:android')\n    .description('Install the Expo client for Android on a connected device or emulator')\n    .asyncAction(async () => {\n      const currentSdkConfig = await ClientUpgradeUtils.getExpoSdkConfig(process.cwd());\n      const currentSdkVersion = currentSdkConfig ? currentSdkConfig.sdkVersion : undefined;\n\n      if (!currentSdkVersion) {\n        log(\n          'Could not find your Expo project. If you run this from a project, we can help pick the right Expo client version!'\n        );\n      }\n\n      const sdkVersions = await Versions.sdkVersionsAsync();\n      const latestSdk = await Versions.newestReleasedSdkVersionAsync();\n      const currentSdk = sdkVersions[currentSdkVersion!];\n      const recommendedClient = currentSdk\n        ? ClientUpgradeUtils.getClient(currentSdk, 'android')\n        : undefined;\n\n      if (currentSdk && !recommendedClient) {\n        log(\n          `You are currently using SDK ${currentSdkVersion}. Unfortunately, we couldn't detect the proper client version for this SDK.`\n        );\n      }\n\n      if (currentSdk && recommendedClient) {\n        const recommendedClientVersion = recommendedClient.version || 'version unknown';\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'upgradeToRecommended',\n          message: `You are currently using SDK ${currentSdkVersion}. Would you like to install client ${recommendedClientVersion} released for this SDK?`,\n        });\n        if (answer.upgradeToRecommended) {\n          await Android.upgradeExpoAsync(recommendedClient.url);\n          log('Done!');\n          return;\n        }\n      } else {\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'upgradeToLatest',\n          message: 'Do you want to install the latest client?',\n        });\n        if (answer.upgradeToLatest) {\n          await Android.upgradeExpoAsync();\n          log('Done!');\n          return;\n        }\n      }\n\n      const availableClients = ClientUpgradeUtils.getAvailableClients({\n        sdkVersions,\n        project: currentSdkConfig,\n        platform: 'android',\n      });\n\n      if (availableClients.length === 0) {\n        const answer = await prompt({\n          type: 'confirm',\n          name: 'updateToAClient',\n          message: currentSdk\n            ? `We don't have a compatible client for SDK ${currentSdkVersion}. Do you want to try the latest client?`\n            : \"It looks like we don't have a compatible client. Do you want to try the latest client?\",\n        });\n        if (answer.updateToAClient) {\n          await Android.upgradeExpoAsync();\n          log('Done!');\n        } else {\n          log('No client to install');\n        }\n        return;\n      }\n\n      const targetClient = await ClientUpgradeUtils.askClientToInstall({\n        currentSdkVersion,\n        latestSdkVersion: latestSdk.version,\n        clients: availableClients,\n      });\n\n      if (await Android.upgradeExpoAsync(targetClient.clientUrl)) {\n        log('Done!');\n      }\n    });\n}\n"],"file":"index.js"}