{"version":3,"sources":["../src/projects.ts"],"names":["ensureProjectExistsAsync","user","accountName","projectName","privacy","projectFullName","spinner","log","chalk","bold","start","client","ApiV2","clientForUser","id","getAsync","experienceName","succeed","err","code","fail","text","postAsync","ProjectPrivacy","PUBLIC"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAQA,eAAeA,wBAAf,CACEC,IADF,EAEE;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,CAFF,EAGmB;AACjB,QAAMC,eAAe,GAAI,IAAGH,WAAY,IAAGC,WAAY,EAAvD;AAEA,QAAMG,OAAO,GAAG,oBACb,oBAAmBC,eAAIC,KAAJ,CAAUC,IAAV,CAAeJ,eAAf,CAAgC,gCADtC,EAEdK,KAFc,EAAhB;;AAIA,QAAMC,MAAM,GAAGC,aAAMC,aAAN,CAAoBZ,IAApB,CAAf;;AACA,MAAI;AACF,UAAM,CAAC;AAAEa,MAAAA;AAAF,KAAD,IAAW,MAAMH,MAAM,CAACI,QAAP,CAAgB,UAAhB,EAA4B;AAAEC,MAAAA,cAAc,EAAEX;AAAlB,KAA5B,CAAvB;AACAC,IAAAA,OAAO,CAACW,OAAR;AACA,WAAOH,EAAP;AACD,GAJD,CAIE,OAAOI,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,sBAAjB,EAAyC;AACvCb,MAAAA,OAAO,CAACc,IAAR,CACG,iDAAgDb,eAAIC,KAAJ,CAAUC,IAAV,CAC/CJ,eAD+C,CAE/C,kBAHJ;AAKA,YAAMa,GAAN;AACD;AACF;;AACD,MAAI;AACFZ,IAAAA,OAAO,CAACe,IAAR,GAAgB,uBAAsBd,eAAIC,KAAJ,CAAUC,IAAV,CAAeJ,eAAf,CAAgC,kBAAtE;AACA,UAAM;AAAES,MAAAA;AAAF,QAAS,MAAMH,MAAM,CAACW,SAAP,CAAiB,UAAjB,EAA6B;AAChDpB,MAAAA,WADgD;AAEhDC,MAAAA,WAFgD;AAGhDC,MAAAA,OAAO,EAAEA,OAAO,IAAImB,yBAAeC;AAHa,KAA7B,CAArB;AAKAlB,IAAAA,OAAO,CAACW,OAAR;AACA,WAAOH,EAAP;AACD,GATD,CASE,OAAOI,GAAP,EAAY;AACZZ,IAAAA,OAAO,CAACc,IAAR;AACA,UAAMF,GAAN;AACD;AACF","sourcesContent":["import { ProjectPrivacy } from '@expo/config';\nimport { ApiV2, User } from '@expo/xdl';\nimport ora from 'ora';\n\nimport log from './log';\n\ninterface ProjectData {\n  accountName: string;\n  projectName: string;\n  privacy?: ProjectPrivacy;\n}\n\nasync function ensureProjectExistsAsync(\n  user: User,\n  { accountName, projectName, privacy }: ProjectData\n): Promise<string> {\n  const projectFullName = `@${accountName}/${projectName}`;\n\n  const spinner = ora(\n    `Ensuring project ${log.chalk.bold(projectFullName)} is registered on Expo servers`\n  ).start();\n\n  const client = ApiV2.clientForUser(user);\n  try {\n    const [{ id }] = await client.getAsync('projects', { experienceName: projectFullName });\n    spinner.succeed();\n    return id;\n  } catch (err) {\n    if (err.code !== 'EXPERIENCE_NOT_FOUND') {\n      spinner.fail(\n        `Something went wrong when looking for project ${log.chalk.bold(\n          projectFullName\n        )} on Expo servers`\n      );\n      throw err;\n    }\n  }\n  try {\n    spinner.text = `Registering project ${log.chalk.bold(projectFullName)} on Expo servers`;\n    const { id } = await client.postAsync('projects', {\n      accountName,\n      projectName,\n      privacy: privacy || ProjectPrivacy.PUBLIC,\n    });\n    spinner.succeed();\n    return id;\n  } catch (err) {\n    spinner.fail();\n    throw err;\n  }\n}\n\nexport { ensureProjectExistsAsync };\n"],"file":"projects.js"}