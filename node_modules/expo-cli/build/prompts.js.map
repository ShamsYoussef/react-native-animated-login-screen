{"version":3,"sources":["../src/prompts.ts"],"names":["prompt","questions","nonInteractiveHelp","options","Array","isArray","program","nonInteractive","length","message","question","questionMessage","undefined","trim","replace","CommandError","onCancel","separator","title","disable","value","inject","prompts"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAIe,SAASA,MAAT,CACbC,SADa,EAEb;AAAEC,EAAAA,kBAAF;AAAsB,KAAGC;AAAzB,IAAgF,EAFnE,EAGb;AACAF,EAAAA,SAAS,GAAGG,KAAK,CAACC,OAAN,CAAcJ,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAnD;;AACA,MAAIK,qBAAQC,cAAR,IAA0BN,SAAS,CAACO,MAAV,KAAqB,CAAnD,EAAsD;AACpD,QAAIC,OAAO,GAAI,+DAAf;;AACA,QAAIP,kBAAJ,EAAwB;AACtBO,MAAAA,OAAO,IAAIP,kBAAX;AACD,KAFD,MAEO;AACL,YAAMQ,QAAQ,GAAGT,SAAS,CAAC,CAAD,CAA1B;AACA,YAAMU,eAAe,GACnB,OAAOD,QAAQ,CAACD,OAAhB,KAA4B,UAA5B,GACIC,QAAQ,CAACD,OAAT,CAAiBG,SAAjB,EAA4B,EAA5B,EAAgCF,QAAhC,CADJ,GAEIA,QAAQ,CAACD,OAHf;AAKAA,MAAAA,OAAO,IAAK,oBAAmB,CAACE,eAAe,IAAI,EAApB,EAAwBE,IAAxB,GAA+BC,OAA/B,CAAuC,KAAvC,EAA8C,IAA9C,CAAoD,EAAnF;AACD;;AACD,UAAM,KAAIC,uBAAJ,EAAiB,iBAAjB,EAAoCN,OAApC,CAAN;AACD;;AACD,SAAO,wBAAQR,SAAR,EAAmB;AACxBe,IAAAA,QAAQ,GAAG;AACT,YAAM,KAAID,uBAAJ,EAAiB,SAAjB,CAAN;AACD,KAHuB;;AAIxB,OAAGZ;AAJqB,GAAnB,CAAP;AAMD,C,CAED;AACA;;;AACAH,MAAM,CAACiB,SAAP,GAAoBC,KAAD,KAA4B;AAAEA,EAAAA,KAAF;AAASC,EAAAA,OAAO,EAAE,IAAlB;AAAwBC,EAAAA,KAAK,EAAER;AAA/B,CAA5B,CAAnB;AAEA;;;;;;AAIAZ,MAAM,CAACqB,MAAP,GAAgBC,mBAAQD,MAAxB","sourcesContent":["import program from 'commander';\nimport prompts, { Choice, Options, PromptType, PromptObject as Question } from 'prompts';\n\nimport CommandError from './CommandError';\n\nexport { PromptType, Question };\n\nexport default function prompt(\n  questions: Question | Question[],\n  { nonInteractiveHelp, ...options }: { nonInteractiveHelp?: string } & Options = {}\n) {\n  questions = Array.isArray(questions) ? questions : [questions];\n  if (program.nonInteractive && questions.length !== 0) {\n    let message = `Input is required, but Expo CLI is in non-interactive mode.\\n`;\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      const question = questions[0];\n      const questionMessage =\n        typeof question.message === 'function'\n          ? question.message(undefined, {}, question)\n          : question.message;\n\n      message += `Required input:\\n${(questionMessage || '').trim().replace(/^/gm, '> ')}`;\n    }\n    throw new CommandError('NON_INTERACTIVE', message);\n  }\n  return prompts(questions, {\n    onCancel() {\n      throw new CommandError('ABORTED');\n    },\n    ...options,\n  });\n}\n\n// todo: replace this workaround, its still selectable by the cursor\n// see: https://github.com/terkelg/prompts/issues/254\nprompt.separator = (title: string): Choice => ({ title, disable: true, value: undefined });\n\n/**\n * Expose inject method to answering questions programatically, for testing purposes.\n * @see https://github.com/terkelg/prompts#injectvalues\n */\nprompt.inject = prompts.inject;\n"],"file":"prompts.js"}