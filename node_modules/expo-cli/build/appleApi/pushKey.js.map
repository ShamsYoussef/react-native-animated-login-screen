{"version":3,"sources":["../../src/appleApi/pushKey.ts"],"names":["isPushKey","obj","apnsKeyP8","apnsKeyId","teamId","APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","PushKeyManager","constructor","appleCtx","ctx","list","spinner","start","args","appleId","appleIdPassword","team","id","keys","travelingFastlane","managePushKeys","succeed","create","name","teamName","err","stop","resultString","rawDump","match","CommandError","ErrorCodes","APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR","revoke","ids","join","format"],"mappings":"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","sourcesContent":["import ora from 'ora';\nimport dateformat from 'dateformat';\nimport chalk from 'chalk';\nimport CommandError, { ErrorCodes } from '../CommandError';\n\nimport { AppleCtx } from './authenticate';\nimport { runAction, travelingFastlane } from './fastlane';\n\nexport type PushKeyInfo = {\n  id: string;\n  name: string;\n};\n\nexport type PushKey = {\n  apnsKeyP8: string;\n  apnsKeyId: string;\n  teamId: string;\n  teamName?: string;\n};\n\nexport function isPushKey(obj: { [key: string]: any }): obj is PushKey {\n  return (\n    obj.apnsKeyP8 &&\n    typeof obj.apnsKeyP8 === 'string' &&\n    obj.apnsKeyId &&\n    typeof obj.apnsKeyId === 'string' &&\n    obj.teamId &&\n    typeof obj.teamId === 'string'\n  );\n}\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Apple Keys generated on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nexport class PushKeyManager {\n  ctx: AppleCtx;\n  constructor(appleCtx: AppleCtx) {\n    this.ctx = appleCtx;\n  }\n\n  async list(): Promise<PushKeyInfo[]> {\n    const spinner = ora(`Getting Push Keys from Apple...`).start();\n    const args = ['list', this.ctx.appleId, this.ctx.appleIdPassword, this.ctx.team.id];\n    const { keys } = await runAction(travelingFastlane.managePushKeys, args);\n    spinner.succeed();\n    return keys;\n  }\n\n  async create(\n    name = `Expo Push Notifications Key ${dateformat('yyyymmddHHMMss')}`\n  ): Promise<PushKey> {\n    const spinner = ora(`Creating Push Key on Apple Servers...`).start();\n    try {\n      const args = ['create', this.ctx.appleId, this.ctx.appleIdPassword, this.ctx.team.id, name];\n      const { apnsKeyId, apnsKeyP8 } = await runAction(travelingFastlane.managePushKeys, args);\n      spinner.succeed();\n      return {\n        apnsKeyId,\n        apnsKeyP8,\n        teamId: this.ctx.team.id,\n        teamName: this.ctx.team.name,\n      };\n    } catch (err) {\n      spinner.stop();\n      const resultString = err.rawDump?.resultString;\n      if (resultString && resultString.match(/maximum allowed number of Keys/)) {\n        throw new CommandError(\n          ErrorCodes.APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR,\n          APPLE_KEYS_TOO_MANY_GENERATED_ERROR\n        );\n      }\n      throw err;\n    }\n  }\n\n  async revoke(ids: string[]) {\n    const spinner = ora(`Revoking Push Key on Apple Servers...`).start();\n    const args = [\n      'revoke',\n      this.ctx.appleId,\n      this.ctx.appleIdPassword,\n      this.ctx.team.id,\n      ids.join(','),\n    ];\n    await runAction(travelingFastlane.managePushKeys, args);\n    spinner.succeed();\n  }\n\n  format({ id, name }: PushKeyInfo): string {\n    return `${name} - ID: ${id}`;\n  }\n}\n"],"file":"pushKey.js"}