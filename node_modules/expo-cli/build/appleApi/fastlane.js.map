{"version":3,"sources":["../../src/appleApi/fastlane.ts"],"names":["travelingFastlane","process","platform","require","WSL_BASH_PATH","WSL_BASH","WSL_ONLY_PATH","runAction","fastlaneAction","args","options","pipeStdout","command","commandArgs","getCommandAndArgsForPlatform","stderr","stdio","result","rest","JSON","parse","trim","reason","rawDump","err","Error","stringify","argsJoined","map","i","join","windowsToWSLPath","_path","slashPath","diskLetter","toLowerCase","pathOnDisk","slice"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,iBAAiB,GACrBC,OAAO,CAACC,QAAR,KAAqB,QAArB,GACIC,OAAO,CAAC,iCAAD,CAAP,EADJ,GAEIA,OAAO,CAAC,gCAAD,CAAP,EAHN;;AAKA,MAAMC,aAAa,GAAG,iCAAtB;;AACA,MAAMC,QAAQ,GAAG,MAAjB;AACA,MAAMC,aAAa,GAAG,mEAAtB;;AAMA,eAAeC,SAAf,CAAyBC,cAAzB,EAAiDC,IAAjD,EAAiEC,OAAgB,GAAG,EAApF,EAAwF;AACtF,QAAM;AAAEC,IAAAA,UAAU,GAAG;AAAf,MAAyBD,OAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BC,4BAA4B,CAACN,cAAD,EAAiBC,IAAjB,CAA7D;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAa,MAAM,2BAAWH,OAAX,EAAoBC,WAApB,EAAiC;AACxDG,IAAAA,KAAK,EAAE,CAAC,SAAD,EAAYL,UAAU,GAAG,SAAH,GAAe,MAArC,EAA6C,MAA7C;AADiD,GAAjC,CAAzB;AAGA,QAAM;AAAEM,IAAAA,MAAF;AAAU,OAAGC;AAAb,MAAsBC,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACM,IAAP,EAAX,CAA5B;;AACA,MAAIJ,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAOC,IAAP;AACD,GAFD,MAEO;AACL,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBL,IAA5B;AACA,UAAMM,GAAG,GAAG,IAAIC,KAAJ,CAAW,WAAUH,MAAO,UAASH,IAAI,CAACO,SAAL,CAAeH,OAAf,CAAwB,EAA7D,CAAZ,CAFK,CAGL;;AACAC,IAAAA,GAAG,CAACD,OAAJ,GAAcA,OAAd;AACA,UAAMC,GAAN;AACD;AACF;;AAED,SAASV,4BAAT,CAAsCN,cAAtC,EAA8DC,IAA9D,EAA8E;AAC5E,MAAIR,OAAO,CAACC,QAAR,KAAqB,OAAzB,EAAkC;AAChC,UAAMU,OAAO,GAAGP,QAAhB;AACA,UAAMsB,UAAU,GAAGlB,IAAI,CAACmB,GAAL,CAASC,CAAC,IAAK,IAAGA,CAAE,GAApB,EAAwBC,IAAxB,CAA6B,GAA7B,CAAnB;AACA,UAAMjB,WAAW,GAAG,CAClB,IADkB,EAEjB,GAAEP,aAAc,IAAGyB,gBAAgB,CAACvB,cAAD,CAAiB,IAAGmB,UAAW,EAFjD,CAApB;AAIA,WAAO;AAAEf,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAP;AACD,GARD,MAQO;AACL,UAAMD,OAAO,GAAGJ,cAAhB;AACA,UAAMK,WAAW,GAAG,CAAC,GAAGJ,IAAJ,CAApB;AACA,WAAO;AAAEG,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAP;AACD;AACF;;AAED,SAASkB,gBAAT,CAA0BC,KAA1B,EAAyC;AACvC,QAAMC,SAAS,GAAG,sBAAMD,KAAN,CAAlB;;AACA,QAAME,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,WAAT,EAAnB;;AACA,QAAMC,UAAU,GAAGH,SAAS,CAACI,KAAV,CAAgB,CAAhB,CAAnB;AACA,SAAQ,QAAOH,UAAW,GAAEE,UAAW,EAAvC;AACD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport slash from 'slash';\n\nconst travelingFastlane =\n  process.platform === 'darwin'\n    ? require('@expo/traveling-fastlane-darwin')()\n    : require('@expo/traveling-fastlane-linux')();\n\nconst WSL_BASH_PATH = 'C:\\\\Windows\\\\system32\\\\bash.exe';\nconst WSL_BASH = 'bash';\nconst WSL_ONLY_PATH = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';\n\ntype Options = {\n  pipeStdout?: boolean;\n};\n\nasync function runAction(fastlaneAction: string, args: string[], options: Options = {}) {\n  const { pipeStdout = false } = options;\n  const { command, commandArgs } = getCommandAndArgsForPlatform(fastlaneAction, args);\n  const { stderr } = await spawnAsync(command, commandArgs, {\n    stdio: ['inherit', pipeStdout ? 'inherit' : 'pipe', 'pipe'],\n  });\n  const { result, ...rest } = JSON.parse(stderr.trim());\n  if (result === 'success') {\n    return rest;\n  } else {\n    const { reason, rawDump } = rest;\n    const err = new Error(`Reason: ${reason}, raw: ${JSON.stringify(rawDump)}`);\n    // @ts-ignore\n    err.rawDump = rawDump;\n    throw err;\n  }\n}\n\nfunction getCommandAndArgsForPlatform(fastlaneAction: string, args: string[]) {\n  if (process.platform === 'win32') {\n    const command = WSL_BASH;\n    const argsJoined = args.map(i => `\"${i}\"`).join(' ');\n    const commandArgs = [\n      '-c',\n      `${WSL_ONLY_PATH} ${windowsToWSLPath(fastlaneAction)} ${argsJoined}`,\n    ];\n    return { command, commandArgs };\n  } else {\n    const command = fastlaneAction;\n    const commandArgs = [...args];\n    return { command, commandArgs };\n  }\n}\n\nfunction windowsToWSLPath(_path: string) {\n  const slashPath = slash(_path);\n  const diskLetter = _path[0].toLowerCase();\n  const pathOnDisk = slashPath.slice(2);\n  return `/mnt/${diskLetter}${pathOnDisk}`;\n}\n\nexport { travelingFastlane, runAction, WSL_BASH_PATH };\n"],"file":"fastlane.js"}