{"version":3,"sources":["../../src/appleApi/authenticate.ts"],"names":["APPLE_IN_HOUSE_TEAM_TYPE","authenticate","options","appleId","appleIdPassword","_requestAppleIdCreds","teams","fastlaneSession","travelingFastlane","pipeStdout","chalk","green","team","_chooseTeam","teamId","err","red","_getAppleIdFromParams","_promptForAppleId","passedAppleIdPassword","process","env","EXPO_APPLE_PASSWORD","Error","wrap","stdout","columns","here","bold","grey","promptAppleId","type","name","message","validate","nonEmptyInput","nonInteractiveHelp","answer","userProvidedTeamId","length","foundTeam","find","_formatTeam","log","warn","choices","map","i","value","id","inHouse","toLowerCase"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport terminalLink from 'terminal-link';\nimport wordwrap from 'wordwrap';\n\nimport { runAction, travelingFastlane } from './fastlane';\nimport { nonEmptyInput } from '../validators';\nimport log from '../log';\nimport prompt from '../prompt';\n\nconst APPLE_IN_HOUSE_TEAM_TYPE = 'in-house';\n\nexport type Options = {\n  appleIdPassword?: string;\n  appleId?: string;\n  teamId?: string;\n};\n\ntype AppleCredentials = {\n  appleIdPassword: string;\n  appleId: string;\n};\n\nexport type Team = {\n  id: string;\n  name?: string;\n  inHouse?: boolean;\n};\n\ntype FastlaneTeam = {\n  name: string;\n  teamId: string;\n  status: string;\n  type: string;\n};\n\nexport type AppleCtx = {\n  appleId: string;\n  appleIdPassword: string;\n  team: Team;\n  fastlaneSession: string;\n};\n\nexport async function authenticate(options: Options = {}): Promise<AppleCtx> {\n  const { appleId, appleIdPassword } = await _requestAppleIdCreds(options);\n  log(`Authenticating to Apple Developer Portal...`); // use log instead of spinner in case we need to prompt user for 2fa\n  try {\n    const { teams, fastlaneSession } = await runAction(\n      travelingFastlane.authenticate,\n      [appleId, appleIdPassword],\n      {\n        pipeStdout: true,\n      }\n    );\n    log(chalk.green('Authenticated with Apple Developer Portal successfully!'));\n    const team = await _chooseTeam(teams, options.teamId);\n    return { appleId, appleIdPassword, team, fastlaneSession };\n  } catch (err) {\n    log(chalk.red('Authentication with Apple Developer Portal failed!'));\n    throw err;\n  }\n}\n\nasync function _requestAppleIdCreds(options: Options): Promise<AppleCredentials> {\n  return _getAppleIdFromParams(options) || (await _promptForAppleId());\n}\n\nfunction _getAppleIdFromParams({ appleId, appleIdPassword }: Options): AppleCredentials | null {\n  const passedAppleIdPassword = appleIdPassword || process.env.EXPO_APPLE_PASSWORD;\n\n  // none of the apple id params were set, assume user has no intention of passing it in\n  if (!appleId && !passedAppleIdPassword) {\n    return null;\n  }\n\n  // partial apple id params were set, assume user has intention of passing it in\n  if (!(appleId && passedAppleIdPassword)) {\n    throw new Error(\n      'In order to provide your Apple ID credentials, you must set the --apple-id flag and set the EXPO_APPLE_PASSWORD environment variable.'\n    );\n  }\n\n  return {\n    appleId: appleId as string,\n    appleIdPassword: passedAppleIdPassword as string,\n  };\n}\n\nasync function _promptForAppleId(): Promise<AppleCredentials> {\n  const wrap = wordwrap(process.stdout.columns || 80);\n  log(\n    wrap(\n      'Please enter your Apple Developer Program account credentials. ' +\n        'These credentials are needed to manage certificates, keys and provisioning profiles ' +\n        `in your Apple Developer account.`\n    )\n  );\n\n  // https://docs.expo.io/distribution/security/#apple-developer-account-credentials\n  const here = terminalLink('here', 'https://bit.ly/2VtGWhU');\n  log(wrap(chalk.bold(`The password is only used to authenticate with Apple and never stored`)));\n  log(wrap(chalk.grey(`Learn more ${here}`)));\n\n  const { appleId: promptAppleId } = await prompt(\n    {\n      type: 'input',\n      name: 'appleId',\n      message: `Apple ID:`,\n      validate: nonEmptyInput,\n    },\n    {\n      nonInteractiveHelp: 'Pass your Apple ID using the --apple-id flag.',\n    }\n  );\n  const { appleIdPassword } = await prompt(\n    {\n      type: 'password',\n      name: 'appleIdPassword',\n      message: answer => `Password (for ${promptAppleId}):`,\n      validate: nonEmptyInput,\n    },\n    {\n      nonInteractiveHelp:\n        'Pass your Apple ID password using the EXPO_APPLE_PASSWORD environment variable',\n    }\n  );\n  return { appleId: promptAppleId, appleIdPassword };\n}\n\nasync function _chooseTeam(teams: FastlaneTeam[], userProvidedTeamId?: string): Promise<Team> {\n  if (teams.length === 0) {\n    throw new Error(`You have no team associated with your Apple account, cannot proceed.\n(Do you have a paid Apple Developer account?)`);\n  }\n\n  if (userProvidedTeamId) {\n    const foundTeam = teams.find(({ teamId }) => teamId === userProvidedTeamId);\n    if (foundTeam) {\n      log(`Using Apple Team with ID: ${userProvidedTeamId}`);\n      return _formatTeam(foundTeam);\n    } else {\n      log.warn(`Your account is not associated with Apple Team with ID: ${userProvidedTeamId}`);\n    }\n  }\n\n  if (teams.length === 1) {\n    const [team] = teams;\n    log(`Only 1 team associated with your account, using Apple Team with ID: ${team.teamId}`);\n    return _formatTeam(team);\n  } else {\n    log(`You have ${teams.length} teams associated with your account`);\n    const choices = teams.map((team, i) => ({\n      name: `${i + 1}) ${team.teamId} \"${team.name}\" (${team.type})`,\n      value: team,\n    }));\n    const { team } = await prompt(\n      {\n        type: 'list',\n        name: 'team',\n        message: 'Which team would you like to use?',\n        choices,\n      },\n      {\n        nonInteractiveHelp: 'Pass in your Apple Team ID using the --team-id flag.',\n      }\n    );\n    return _formatTeam(team);\n  }\n}\n\nfunction _formatTeam({ teamId, name, type }: FastlaneTeam): Team {\n  return {\n    id: teamId,\n    name: `${name} (${type})`,\n    inHouse: type.toLowerCase() === APPLE_IN_HOUSE_TEAM_TYPE,\n  };\n}\n"],"file":"authenticate.js"}