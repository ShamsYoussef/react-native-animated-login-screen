{"version":3,"sources":["../src/accounts.ts"],"names":["UserManager","initialize","loginOrRegisterAsync","log","warn","program","nonInteractive","CommandError","name","question","type","message","choices","value","action","register","login","loginOrRegisterIfLoggedOutAsync","user","getCurrentUserAsync","options","parent","chalk","green","username","_usernamePasswordAuth","password","process","env","EXPO_CLI_PASSWORD","questions","push","validate","val","trim","answers","data","loginAsync","console","Error","filter","registeredUser","registerAsync"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\n\nimport { RegistrationData, User, UserManager } from '@expo/xdl';\nimport CommandError from './CommandError';\nimport prompt, { Question } from './prompt';\nimport log from './log';\n\nUserManager.initialize();\n\ntype CommandOptions = {\n  username?: string;\n  password?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  log.warn('An Expo user account is required to proceed.');\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        name: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        name: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        name: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await prompt(question);\n\n  if (action === 'register') {\n    return register();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  let user = await UserManager.getCurrentUserAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync();\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'action',\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      };\n\n      const { action } = await prompt(question);\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\nasync function _usernamePasswordAuth(username?: string, password?: string): Promise<User> {\n  const questions: Question[] = [];\n  if (!username) {\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username/Email Address:',\n      validate(val: string) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val: string) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await prompt(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n  };\n\n  let user = await UserManager.loginAsync('user-pass', data);\n\n  if (user) {\n    console.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport async function register(): Promise<User> {\n  console.log(\n    `\nThanks for signing up for Expo!\nJust a few questions:\n`\n  );\n\n  const questions: Question[] = [\n    {\n      type: 'input',\n      name: 'email',\n      message: 'E-mail:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'input',\n      name: 'username',\n      message: 'Username:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return 'Please create a password';\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'passwordRepeat',\n      message: 'Confirm Password:',\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        if (!answers || !answers.password || val.trim() !== answers.password.trim()) {\n          return `Passwords don't match!`;\n        }\n        return true;\n      },\n    },\n  ];\n  const answers = await prompt(questions);\n  const registeredUser = await UserManager.registerAsync(answers as RegistrationData);\n  console.log('\\nThanks for signing up!');\n  return registeredUser;\n}\n"],"file":"accounts.js"}